[["index.html", "Black Wealth in Louisville Chapter 1 Introduction", " Black Wealth in Louisville Greater Louisville Project 2021 Chapter 1 Introduction This report was created with the Louisville Urban League. logo! Thanks to contributors. "],["digital-divide.html", "Chapter 2 Digital Divide 2.1 Overall Access 2.2 Across Louisville 2.3 Child Internet Access 2.4 Internet as a Public Utility", " Chapter 2 Digital Divide #Filtering to just GLP peer MSAs library(tidyverse) df &lt;- read_csv( &quot;ipums_internet_access/glp_int.csv&quot;, col_types = cols( YEAR = col_double(), SAMPLE = col_double(), SERIAL = col_double(), CBSERIAL = col_double(), HHWT = col_double(), CLUSTER = col_double(), STATEFIP = col_double(), METRO = col_double(), MET2013 = col_double(), PUMA = col_double(), STRATA = col_double(), GQ = col_double(), CINETHH = col_double(), CILAPTOP = col_double(), CISMRTPHN = col_double(), CITABLET = col_double(), CIHISPEED = col_double(), CIDIAL = col_double(), PERNUM = col_double(), PERWT = col_double(), SEX = col_double(), AGE = col_double(), RACE = col_double(), RACED = col_double(), HISPAN = col_double(), HISPAND = col_double(), EDUC = col_double(), EDUCD = col_double(), POVERTY = col_double(), city = col_character() ) ) df_city &lt;- df %&gt;% filter(MET2013 %in% c(24340, 41180, 36420, 46140, 24860, 28940, 13820, 31140, 26900, 28140, 36540, 24660, 16740, 18140, 17140, 34980, 32820)) %&gt;% mutate(city = case_when( MET2013 == 24340 ~ &quot;Grand Rapids&quot;, MET2013 == 41180 ~ &quot;St. Louis&quot;, MET2013 == 36420 ~ &quot;Oklahoma City&quot;, MET2013 == 46140 ~ &quot;Tulsa&quot;, MET2013 == 24860 ~ &quot;Greenville&quot;, MET2013 == 28940 ~ &quot;Knoxville&quot;, MET2013 == 13820 ~ &quot;Birmingham&quot;, MET2013 == 31140 ~ &quot;Louisville&quot;, MET2013 == 26900 ~ &quot;Indianapolis&quot;, MET2013 == 28140 ~ &quot;Kansas City&quot;, MET2013 == 36540 ~ &quot;Omaha&quot;, MET2013 == 24660 ~ &quot;Greensboro&quot;, MET2013 == 16740 ~ &quot;Charlotte&quot;, MET2013 == 18140 ~ &quot;Columbus&quot;, MET2013 == 17140 ~ &quot;Cincinnati&quot;, MET2013 == 34980 ~ &quot;Nashville&quot;, MET2013 == 32820 ~ &quot;Memphis&quot;, TRUE ~ NA_character_ )) %&gt;% write_csv(&quot;ipums_internet_access/glp_int_MSAs.csv&quot;) 2.1 Overall Access This report uses census Microdata from IPUMS to look at internet access in the Louisville MSA. Data is available from 2013 to 2018. About 1 in 10 households in Louisville have no internet access, and 3 in 10 do not have the high speed access necessary for working and learning at home. Access to high speed internet access has not improved in the past 6 years. Households also lack access to devices, with 15% of houses not having a computer or a tablet. Houses that do have computers or tablets are also unlikely to have enough devices for multiple people working from home (unfortunately the Census data only asks about having 1 or more device). # Libraries library(tidyverse) library(survey) library(glptools) library(classInt) library(ggthemes) library(ggplot2) library(rgdal) library(sf) library(magrittr) library(showtext) library(kableExtra) showtext_auto() font_add(&quot;Montserrat&quot;, &quot;Black_wealth/Montserrat/Montserrat-Regular.ttf&quot;) font_add(&quot;Montserrat Bold&quot;, &quot;Black_wealth/Montserrat/Montserrat-SemiBold.ttf&quot;) df &lt;- read_csv( &quot;ipums_internet_access/glp_int_MSAs.csv&quot;, col_types = cols( YEAR = col_double(), SAMPLE = col_double(), SERIAL = col_double(), CBSERIAL = col_double(), HHWT = col_double(), CLUSTER = col_double(), STATEFIP = col_double(), METRO = col_double(), MET2013 = col_double(), PUMA = col_double(), STRATA = col_double(), GQ = col_double(), CINETHH = col_double(), CILAPTOP = col_double(), CISMRTPHN = col_double(), CITABLET = col_double(), CIHISPEED = col_double(), CIDIAL = col_double(), PERNUM = col_double(), PERWT = col_double(), SEX = col_double(), AGE = col_double(), RACE = col_double(), RACED = col_double(), HISPAN = col_double(), HISPAND = col_double(), EDUC = col_double(), EDUCD = col_double(), POVERTY = col_double(), city = col_character() ) ) df &lt;- df %&gt;% mutate( int_acc = case_when( CINETHH == 0 ~ NA_real_, CINETHH == 1 ~ 1, CINETHH == 2 ~ 1, CINETHH == 3 ~ 0), hspd_int = case_when( CINETHH == 0 ~ NA_real_, CINETHH == 3 &amp; CIHISPEED == 0 ~ 0, #seems like it&#39;s marked NA if the household doesn&#39;t have internet access. We want it to be no High Speed access CIHISPEED &gt; 9 &amp; CIHISPEED &lt; 20 ~ 1, CIHISPEED == 20 ~ 0 ), computer = case_when( CILAPTOP == 0 ~ NA_real_, CILAPTOP == 1 ~ 1, CILAPTOP == 2 ~ 0 ), tablet = case_when( CITABLET == 0 ~ NA_real_, CITABLET == 1 ~ 1, CITABLET == 2 ~ 0 ), comp_tab = case_when( computer == 1 | tablet == 1 ~ 1, computer == 0 &amp; tablet == 0 ~ 0, TRUE ~ NA_real_ ), hspd_dev = case_when( comp_tab == 1 &amp; hspd_int == 1 ~ 1, comp_tab == 0 | hspd_int == 0 ~ 0, TRUE ~ NA_real_ ) ) # These questions are usually only NA for group quarters # All the NA rows are the same for all categories in the Louisville sample df_na &lt;- df %&gt;% filter(!is.na(int_acc)) svy_df &lt;- svydesign(ids = ~ 1, weights = ~PERWT, data = df_na) int_tbl &lt;- svyby(~int_acc, ~YEAR+city, design = svy_df, svymean) #Even accounting for not asking people without internet if they had hi speed internet df_na &lt;- df %&gt;% filter(!is.na(hspd_int)) svy_df &lt;- svydesign(ids = ~ 1, weights = ~PERWT, data = df_na) hspd_tbl &lt;- svyby(~hspd_int, ~YEAR+city, design = svy_df, svymean) df_na &lt;- df %&gt;% filter(!is.na(comp_tab) &amp; !is.na(hspd_dev)) svy_df &lt;- svydesign(ids = ~ 1, weights = ~PERWT, data = df_na) hspd_dev_tbl &lt;- svyby(~hspd_dev, ~YEAR+city, design = svy_df, svymean) comp_tab_tbl &lt;- svyby(~comp_tab, ~YEAR+city, design = svy_df, svymean) ranking &lt;- function(df, var, plot_title = &quot;&quot;, year = NULL, sex = &quot;total&quot;, race = &quot;total&quot;, peers = &quot;Current&quot;, order = &quot;Descending&quot;, y_title = &quot;Percent&quot;, caption_text = &quot;&quot;, subtitle_text = &quot;&quot;, bar_label = TRUE, sigfig = 3, accuracy = 0.1, label_function, alternate_text = NULL, ranking_colors = TRUE, text_size){ # Copy variable var to a new column for use with the &#39;$&#39; operator var &lt;- dplyr:::tbl_at_vars(df, vars(!!enquo(var))) df$var &lt;- df[[var]] # Filter to sex, race, and year if (&quot;sex&quot; %in% names(df)) df &lt;- df[df$sex == sex,] if (&quot;race&quot; %in% names(df)) df &lt;- df[df$race == race,] if(&quot;year&quot; %in% names(df)) { if (is.null(year)) year &lt;- max(years_in_df(df, var)) df &lt;- df[df$year %in% year,] if (length(year) &gt; 1) { df %&lt;&gt;% group_by_at(df %cols_in% c(&quot;MSA&quot;, &quot;FIPS&quot;)) %&gt;% summarise(var = mean(var, na.rm = TRUE)) %&gt;% ungroup() } } # Add peer data if not already present if (&quot;current&quot; %not_in% names(df)) df %&lt;&gt;% pull_peers(add_info = T) # Filter to peer parameter if (peers %in% c(&quot;current&quot;, &quot;Current&quot;)) df %&lt;&gt;% filter(current == 1) if (peers %in% c(&quot;baseline&quot;, &quot;Baseline&quot;)) df %&lt;&gt;% filter(baseline == 1) # Sort according to order parameter if (order %in% c(&quot;descending&quot;, &quot;Descending&quot;)) df %&lt;&gt;% arrange(desc(var)) if (order %in% c(&quot;ascending&quot;, &quot;Ascending&quot;)) df %&lt;&gt;% arrange(var) df %&lt;&gt;% filter(!is.na(var)) # Create numbered city labels for left side of graph df %&lt;&gt;% mutate( rank = row_number(), names = paste0(rank, &quot;. &quot;, city)) # Set bar colors if (ranking_colors) { # color_values &lt;- c(&quot;#96ca4f&quot;, &quot;#ffd600&quot;, &quot;#db2834&quot;) # color_names &lt;- c(&quot;green&quot;, &quot;yellow&quot;, &quot;red&quot;) # if (order %in% c(&quot;descending&quot;, &quot;Descending&quot;)) {color_names = rev(color_names)} # # breaks &lt;- classInt::classIntervals(na.omit(df$var), 3, style = &quot;jenks&quot;) # df$color &lt;- NA # df$color[df$var &lt;= breaks$brks[2]] &lt;- color_names[1] # df$color[df$var &gt; breaks$brks[2] &amp; df$var &lt;= breaks$brks[3]] &lt;- color_names[2] # df$color[df$var &gt; breaks$brks[3]] &lt;- color_names[3] color_values &lt;- c(&quot;#d63631&quot;, &quot;#323844&quot;) color_names &lt;- c(&quot;gray&quot;, &quot;red&quot;) df$color &lt;- &quot;gray&quot; df$color[df$city == &quot;Louisville&quot;] &lt;- &quot;red&quot; } else { df$color &lt;- &quot;blue&quot; color_values &lt;- &quot;#f58021&quot; color_names &lt;- &quot;blue&quot; } if (order %in% c(&quot;descending&quot;, &quot;Descending&quot;)) color_values = rev(color_values) # Create numeric labels if (!missing(label_function)) { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% label_function() } else if (y_title == &quot;Dollars&quot;) { if (mean(df$var, na.rm = TRUE) &gt; 10000) { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::dollar(accuracy = accuracy, scale = .001, suffix = &quot;k&quot;) } else if (mean(df$var, na.rm = TRUE) &gt; 100){ label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::dollar(accuracy = 1) } else { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::dollar(accuracy = .01) } } else if (stringr::str_detect(y_title, &quot;Percent&quot;)) { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::percent(accuracy = accuracy, scale = 1, suffix = &quot;%&quot;) } else { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::comma(accuracy = accuracy) } # Set text format, highlight and italicise Louisville text, highlight Louisville bar df$textcolor &lt;- &quot;#000000&quot; df$textcolor[df$city == &quot;Louisville&quot;] &lt;- &quot;#000000&quot; df$textfont &lt;- &quot;Montserrat&quot; df$textfont[df$city == &quot;Louisville&quot;] &lt;- &quot;Montserrat Bold&quot; label_color_names &lt;- c(&quot;white&quot;, &quot;black&quot;) label_color_values &lt;- c(&quot;#000000&quot;, &quot;#ffffff&quot;) df$label_color &lt;- &quot;white&quot; df$label_color[df$city == &quot;Louisville&quot;] &lt;- &quot;black&quot; #df$linecolor &lt;- &quot;#ffffff&quot; #df$linecolor[df$city == &quot;Louisville&quot;] &lt;- &quot;#00a9b7&quot; df$lou &lt;- if_else(df$city == &quot;Louisville&quot;, 1, 0) df$text_alignment &lt;- 1.1 if (!is.null(alternate_text)) df$text_alignment[df$rank %in% alternate_text] &lt;- -0.1 ### PLOT GRAPH # Initial plot p &lt;- ggplot(data = df, aes(x = factor(names, levels = rev(names)), y = var, fill = factor(color, levels = color_names, ordered = TRUE))) p &lt;- p + guides(fill = FALSE, color = FALSE) # Add bars p &lt;- p + geom_bar(stat = &quot;identity&quot;, size = text_size) + coord_flip() + ggthemes::theme_tufte() p &lt;- p + scale_fill_manual(values = color_values) #p &lt;- p + scale_color_manual(values = c(&quot;#ffffff&quot;, &quot;#00a9b7&quot;)) # Add features title_scale &lt;- min(1, 48 / nchar(plot_title)) p &lt;- p + theme(text = element_text(family = &quot;Montserrat&quot;), plot.title = element_text(size = 74 * title_scale * text_size, hjust = 0.5, margin = margin(b = 10, unit = &quot;pt&quot;)), axis.text.y = element_text(hjust = 0, size = 40 * text_size, color = rev(df$textcolor), family = rev(df$textfont)), axis.title.x = element_text(size = 60 * text_size), axis.ticks = element_blank(), axis.text.x = element_blank(), plot.caption = element_text(size = 36 * text_size, lineheight = 0.5)) if(subtitle_text != &quot;&quot;){ p &lt;- p + theme(plot.subtitle = element_text(hjust = 0.5, size = 60 * text_size)) + labs(subtitle = subtitle_text) } # Add numeric labels to bars based on bar_label parameter if (y_title != &quot;&quot; &amp; bar_label) { p &lt;- p + geom_text(aes(label = label_text, hjust = text_alignment, color = factor(label_color), family = textfont), size = 14 * text_size) + scale_colour_manual(values=c(&quot;#000000&quot;, &quot;#ffffff&quot;)) } # Add vertical line to the left side of the bars based on the h_line parameter if (min(df$var, na.rm = TRUE) &lt; 0) p &lt;- p + geom_hline(yintercept = 0, linetype = &quot;longdash&quot;, size = 2) # Add remaining text p &lt;- p + labs(title = plot_title, y = y_title, x = &quot;&quot;, caption = caption_text) p } int_2018 &lt;- int_tbl %&gt;% filter(YEAR == 2018) %&gt;% mutate(current = 1, int_acc = int_acc * 100) hspd_2018 &lt;- hspd_tbl %&gt;% filter(YEAR == 2018) %&gt;% mutate(current = 1, hspd_int = hspd_int * 100) comp_tab_2018 &lt;- comp_tab_tbl %&gt;% filter(YEAR == 2018) %&gt;% mutate(current = 1, comp_tab = comp_tab * 100) hspd_dev_2018 &lt;- hspd_dev_tbl %&gt;% filter(YEAR == 2018) %&gt;% mutate(current = 1, hspd_dev = hspd_dev * 100) plt1 &lt;- ranking(int_2018, int_acc, plot_title = &quot;Internet Access&quot;, subtitle_text = &quot;2018&quot;, text_size = .60) plt2 &lt;- ranking(hspd_2018, hspd_int, plot_title = &quot;High Speed Internet Access&quot;, subtitle_text = &quot;2018&quot;, text_size = .60) plt3 &lt;- ranking(comp_tab_2018, comp_tab, plot_title = &quot;Computer or Tablet in Household&quot;, subtitle_text = &quot;2018&quot;, text_size = .60) plt4 &lt;- ranking(hspd_dev_2018, hspd_dev, plot_title = &quot;High Speed Internet and Device&quot;, subtitle_text = &quot;2018&quot;, text_size = .60) 2.1.1 High Speed Internet Our focus on internet access is a focus on high speed access. While internet access over a smartphone or other non high speed source can be useful for staying connected, in the COVID era of working and learning from home high speed internet is a necessary utility that over a quarter of our households do not have. While 91% of houses have some form of internet access, only 73% have high speed internet access. plt2 2.1.2 Digital Devices A full 15% of our households do not have either a computer or tablet at home, and this understates the extent of the internet device shortage, as a single device is insufficient for a household with multiple people working and learning. plt3 2.1.3 Internet and Devices Finally, we can also look at the overlap of having both high speed internet and a device to work on. At 71% this is fairly similar to the numbers with high speed internet, suggesting that most people with high speed internet do have at least one device capable of accessing it. plt4 2.2 Across Louisville We can also take a deeper look into internet access within Louisville. Well focus on high speed internet. While devices are also important, the data doesnt let us know how many devices are in each household, so its guidance on the magnitude of the device shortage is quite limited. 2.2.1 Internet Speed While our focus is on high speed access, we do show the history of both all internet access and high speed access in the graph below. Although overall internet access has increased a little since 2013, high speed internet access remains flat or possibly slightly below 2013 levels. In 2016, the Census Bureau began asking about smart phones for the first time. Although the internet access question was not changed, the addition of the question about smartphones may still explain the jump in consumers reporting that they had internet acess at home. There is no similar uptick in high speed access. #Cut the data down to just Jefferson County # df_msa &lt;- df %&gt;% # filter(MET2013 == 31140) # # df_jeff &lt;- df_msa %&gt;% # filter(PUMA %in% c(&quot;1701&quot;, &quot;1702&quot;, &quot;1703&quot;, &quot;1704&quot;, &quot;1705&quot;, &quot;1706&quot;)) %&gt;% # write_csv(&quot;jeff_co_int.csv&quot;) df &lt;- read_csv(&quot;ipums_internet_access/jeff_co_int.csv&quot;) # See if there&#39;s data on high speed internet access at the tract level df &lt;- df %&gt;% mutate(poverty = if_else(POVERTY &lt; 100 &amp; POVERTY != 000, 1, 0), under65 = if_else(AGE &lt; 65, 1, 0)) df_na &lt;- df %&gt;% filter(!is.na(hspd_int)) svy_df &lt;- svydesign(ids = ~ 1, weights = ~PERWT, data = df_na) hint_tbl &lt;- svyby(~hspd_int, ~YEAR, design = svy_df, svymean) hint_tbl_count &lt;- svyby(~hspd_int, ~YEAR, design = svy_df, svytotal) int_tbl &lt;- svyby(~int_acc, ~YEAR, design = svy_df, svymean) int_pov_tbl &lt;- svyby(~hspd_int, ~YEAR+poverty, design = svy_df, svymean) int_age_tbl &lt;-svyby(~hspd_int, ~YEAR+under65, design = svy_df, svymean) int_race_tbl &lt;- svyby(~hspd_int, ~YEAR+RACE, design = svy_df, svymean) hint_tbl &lt;- hint_tbl %&gt;% mutate(int = hspd_int * 100, se100 = se * 100, `High Speed` = &quot;High Speed&quot;) int_tbl &lt;- int_tbl %&gt;% mutate(int = int_acc * 100, se100 = se * 100, `High Speed` = &quot;All Internet&quot;) %&gt;% bind_rows(hint_tbl) plt_by &lt;- function(df, group_var, title_text = &quot;Internet Access&quot;) { group_var &lt;- enquo(group_var) text_scale &lt;- 1 plt &lt;- ggplot(data = df, aes(x = YEAR, y = int, group = !!group_var, colour = !!group_var)) + geom_errorbar(aes(ymin = int - (1.96 * se100), ymax = int + 1.96 * se100), width = .1) + geom_point(size = 2) + geom_line(size = .65) + theme_bw() + labs(title = title_text, x = &quot;Year&quot;, y = &quot;Percent&quot;) + theme(legend.position = &quot;bottom&quot;) plt &lt;- plt + scale_colour_manual(values = c(&quot;#323844&quot;, &quot;#d63631&quot;)) + theme(text = element_text(family = &quot;Montserrat&quot;), legend.title = element_text(size = 30 * text_scale), legend.text = element_text(size = 24 * text_scale, margin = margin(b = 0.2 * text_scale, t = 0.2 * text_scale, unit = &quot;cm&quot;)), axis.text = element_text(size = 24 * text_scale), axis.title = element_text(size = 30 * text_scale), axis.title.x = element_text(margin = margin(t = 0.3 * text_scale, unit = &quot;cm&quot;)), axis.title.y = element_text(margin = margin(r = 0.3 * text_scale, unit = &quot;cm&quot;)), plot.title = element_text(size = 42 * text_scale, hjust = .5, margin = margin(b = 0.4 * text_scale, unit = &quot;cm&quot;))) plt &lt;- plt + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA) ) plt } plt_int &lt;- plt_by(int_tbl, `High Speed`) plt_int # plt_int &lt;- ggplot(int_tbl, aes(x = YEAR, y = int)) + # geom_errorbar(aes(ymin = int - (1.96 * se100), ymax = int + 1.96 * se100), width = .1) + # geom_line() + # geom_point() + # theme_bw() + # labs(title = &quot;Household Internet Access&quot;, x = &quot;Year&quot;, y = &quot;Percent&quot;) + # theme(legend.position = &quot;bottom&quot;) # # plt_int 2.2.2 Poverty HIgh speed internet access for households in poverty has been decreasing since 2013. int_pov_tbl &lt;- int_pov_tbl %&gt;% mutate(Poverty = if_else(poverty == 0, &quot;Above Poverty Line&quot;, &quot;Below Poverty Line&quot;), int = hspd_int * 100, se100 = se * 100) plt_pov &lt;- plt_by(int_pov_tbl, Poverty) plt_pov 2.2.3 Race High speed internet access has either remained steady or slightly declined for Black households in Louisville. int_race_tbl &lt;- int_race_tbl %&gt;% filter(RACE &lt; 3) %&gt;% #Louisville&#39;s racial groups other than White and Black have small populations leading to low sample sizes mutate(Race = if_else(RACE == 1, &quot;White&quot;, &quot;Black&quot;), int = hspd_int * 100, se100 = se * 100) plt_race &lt;- plt_by(int_race_tbl, Race, title_text = &quot;High Speed Internet Access&quot;) plt_race 2.2.4 Age Households with adults age 65 and older is one of the only household groupings where high speed internet access has actually increased over time int_age_tbl &lt;- int_age_tbl %&gt;% mutate(int = hspd_int * 100, se100 = se * 100, Age = if_else(under65 == 1, &quot;Under 65&quot;, &quot;65 and Older&quot;)) plt_age &lt;- plt_by(int_age_tbl, Age, title_text = &quot;High Speed Internet Access&quot;) plt_age 2.3 Child Internet Access 2.3.1 School Age Children In this section, we limit the scope of our analysis to look at children ages 5-18. Nontraditional instruction (NTI) functions much better with access to high speed internet. About 25,600 school age children in Jefferson County do not have access to high speed internet. The map below is broken into 6 areas based on public use microdata geographies. Unfortunately, this is the lowest geographic level of detail we can get with Census microdata for school-age childen. ##Section on Children #Recode values so that 1 indicates not having interent access #This makes it easier to get a raw count on number of kids without high speed access df_ch &lt;- df_na %&gt;% filter(AGE &gt; 4 &amp; AGE &lt; 19 &amp; YEAR == 2018) %&gt;% mutate(hint = case_when( hspd_int == 1 ~ 0, hspd_int == 0 ~ 1, TRUE ~ NA_real_ )) svy_df &lt;- svydesign(ids = ~ 1, weights = ~PERWT, data = df_ch) ##Making a map int_tbl &lt;- svyby(~hint, ~YEAR + PUMA, design = svy_df, svymean) int_tbl_count &lt;- svyby(~hint, ~YEAR + PUMA, design = svy_df, svytotal) ky_shp &lt;- readOGR(&quot;ipums_internet_access/cb_2016_21_puma10_500k&quot;, layer = &quot;cb_2016_21_puma10_500k&quot;, GDAL1_integer64_policy = TRUE, verbose = FALSE) ky_shp@data$PUMA &lt;- as.numeric(as.character(ky_shp@data$PUMACE10)) ky_sf &lt;- st_as_sf(ky_shp) jeff_co_sf &lt;- ky_sf %&gt;% filter(ky_sf$PUMA %in% c(&quot;1701&quot;, &quot;1702&quot;, &quot;1703&quot;, &quot;1704&quot;, &quot;1705&quot;, &quot;1706&quot;)) int_puma &lt;- tibble( PUMA = int_tbl$PUMA, int_per = int_tbl$hint * 100, int_num = formattable::comma(round(int_tbl_count$hint, -2), digits = 0) ) jeff_co_sf &lt;- full_join(jeff_co_sf, int_puma, by = &quot;PUMA&quot;) text_scale &lt;- 1 ggplot(jeff_co_sf) + geom_sf(aes(fill=int_per), color = &quot;#ffffff&quot;) + geom_sf_label(aes(label = int_num), family = &quot;Montserrat&quot;, fontface = &quot;bold&quot;, size = 8) + #scale_fill_gradient(low = &quot;#0e4a99&quot;, high = &quot;#f58021&quot;, name = &quot;Percent&quot;) + scale_fill_gradient(low = &quot;#323844&quot;, high = &quot;#d63631&quot;, name = &quot;Percent&quot;) + theme_bw() + theme(text = element_text(family = &quot;Montserrat&quot;), panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), plot.caption = element_text(size = 18 * text_scale, lineheight = .5), legend.title = element_text(size = 24 * text_scale), legend.text = element_text(size = 20 * text_scale, margin = margin(b = 0.2 * text_scale, t = 0.2 * text_scale, unit = &quot;cm&quot;)), plot.title = element_text(size = 32 * text_scale, lineheight = .5, margin = margin(b = 0.4 * text_scale, unit = &quot;cm&quot;))) + labs(title = &quot;Children ages 5-18 in households without High Speed Internet Access&quot;, caption = &quot;Map is shaded by the percent of children without access in each Public Use Microdata Area. The number of children without access is given by the label rounded to the nearest 100. \\n Greater Louisville Project Analysis of Census Microdata from IPUMs&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;,colour = NA), plot.background = element_rect(fill = &quot;transparent&quot;,colour = NA), legend.background = element_rect(fill = &quot;transparent&quot;,colour = NA), legend.box.background = element_rect(fill = &quot;transparent&quot;,colour = NA), legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 2.3.2 Metro Council Districts If we expand our focus to all children ages 0-17, we can get data at finer levels of geography. The map below shows the percent of children ages 0-17 who lack either high-speed internet or a computer at home. Most of these children are school age, though the data also includes some infants and toddlers who are not in school. No District labels map_district &lt;- st_read(&quot;ipums_internet_access/Council_Districts&quot;, quiet =T) child_internet &lt;- read_csv(&quot;ipums_internet_access/child_internet.csv&quot;, col_types = &quot;nnnn&quot;) load(&quot;ipums_internet_access/district_label_points.RData&quot;) map_district %&lt;&gt;% select(district = coundist) %&gt;% left_join(child_internet, by = &quot;district&quot;) %&gt;% mutate(no_int = 100 - percent_internet) # Replicate binary decision tree to determine most-interior point of polygons # buffers &lt;- c() # # for(d in 1:26) { # buff_max = -0.06 # buff_min = 0 # this_buffer = buff_min # this_step = buff_max # current_resolution = 11 # # while(current_resolution &gt; 10){ # # #browser() # # Buffer inside the polygon using this_buffer # temp_sf &lt;- st_buffer(map_district[d,], dist = this_buffer, singleSide = T) # # # Calculate area of polygon # temp_area = st_area(temp_sf) %&gt;% as.numeric() # # # If remaining area &gt; 0, enlarge buffer by going away from 0. # # Also record most recent correct buffer and area produced by buffer. # # If remaining area is 0, reduce buffer by going toward 0. # if (temp_area &gt; 0) { # current_result = this_buffer # current_resolution = temp_area # # this_buffer = this_buffer + this_step # } else { # this_buffer = this_buffer - this_step # } # # # Cut search step in half # this_step = this_step / 2 # } # # buffers &lt;- c(buffers, current_result) # # } text_scale &lt;- 1 ggplot(map_district) + geom_sf(aes(fill=no_int), color = &quot;#ffffff&quot;) + #geom_sf_text(aes(label = district), family = &quot;Montserrat Bold&quot;, fontface = &quot;bold&quot;, size = 6, color = &quot;#ffffff&quot;, #fun.geometry = function(x) st_buffer(x, dist = buffers, singleSide = T) %&gt;% st_point_on_surface()) + #scale_fill_gradient(low = &quot;#0e4a99&quot;, high = &quot;#f58021&quot;, name = &quot;Percent&quot;) + scale_fill_gradient(low = &quot;#323844&quot;, high = &quot;#d63631&quot;, name = &quot;Percent&quot;) + theme_bw() + theme(text = element_text(family = &quot;Montserrat&quot;), panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), plot.caption = element_text(size = 18 * text_scale, lineheight = .5), legend.title = element_text(size = 24 * text_scale), legend.text = element_text(size = 20 * text_scale, margin = margin(b = 0.2 * text_scale, t = 0.2 * text_scale, unit = &quot;cm&quot;)), plot.title = element_text(size = 32 * text_scale, lineheight = .5, hjust = 0.5, margin = margin(b = 0.4 * text_scale, unit = &quot;cm&quot;))) + labs(title = &quot;Children ages 0-17 in households without High Speed Internet Access and a computer&quot;, caption = &quot;Map is shaded by the percent of children without access in each Metro Council District. The number of children without internet or without a computer is given by the label rounded to the nearest 100. \\n Greater Louisville Project Analysis of Census ACS data.&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;,colour = NA), plot.background = element_rect(fill = &quot;transparent&quot;,colour = NA), legend.background = element_rect(fill = &quot;transparent&quot;,colour = NA), legend.box.background = element_rect(fill = &quot;transparent&quot;,colour = NA), legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) output_table &lt;- map_district %&gt;% transmute( District = district, &quot;Percent without access&quot; = scales::percent(100 - percent_internet, scale = 1, accuracy = 0.1), &quot;Children with access&quot; = scales::comma(child_internet, accuracy = 1), &quot;Children without access&quot; = scales::comma(total_child - child_internet, accuracy = 1)) %&gt;% sf::st_drop_geometry() kbl(output_table, align = &quot;c&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;)) %&gt;% scroll_box(height = &quot;300px&quot;) District Percent without access Children with access Children without access 1 18.2% 5,423 1,205 2 11.8% 6,438 865 3 22.4% 4,669 1,351 4 32.5% 3,755 1,805 5 33.6% 5,036 2,554 6 33.2% 4,259 2,111 7 3.3% 5,608 187 8 1.9% 5,067 100 9 4.0% 4,867 205 10 7.6% 5,114 421 11 5.6% 5,819 342 12 7.8% 6,200 523 13 12.0% 6,399 874 14 9.0% 6,229 618 15 27.1% 4,620 1,714 16 2.3% 7,218 171 17 3.2% 7,401 247 18 2.7% 5,804 164 19 2.5% 7,788 199 20 4.2% 8,095 353 21 19.9% 4,681 1,161 22 4.1% 7,379 315 23 9.9% 5,911 650 24 8.4% 6,850 632 25 3.8% 6,040 241 26 10.3% 5,291 590 District Labels ggplot(map_district) + geom_sf(aes(fill=no_int), color = &quot;#ffffff&quot;) + geom_sf_text(data = district_label_points, aes(label = district), family = &quot;Montserrat Bold&quot;, fontface = &quot;bold&quot;, size = 6, color = &quot;#ffffff&quot;) + #scale_fill_gradient(low = &quot;#0e4a99&quot;, high = &quot;#f58021&quot;, name = &quot;Percent&quot;) + scale_fill_gradient(low = &quot;#323844&quot;, high = &quot;#d63631&quot;, name = &quot;Percent&quot;) + theme_bw() + theme(text = element_text(family = &quot;Montserrat&quot;), panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), plot.caption = element_text(size = 18 * text_scale, lineheight = .5), legend.title = element_text(size = 24 * text_scale), legend.text = element_text(size = 20 * text_scale, margin = margin(b = 0.2 * text_scale, t = 0.2 * text_scale, unit = &quot;cm&quot;)), plot.title = element_text(size = 32 * text_scale, lineheight = .5, hjust = 0.5, margin = margin(b = 0.4 * text_scale, unit = &quot;cm&quot;))) + labs(title = &quot;Children ages 0-17 in households without High Speed Internet Access and a computer&quot;, caption = &quot;Map is shaded by the percent of children without access in each Metro Council District. The number of children without internet or without a computer is given by the label rounded to the nearest 100. \\n Greater Louisville Project Analysis of Census ACS data.&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;,colour = NA), plot.background = element_rect(fill = &quot;transparent&quot;,colour = NA), legend.background = element_rect(fill = &quot;transparent&quot;,colour = NA), legend.box.background = element_rect(fill = &quot;transparent&quot;,colour = NA), legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) kbl(output_table, align = &quot;c&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;)) %&gt;% scroll_box(height = &quot;300px&quot;) District Percent without access Children with access Children without access 1 18.2% 5,423 1,205 2 11.8% 6,438 865 3 22.4% 4,669 1,351 4 32.5% 3,755 1,805 5 33.6% 5,036 2,554 6 33.2% 4,259 2,111 7 3.3% 5,608 187 8 1.9% 5,067 100 9 4.0% 4,867 205 10 7.6% 5,114 421 11 5.6% 5,819 342 12 7.8% 6,200 523 13 12.0% 6,399 874 14 9.0% 6,229 618 15 27.1% 4,620 1,714 16 2.3% 7,218 171 17 3.2% 7,401 247 18 2.7% 5,804 164 19 2.5% 7,788 199 20 4.2% 8,095 353 21 19.9% 4,681 1,161 22 4.1% 7,379 315 23 9.9% 5,911 650 24 8.4% 6,850 632 25 3.8% 6,040 241 26 10.3% 5,291 590 # map_district %&lt;&gt;% # mutate(hover = paste(&quot;District&quot;, district)) # library(plotly) # # plotly::plot_ly(stroke = I(&quot;white&quot;)) %&gt;% # add_sf(data = map_district, # color = ~percent_internet, # split = ~district, # colors = c(&quot;#d63631&quot;, &quot;#323844&quot;), # alpha = 1) 2.4 Internet as a Public Utility The lack of high speed internet access in Louisville is part of a broader trend across the United States of continuing to treat home internet as something that is nice to have instead of something that is necessary to fully take part in modern society. In general, the U.S. leaves broadband infrastructure to private companies who will not build out infrastructure to areas that arent profitable. An exception to this trend in Chatanooga, TN, where the electric utility is also an Internet Service Provider. The lack of internet acess in Louisville (and throughout the U.S) has severe consequences including exacerbating inequality (both racial and economic) and slower overall economic growth. 2.4.1 Local Efforts Jefferson County Public Schools have distributed hotspots and chromebooks to try to complete NTI. Kentucky is investing $8 million to subsidize internet access for low-income students # png(&quot;rankings_graph.png&quot;, 1500, 1200, res = 200) # plt1 # dev.off # # png(&quot;int_access_graph.png&quot;, 1600, 1200, res = 200) # plt_int # dev.off # # png(&quot;int_poverty.png&quot;, 1600, 1200, res = 200) # plt_pov # dev.off # # png(&quot;int_race.png&quot;, 1600, 1200, res = 200) # plt_race # dev.off # # png(&quot;int_age.png&quot;, 1600, 1200, res = 200) # plt_age # dev.off For more local data and analysis please visit the Greater Louisville Project "],["housing-instability.html", "Chapter 3 Housing Instability 3.1 Methods and Definitions 3.2 Rental Insecurity Index 3.3 Housing Instability Indicators 3.4 Covid Indicators 3.5 Equity Index 3.6 Peer City Data 3.7 Metro Council District Maps 3.8 Metro Council Tables 3.9 Home Mortgages 3.10 Housing Price Changes 3.11 Housing Availability", " Chapter 3 Housing Instability library(tidyverse) library(rgdal) library(sf) library(viridis) library(magrittr) load(&quot;housing_data/glptools_exports.RData&quot;) df &lt;- read_csv(&quot;housing_data/housing_index_raw.csv&quot;) # Filter to just peers df_peer &lt;- df %&gt;% filter(county_fips %in% c(&quot;1073&quot;, &quot;18097&quot;, &quot;21111&quot;, &quot;26081&quot;, &quot;29095&quot;, &quot;29189&quot;, &quot;29510&quot;, &quot;31055&quot;, &quot;37081&quot;, &quot;37119&quot;, &quot;39049&quot;, &quot;39061&quot;, &quot;40109&quot;, &quot;40143&quot;, &quot;45045&quot;, &quot;47037&quot;, &quot;47093&quot;, &quot;47157&quot;)) %&gt;% select(-contains(&quot;z_score&quot;), -contains(&quot;index&quot;)) #drop index and z_score terms so we can recreate them # Make z scores make_z &lt;- function(x){ x &lt;- (x - mean(x)) / sd(x) } df_z &lt;- df_peer %&gt;% mutate(across(where(is.numeric), make_z, .names = &quot;z_{.col}&quot;)) df_index &lt;- df_z %&gt;% mutate( housing_instability_index = z_perc_poverty_12mnth * .2 + z_perc_renters * .2 + z_perc_cost_burdened_under_35k * .2 + z_perc_overcrowding_renter_1.50_or_more * .2 + z_perc_unemployed_laborforce * .2, covid_index = z_perc_no_hinsure * .5 + z_perc_low_income_jobs_lost * .5, equity_index = z_perc_person_of_color * .5 + z_perc_30hamfi * .167 + z_perc_public_assistance * .167 + z_perc_foreign_born * .167, overall_index = housing_instability_index * .5 + covid_index * .1 + equity_index * .4 ) This recreates the Urban Institutes Emergency Rental Assistance Priority Index for Louisville. The original index compares Louisville to the rest of Kentucky. At Greater Louisville Project, we think the more appropriate comparison is to our other peer cities. While the maps below show Louisville, the index values are based on a comparison to all census tracts in the core counties of our peer cities. Greater Louisville Project has also aggregated the data up to the metro council district level. That data is available in both maps and tables. In addition to the indexes, the indicators that make up the indexes are also mapped below. Navigation is based on tabs, so clicking on the small blue titles brings up the map related to each title. 3.1 Methods and Definitions To produce an index with multiple indicators on different scales we used z-scores, which are a measure of how far away from average an observation is. For example, if looking at unemployment, we start with the unemployment rate in all tracts and the score for an individual tract is the number of standard deviations it is away from the average tract. Data is from the Urban Institutes Emergency Rental Assistance Priority Index and in most cases is tract level census data from 2018. The low income jobs lost to Covid is an Urban Institute constructed indicator. Complete details on the indicators can be found in the technical appendix, but they are summarized here for convenience. 3.1.1 Housing Instability Index Poverty: Under the poverty line in the last 12 months Percent Renting: The percent of households in the area who rent Cost Burdened: Households making less than 35,000 and paying more than 50% of their income in rent Overcrowding: Households renting and with more than 1.5 people per room. Unemployed: In the labor force but not currently employed. 3.1.2 Covid Index Health Insurance: Based on the noninstitutionalized population ages 19-64. Low Income Job Loss from Covid: Estimated jobs lost to Covid based on previous Urban Institute Study 3.1.3 Equity Index Percent Persons of Color: Percent of people in the area who identify as persons of color Extremely Low Income: Renter occupied household making less than 30 percent of area median income Public Assistance: Percent receiving some form of public assistance like SNAP or TANF Foreign Born: Percent born outside the U.S. 3.2 Rental Insecurity Index jfco_shp &lt;- readOGR(&quot;housing_data/JC Tracts&quot;, layer = &quot;JC Tracts&quot;, GDAL1_integer64_policy = TRUE, verbose = FALSE) jfco_sf &lt;- st_as_sf(jfco_shp) %&gt;% mutate(GEOID = str_sub(GEO_ID, start = -11)) jfco_index &lt;- df_index %&gt;% filter(county_fips == &quot;21111&quot;) # Urban institute includes a greyed out flag for tracts without enough data # It&#39;s easier to set the values to NA because the graphing framework has the ability to easily assign NA a different color jfco_index &lt;- jfco_index %&gt;% mutate(across(where(is.numeric), ~if_else(jfco_index$grayed_out == 1, NA_real_, .))) jfco_sf &lt;- full_join(jfco_sf, jfco_index, by = &quot;GEOID&quot;) # Transform the percents mult100 &lt;- function(x){ x &lt;- x * 100 } jfco_sf &lt;- jfco_sf %&gt;% mutate(across(starts_with(&quot;perc_&quot;), mult100)) make_map &lt;- function(indicator, title = &quot;&quot;, legend = &quot;&quot;, caption = &quot;&quot;, no_legend = FALSE, vir_dir = 1){ plt &lt;- ggplot(jfco_sf) + geom_sf(aes(fill={{ indicator }} )) + # scale_fill_gradient(low = &quot;#323844&quot;, high = &quot;#d63631&quot;, name = &quot;Percent&quot;) + scale_fill_viridis(na.value = &quot;grey&quot;, name = legend, direction = vir_dir) + theme_bw(base_size = 22) + theme(plot.caption = element_text(lineheight = .5)) + theme(text = element_text(family = &quot;Montserrat&quot;), panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank()) + labs(title = title, caption = caption) if (no_legend == TRUE){ plt &lt;- plt + theme(legend.position = &quot;none&quot;) } plt &lt;- plt + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) return(plt) } make_map(overall_index, title = &quot;Rental Insecurity Index&quot;, legend = &quot;Compared to \\n other tracts&quot;, caption = &quot;Lighter shades indicate higher rental insecurity. \\n This is the Urban Institute&#39;s Emergency Rental Assistance Priority Index modified \\nto compare Louisville to its peer cities (instead of to other areas in Kentucky). \\n Greyed out areas had insufficient data for the index&quot;, no_legend = TRUE) You can flip through the tabs below to see each of the three subindexes that make up the overall rental index. Housing Instability Subindex Share of people living in poverty Share of renter-occupied housing units Share of severely cost-burdened low-income renters Share of severely overcrowded households Share of unemployed people make_map(housing_instability_index, title = &quot;Housing Instability Subindex&quot;, legend = &quot;Compared to \\n other tracts&quot;, caption = &quot;Lighter shades indicate higher housing instability. \\n This is the Urban Institute&#39;s Housing Instability subindex modified \\nto compare Louisville to its peer cities (instead of to other areas in Kentucky). \\n Greyed out areas had insufficient data for the index&quot;, no_legend = TRUE) Covid 19 Impact Subindex Share of adults without health insurance Share of low-income jobs lost to Covid-19 make_map(covid_index, title = &quot;Covid Instability Subindex&quot;, legend = &quot;Compared to \\n other tracts&quot;, caption = &quot;Lighter shades indicate higher covid instability. \\n This is the Urban Institute&#39;s Covid Instability subindex modified \\nto compare Louisville to its peer cities (instead of to other areas in Kentucky). \\n Greyed out areas had insufficient data for the index&quot;, no_legend = TRUE) Equity Subindex Share of people of color Share of extremely low-income renter households Share of households receiving public assistance Share of people born outside the United States make_map(equity_index, title = &quot;Equity Subindex&quot;, legend = &quot;Compared to \\n other tracts&quot;, caption = &quot;Lighter shades indicate higher prioritization based on equity. \\n This is the Urban Institute&#39;s Equity subindex modified \\nto compare Louisville to its peer cities (instead of to other areas in Kentucky). \\n Greyed out areas had insufficient data for the index&quot;, no_legend = TRUE) 3.3 Housing Instability Indicators Poverty make_map(perc_poverty_12mnth, title = &quot;Poverty&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of each census tract that is in poverty. \\n Data from Urban Institute.&quot;) Percent Renting make_map(perc_renters, title = &quot;Percent of Renter Occupied Housing Units&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of each tract that rents. \\n Data from Urban Institute&quot;) Cost-burdened housholds make_map(perc_cost_burdened_under_35k, title = &quot;Costburdened Households making under 35k&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of households making less than 35,000 and paying more than 50% of their income in rent. \\n Data from Urban Institute&quot;) Overcrowding make_map(perc_overcrowding_renter_1.50_or_more, title = &quot;Overcrowding in Rental Housing&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of households renting and with more than 1.5 people per room. \\n Data from Urban Institute&quot;) Unemployed make_map(perc_unemployed_laborforce, title = &quot;Unemployment&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of people unemployed but still in the labor force (actively seeking work). \\n Data from Urban Institute&quot;) 3.4 Covid Indicators No Health Insurance make_map(perc_no_hinsure, title = &quot;No Health Insurance&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent without health insurance. \\n Data from Urban Institute&quot;) Low Income Jobs Lost to Covid make_map(perc_low_income_jobs_lost, title = &quot;Low Income Jobs Lost to Covid&quot;, legend = &quot;Percent&quot;, caption = &quot;Estimate from the Urban Institute based on job categories in the each tract. \\n Data from Urban Institute&quot;) 3.5 Equity Index Percent PoC make_map(perc_person_of_color, title = &quot;Percent Persons of Color&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of persons in the area who identify as persons of color. \\n Data from Urban Institute&quot;) Extremely Low Income make_map(perc_30hamfi, title = &quot;Extremely Low Income&quot;, legend = &quot;Percent&quot;, caption = &quot;Renter occupied household making less than 30 percent of area median income. \\n Data from Urban Institute&quot;) Public Assistance make_map(perc_public_assistance, title = &quot;Recieving Public Assistance&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent receiving some form of public assistance like SNAP or TANF. \\n Data from Urban Institute&quot;) Foreign Born make_map(perc_foreign_born, title = &quot;Foreign Born&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent born outside the U.S. \\n Data from Urban Institute&quot;) 3.6 Peer City Data Peer city data is available for the housing stability subindex. # Ranking graph function ranking &lt;- function(df, var, plot_title = &quot;&quot;, year = NULL, sex = &quot;total&quot;, race = &quot;total&quot;, order = &quot;Descending&quot;, y_title = &quot;Percent&quot;, caption_text = &quot;&quot;, subtitle_text = &quot;&quot;, bar_label = TRUE, sigfig = 3, accuracy = 0.1, label_function, alternate_text = NULL, ranking_colors = TRUE, text_size){ # Copy variable var to a new column for use with the &#39;$&#39; operator var &lt;- dplyr:::tbl_at_vars(df, vars(!!enquo(var))) df$var &lt;- df[[var]] # Filter to sex, race, and year if (&quot;sex&quot; %in% names(df)) df &lt;- df[df$sex == sex,] if (&quot;race&quot; %in% names(df)) df &lt;- df[df$race == race,] if(&quot;year&quot; %in% names(df)) { if (is.null(year)) year &lt;- max(years_in_df(df, var)) df &lt;- df[df$year %in% year,] if (length(year) &gt; 1) { df %&lt;&gt;% group_by_at(df %cols_in% c(&quot;MSA&quot;, &quot;FIPS&quot;)) %&gt;% summarise(var = mean(var, na.rm = TRUE)) %&gt;% ungroup() } } # Add peer data if not already present # if (df_type(df) %in% c(&quot;FIPS&quot;, &quot;MSA&quot;) &amp; &quot;current&quot; %not_in% names(df)) df %&lt;&gt;% pull_peers(add_info = T) # Sort according to order parameter if (order %in% c(&quot;descending&quot;, &quot;Descending&quot;)) df %&lt;&gt;% arrange(desc(var)) if (order %in% c(&quot;ascending&quot;, &quot;Ascending&quot;)) df %&lt;&gt;% arrange(var) df %&lt;&gt;% filter(!is.na(var)) # Create numbered city labels for left side of graph df %&lt;&gt;% mutate( rank = row_number(), names = paste0(rank, &quot;. &quot;, city)) # Set bar colors if (ranking_colors) { # color_values &lt;- c(&quot;#96ca4f&quot;, &quot;#ffd600&quot;, &quot;#db2834&quot;) # color_names &lt;- c(&quot;green&quot;, &quot;yellow&quot;, &quot;red&quot;) # if (order %in% c(&quot;descending&quot;, &quot;Descending&quot;)) {color_names = rev(color_names)} # # breaks &lt;- classInt::classIntervals(na.omit(df$var), 3, style = &quot;jenks&quot;) # df$color &lt;- NA # df$color[df$var &lt;= breaks$brks[2]] &lt;- color_names[1] # df$color[df$var &gt; breaks$brks[2] &amp; df$var &lt;= breaks$brks[3]] &lt;- color_names[2] # df$color[df$var &gt; breaks$brks[3]] &lt;- color_names[3] color_values &lt;- c(&quot;#d63631&quot;, &quot;#323844&quot;) color_names &lt;- c(&quot;gray&quot;, &quot;red&quot;) df$color &lt;- &quot;red&quot; df$color[df$city == &quot;Louisville&quot;] &lt;- &quot;gray&quot; } else { df$color &lt;- &quot;blue&quot; color_values &lt;- &quot;#f58021&quot; color_names &lt;- &quot;blue&quot; } if (order %in% c(&quot;descending&quot;, &quot;Descending&quot;)) color_values = rev(color_values) # Create numeric labels # Create numeric labels if (!missing(label_function)) { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% label_function() } else if (y_title == &quot;Dollars&quot;) { if(mean(df$var, na.rm = TRUE) &gt; 10000) { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::dollar(accuracy = accuracy, scale = .001, suffix = &quot;k&quot;) } else { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::dollar(accuracy = .01) } } else if (stringr::str_detect(y_title, &quot;Percent&quot;)) { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::percent(accuracy = accuracy, scale = 1, suffix = &quot;%&quot;) } else { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::comma(accuracy = accuracy) } # Set text format, highlight and italicise Louisville text, highlight Louisville bar df$textcolor &lt;- &quot;#000000&quot; df$textcolor[df$city == &quot;Louisville&quot;] &lt;- &quot;#000000&quot; df$textfont &lt;- &quot;Montserrat&quot; df$textfont[df$city == &quot;Louisville&quot;] &lt;- &quot;Montserrat Bold&quot; label_color_names &lt;- c(&quot;white&quot;, &quot;black&quot;) label_color_values &lt;- c(&quot;#000000&quot;, &quot;#ffffff&quot;) df$label_color &lt;- &quot;white&quot; df$label_color[df$city == &quot;Louisville&quot;] &lt;- &quot;black&quot; #df$linecolor &lt;- &quot;#ffffff&quot; #df$linecolor[df$city == &quot;Louisville&quot;] &lt;- &quot;#00a9b7&quot; df$lou &lt;- if_else(df$city == &quot;Louisville&quot;, 1, 0) df$text_alignment &lt;- 1.1 if (!is.null(alternate_text)) df$text_alignment[df$rank %in% alternate_text] &lt;- -0.1 ### PLOT GRAPH # Initial plot p &lt;- ggplot(data = df, aes(x = factor(names, levels = rev(names)), y = var, fill = factor(color, levels = color_names, ordered = TRUE))) p &lt;- p + guides(fill = FALSE, color = FALSE) # Add bars p &lt;- p + geom_bar(stat = &quot;identity&quot;, size = text_size) + coord_flip() + ggthemes::theme_tufte() p &lt;- p + scale_fill_manual(values = color_values) #p &lt;- p + scale_color_manual(values = c(&quot;#ffffff&quot;, &quot;#00a9b7&quot;)) # Add features title_scale &lt;- min(1, 48 / nchar(plot_title)) p &lt;- p + theme(text = element_text(family = &quot;Montserrat&quot;), plot.title = element_text(size = 14 * title_scale * text_size, hjust = 0.5, margin = margin(b = 10, unit = &quot;pt&quot;)), axis.text.y = element_text(hjust = 0, size = 10 * text_size, color = rev(df$textcolor), family = rev(df$textfont)), axis.title.x = element_text(size = 10 * text_size), axis.ticks = element_blank(), axis.text.x = element_blank(), plot.caption = element_text(size = 5 * text_size, lineheight = 0.5)) if(subtitle_text != &quot;&quot;){ p &lt;- p + theme(plot.subtitle = element_text(hjust = 0.5, size = 5 * text_size)) + labs(subtitle = subtitle_text) } # Add numeric labels to bars based on bar_label parameter if (y_title != &quot;&quot; &amp; bar_label) { p &lt;- p + geom_text(aes(label = label_text, hjust = text_alignment, color = factor(label_color), family = textfont), size = 4.5 * text_size) + scale_colour_manual(values=c(&quot;#000000&quot;, &quot;#ffffff&quot;)) } # Add vertical line to the left side of the bars based on the h_line parameter if (min(df$var, na.rm = TRUE) &lt; 0) p &lt;- p + geom_hline(yintercept = 0, linetype = &quot;longdash&quot;, size = 2) # Add remaining text p &lt;- p + labs(title = plot_title, y = y_title, x = &quot;&quot;, caption = caption_text) p &lt;- p + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) p } Cost Burdened Renters #Data was pulled in Python file get_data.py and written to .csv df &lt;- read_csv(&quot;housing_data/low_income_renters.csv&quot;) ## This code is modified from the urban institute: https://github.com/UrbanInstitute/covid-rental-risk-index/blob/master/scripts/01_generate_index_variables.R # Calculate percent of households making under 35k who pay more than 50% of their # income on rent df &lt;- df %&gt;% # select ACS table variables w/ attached GEOID select( NAME, # These are all the peolpe making under 35k (denominator) B25074_002E, B25074_011E, B25074_020E, # These are all the people making under 35k who pay more than 50% of their income on rent (numerator) B25074_009E, B25074_018E, B25074_027E, # These are the people making under 35k for whom this metric wasn&#39;t computed # and they therefore need to be subtracted from the denominator B25074_010E, B25074_019E, B25074_028E ) %&gt;% #rename both county and city to just St. Louis mutate(NAME = if_else(str_detect(NAME, &quot;St. Louis&quot;), &quot;St. Louis&quot;, NAME)) %&gt;% group_by(NAME) %&gt;% #use summarize across instead to save space and make reusable in a function summarize( B25074_002E = sum(B25074_002E), B25074_011E = sum(B25074_011E), B25074_020E = sum(B25074_020E), B25074_009E = sum(B25074_009E), B25074_018E = sum(B25074_018E), B25074_027E = sum(B25074_027E), B25074_010E = sum(B25074_010E), B25074_019E = sum(B25074_019E), B25074_028E = sum(B25074_028E) ) %&gt;% # create cost burden variable w/ calculation mutate( perc_cost_burdened_under_35k = (B25074_009E + B25074_018E + B25074_027E) / ( B25074_002E + B25074_011E + B25074_020E - B25074_010E - B25074_019E - B25074_028E ), #cd add perc_cost_burdened_under_35k = if_else( B25074_002E + B25074_011E + B25074_020E == 0, 0, perc_cost_burdened_under_35k ) ) # Clean up for graph df &lt;- df %&gt;% mutate(city = recode(NAME, `Davidson County, Tennessee` = &quot;Nashville&quot;, `Douglas County, Nebraska` = &quot;Omaha&quot;, `Franklin County, Ohio` = &quot;Columbus&quot;, `Greenville County, South Carolina` = &quot;Greenville&quot;, `Guilford County, North Carolina` = &quot;Greensboro&quot;, `Hamilton County, Ohio` = &quot;Cincinnati&quot;, `Jackson County, Missouri` = &quot;Kansas City&quot;, `Jefferson County, Alabama` = &quot;Birmingham&quot;, `Jefferson County, Kentucky` = &quot;Louisville&quot;, `Kent County, Michigan` = &quot;Grand Rapids&quot;, `Knox County, Tennessee` = &quot;Knoxville&quot;, `Marion County, Indiana` = &quot;Indianapolis&quot;, `Mecklenburg County, North Carolina` = &quot;Charlotte&quot;, `Oklahoma County, Oklahoma` = &quot;Oklahoma City&quot;, `Shelby County, Tennessee` = &quot;Memphis&quot;, `Tulsa County, Oklahoma` = &quot;Tulsa&quot;), perc_cost_burdened_under_35k = 100 * perc_cost_burdened_under_35k) plt_cost_burdened &lt;- ranking(df, &quot;perc_cost_burdened_under_35k&quot;, text_size = 2, order = &quot;ascending&quot;, plot_title = &quot;Cost Burdened Renters in Households Making Under 35k &quot;) plt_cost_burdened Overcrowding #Data was pulled in Python file get_data.py and written to .csv oc_df &lt;- read_csv(&quot;housing_data/overcrowding.csv&quot;) ## This code is modified from the urban institute: https://github.com/UrbanInstitute/covid-rental-risk-index/blob/master/scripts/01_generate_index_variables.R oc_df &lt;- oc_df %&gt;% # select ACS table variables w/ attached GEOID select(NAME, B25014_013E, B25014_012E, B25014_008E) %&gt;% #rename both county and city to just St. Louis mutate(NAME = if_else(str_detect(NAME, &quot;St. Louis&quot;), &quot;St. Louis&quot;, NAME)) %&gt;% group_by(NAME) %&gt;% summarize(across(where(is.numeric), sum)) %&gt;% # create cost burden variable w/ calculation mutate(perc_overcrowding_renter_1.50_or_more = ((B25014_012E + B25014_013E) / B25014_008E), perc_overcrowding_renter_1.50_or_more = if_else(B25014_008E == 0, 0, perc_overcrowding_renter_1.50_or_more)) # Clean up for graph oc_df &lt;- oc_df %&gt;% mutate(city = recode(NAME, `Davidson County, Tennessee` = &quot;Nashville&quot;, `Douglas County, Nebraska` = &quot;Omaha&quot;, `Franklin County, Ohio` = &quot;Columbus&quot;, `Greenville County, South Carolina` = &quot;Greenville&quot;, `Guilford County, North Carolina` = &quot;Greensboro&quot;, `Hamilton County, Ohio` = &quot;Cincinnati&quot;, `Jackson County, Missouri` = &quot;Kansas City&quot;, `Jefferson County, Alabama` = &quot;Birmingham&quot;, `Jefferson County, Kentucky` = &quot;Louisville&quot;, `Kent County, Michigan` = &quot;Grand Rapids&quot;, `Knox County, Tennessee` = &quot;Knoxville&quot;, `Marion County, Indiana` = &quot;Indianapolis&quot;, `Mecklenburg County, North Carolina` = &quot;Charlotte&quot;, `Oklahoma County, Oklahoma` = &quot;Oklahoma City&quot;, `Shelby County, Tennessee` = &quot;Memphis&quot;, `Tulsa County, Oklahoma` = &quot;Tulsa&quot;), perc_overcrowding_renter_1.50_or_more = 100 * perc_overcrowding_renter_1.50_or_more) plt_oc &lt;- ranking(oc_df, &quot;perc_overcrowding_renter_1.50_or_more&quot;, text_size = 2, order = &quot;ascending&quot;, plot_title = &quot;Overcrowding&quot;) plt_oc Unemployment #Data was pulled in Python file get_data.py and written to .csv un_df &lt;- read_csv(&quot;housing_data/unemployed.csv&quot;) ## This code is modified from the urban institute: https://github.com/UrbanInstitute/covid-rental-risk-index/blob/master/scripts/01_generate_index_variables.R un_df &lt;- un_df %&gt;% # select ACS table variables w/ attached GEOID select(B12006_055E, B12006_050E, B12006_011E, B12006_006E, B12006_022E, B12006_017E, B12006_033E, B12006_028E, B12006_044E, B12006_039E, B12006_053E, B12006_048E, B12006_009E, B12006_004E, B12006_020E, B12006_015E, B12006_031E, B12006_026E, B12006_042E, B12006_037E, NAME) %&gt;% # collapse St. Louis into one mutate(NAME = if_else(str_detect(NAME, &quot;St. Louis&quot;), &quot;St. Louis&quot;, NAME)) %&gt;% group_by(NAME) %&gt;% summarize(across(where(is.numeric), sum)) %&gt;% # create unemployed variable w/ calculation mutate(perc_unemployed_laborforce = ((B12006_055E + B12006_050E + B12006_011E + B12006_006E + B12006_022E + B12006_017E + B12006_033E + B12006_028E + B12006_044E + B12006_039E) / (B12006_053E + B12006_048E + B12006_009E + B12006_004E + B12006_020E + B12006_015E + B12006_031E + B12006_026E + B12006_042E + B12006_037E)), perc_unemployed_laborforce = if_else(B12006_053E + B12006_048E + B12006_009E + B12006_004E + B12006_020E + B12006_015E + B12006_031E + B12006_026E + B12006_042E + B12006_037E == 0, 0, perc_unemployed_laborforce)) # Clean up for graph un_df &lt;- un_df %&gt;% mutate(city = recode(NAME, `Davidson County, Tennessee` = &quot;Nashville&quot;, `Douglas County, Nebraska` = &quot;Omaha&quot;, `Franklin County, Ohio` = &quot;Columbus&quot;, `Greenville County, South Carolina` = &quot;Greenville&quot;, `Guilford County, North Carolina` = &quot;Greensboro&quot;, `Hamilton County, Ohio` = &quot;Cincinnati&quot;, `Jackson County, Missouri` = &quot;Kansas City&quot;, `Jefferson County, Alabama` = &quot;Birmingham&quot;, `Jefferson County, Kentucky` = &quot;Louisville&quot;, `Kent County, Michigan` = &quot;Grand Rapids&quot;, `Knox County, Tennessee` = &quot;Knoxville&quot;, `Marion County, Indiana` = &quot;Indianapolis&quot;, `Mecklenburg County, North Carolina` = &quot;Charlotte&quot;, `Oklahoma County, Oklahoma` = &quot;Oklahoma City&quot;, `Shelby County, Tennessee` = &quot;Memphis&quot;, `Tulsa County, Oklahoma` = &quot;Tulsa&quot;), perc_unemployed_laborforce = 100 * perc_unemployed_laborforce) plt_un &lt;- ranking(un_df, &quot;perc_unemployed_laborforce&quot;, text_size = 2, order = &quot;ascending&quot;, plot_title = &quot;Unemployed&quot;) plt_un Share renting #Data was pulled in Python file get_data.py and written to .csv sr_df &lt;- read_csv(&quot;housing_data/share_renting.csv&quot;) ## This code is modified from the urban institute: https://github.com/UrbanInstitute/covid-rental-risk-index/blob/master/scripts/01_generate_index_variables.R sr_df &lt;- sr_df %&gt;% # select ACS table variables w/ attached GEOID select(B25003_003E, B25003_001E, NAME) %&gt;% # collapse St. Louis into one mutate(NAME = if_else(str_detect(NAME, &quot;St. Louis&quot;), &quot;St. Louis&quot;, NAME)) %&gt;% group_by(NAME) %&gt;% summarize(across(where(is.numeric), sum)) %&gt;% # create perc_renters variable w/ calculation mutate(perc_renters = (B25003_003E / B25003_001E), perc_renters = if_else(B25003_001E == 0, 0, perc_renters), num_renters = B25003_003E) # Clean up for graph sr_df &lt;- sr_df %&gt;% mutate(city = recode(NAME, `Davidson County, Tennessee` = &quot;Nashville&quot;, `Douglas County, Nebraska` = &quot;Omaha&quot;, `Franklin County, Ohio` = &quot;Columbus&quot;, `Greenville County, South Carolina` = &quot;Greenville&quot;, `Guilford County, North Carolina` = &quot;Greensboro&quot;, `Hamilton County, Ohio` = &quot;Cincinnati&quot;, `Jackson County, Missouri` = &quot;Kansas City&quot;, `Jefferson County, Alabama` = &quot;Birmingham&quot;, `Jefferson County, Kentucky` = &quot;Louisville&quot;, `Kent County, Michigan` = &quot;Grand Rapids&quot;, `Knox County, Tennessee` = &quot;Knoxville&quot;, `Marion County, Indiana` = &quot;Indianapolis&quot;, `Mecklenburg County, North Carolina` = &quot;Charlotte&quot;, `Oklahoma County, Oklahoma` = &quot;Oklahoma City&quot;, `Shelby County, Tennessee` = &quot;Memphis&quot;, `Tulsa County, Oklahoma` = &quot;Tulsa&quot;), perc_renters = 100 * perc_renters) plt_sr &lt;- ranking(sr_df, &quot;perc_renters&quot;, text_size = 2, order = &quot;ascending&quot;, plot_title = &quot;Percent Renters&quot;) plt_sr Poverty #Data was pulled in Python file get_data.py and written to .csv pv_df &lt;- read_csv(&quot;housing_data/poverty.csv&quot;) ## This code is modified from the urban institute: https://github.com/UrbanInstitute/covid-rental-risk-index/blob/master/scripts/01_generate_index_variables.R pv_df &lt;- pv_df %&gt;% # select ACS table variables w/ attached GEOID select(C17002_002E, C17002_003E, C17002_001E, NAME) %&gt;% # collapse St. Louis into one mutate(NAME = if_else(str_detect(NAME, &quot;St. Louis&quot;), &quot;St. Louis&quot;, NAME)) %&gt;% group_by(NAME) %&gt;% summarize(across(where(is.numeric), sum)) %&gt;% # create poverty variable w/ calculation mutate(perc_poverty_12mnth = ((C17002_002E + C17002_003E) / C17002_001E), perc_poverty_12mnth = if_else(C17002_001E == 0, 0, perc_poverty_12mnth)) # Clean up for graph pv_df &lt;- pv_df %&gt;% mutate(city = recode(NAME, `Davidson County, Tennessee` = &quot;Nashville&quot;, `Douglas County, Nebraska` = &quot;Omaha&quot;, `Franklin County, Ohio` = &quot;Columbus&quot;, `Greenville County, South Carolina` = &quot;Greenville&quot;, `Guilford County, North Carolina` = &quot;Greensboro&quot;, `Hamilton County, Ohio` = &quot;Cincinnati&quot;, `Jackson County, Missouri` = &quot;Kansas City&quot;, `Jefferson County, Alabama` = &quot;Birmingham&quot;, `Jefferson County, Kentucky` = &quot;Louisville&quot;, `Kent County, Michigan` = &quot;Grand Rapids&quot;, `Knox County, Tennessee` = &quot;Knoxville&quot;, `Marion County, Indiana` = &quot;Indianapolis&quot;, `Mecklenburg County, North Carolina` = &quot;Charlotte&quot;, `Oklahoma County, Oklahoma` = &quot;Oklahoma City&quot;, `Shelby County, Tennessee` = &quot;Memphis&quot;, `Tulsa County, Oklahoma` = &quot;Tulsa&quot;), perc_poverty_12mnth = 100 * perc_poverty_12mnth) plt_pv &lt;- ranking(pv_df, &quot;perc_poverty_12mnth&quot;, text_size = 2, order = &quot;ascending&quot;, plot_title = &quot;Poverty&quot;) plt_pv 3.7 Metro Council District Maps Rental Insecurity Index # Read in cross walk tract_to_district &lt;- read_csv(&quot;housing_data/district_tract_crosswalk.csv&quot;) %&gt;% mutate(tract = as.character(tract)) # Join to data district_level &lt;- df_index %&gt;% rename(tract = GEOID) %&gt;% # Remove airport to avoid dividing by zero filter(tract!= &quot;21111980100&quot;) %&gt;% # join crosswalk data to dataframe left_join(tract_to_district, by = &quot;tract&quot;) %&gt;% # Group by district group_by(district) %&gt;% # join crosswalk data to dataframe summarise(across(where(is.numeric), ~sum(. * total)), .groups = &quot;drop&quot;) # Shape files metro_shp &lt;- readOGR(&quot;housing_data/Council_Districts&quot;, layer = &quot;council_districts&quot;, GDAL1_integer64_policy = TRUE, verbose = FALSE) metro_sf &lt;- st_as_sf(metro_shp) %&gt;% rename(district = coundist) metro_sf &lt;- full_join(metro_sf, district_level, by = &quot;district&quot;) # Transform the percents mult100 &lt;- function(x){ x &lt;- x * 100 } metro_sf &lt;- metro_sf %&gt;% mutate(across(starts_with(&quot;perc_&quot;), mult100)) load(&quot;housing_data/district_label_points.RData&quot;) district_label_points %&lt;&gt;% mutate( x = unname(st_coordinates(.)[,1]), y = unname(st_coordinates(.)[,2])) write_csv(st_drop_geometry(metro_sf), &quot;metro_data.csv&quot;) metro_map &lt;- function(indicator, title = &quot;&quot;, legend = &quot;&quot;, caption = &quot;&quot;, no_legend = FALSE){ plt &lt;- ggplot(metro_sf) + geom_sf(aes(fill={{ indicator }} )) + # Add District labels shadowtext::geom_shadowtext(data = district_label_points, aes(x = x, y=y, label = district), family = &quot;Montserrat Bold&quot;, size = 8, color = &quot;white&quot;, bg.color=&quot;black&quot;) + #geom_sf(data = district_label_points, aes(color =district)) + #geom_sf_text(aes(label = district), color = &quot;white&quot;) + #geom_sf_text(aes(label = district), size = 6, color = &quot;#ffffff&quot;, # fun.geometry = function(x) st_buffer(x, dist = buffers, singleSide = T) %&gt;% st_point_on_surface()) + # scale_fill_gradient(low = &quot;#323844&quot;, high = &quot;#d63631&quot;, name = legend) + scale_fill_viridis(na.value = &quot;grey&quot;, name = legend) + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(plot.caption = element_text(lineheight = .5)) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank()) + labs(title = title, caption = caption) if (no_legend == TRUE){ plt &lt;- plt + theme(legend.position = &quot;none&quot;) } plt &lt;- plt + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) return(plt) } metro_map(overall_index, title = &quot;Rental Insecurity Index&quot;, legend = &quot;Compared to \\n other tracts&quot;, caption = &quot;Lighter shades indicate higher rental insecurity. \\n This is the Urban Institute&#39;s Emergency Rental Assistance Priority Index modified \\nto compare Louisville to its peer cities (instead of to other areas in Kentucky). \\n Greyed out areas had insufficient data for the index&quot;, no_legend = TRUE) Housing Instability Subindex metro_map(housing_instability_index, title = &quot;Housing Instability Subindex&quot;, legend = &quot;Compared to \\n other tracts&quot;, caption = &quot;Lighter shades indicate higher housing instability. \\n This is the Urban Institute&#39;s Housing Instability subindex modified \\nto compare Louisville to its peer cities (instead of to other areas in Kentucky). \\n Greyed out areas had insufficient data for the index&quot;, no_legend = TRUE) Covid 19 Impact Subindex metro_map(covid_index, title = &quot;Covid Instability Subindex&quot;, legend = &quot;Compared to \\n other tracts&quot;, caption = &quot;Lighter shades indicate higher covid instability. \\n This is the Urban Institute&#39;s Covid Instability subindex modified \\nto compare Louisville to its peer cities (instead of to other areas in Kentucky). \\n Greyed out areas had insufficient data for the index&quot;, no_legend = TRUE) Equity Subindex metro_map(equity_index, title = &quot;Equity Subindex&quot;, legend = &quot;Compared to \\n other tracts&quot;, caption = &quot;Lighter shades indicate higher prioritization based on equity. \\n This is the Urban Institute&#39;s Equity subindex modified \\nto compare Louisville to its peer cities (instead of to other areas in Kentucky). \\n Greyed out areas had insufficient data for the index&quot;, no_legend = TRUE) Poverty metro_map(perc_poverty_12mnth, title = &quot;Poverty&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of each census tract that is in poverty. \\n Data from Urban Institute.&quot;) Percent Renting metro_map(perc_renters, title = &quot;Percent of Renter Occupied Housing Units&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of each tract that rents. \\n Data from Urban Institute&quot;) Cost-burdened housholds metro_map(perc_cost_burdened_under_35k, title = &quot;Costburdened Households making under 35k&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of households making less than 35,000 and paying more than 50% of their income in rent. \\n Data from Urban Institute&quot;) Overcrowding metro_map(perc_overcrowding_renter_1.50_or_more, title = &quot;Overcrowding in Rental Housing&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of households renting and with more than 1.5 people per room. \\n Data from Urban Institute&quot;) Unemployed metro_map(perc_unemployed_laborforce, title = &quot;Unemployment&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of people unemployed but still in the labor force (actively seeking work). \\n Data from Urban Institute&quot;) No Health Insurance metro_map(perc_no_hinsure, title = &quot;No Health Insurance&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent without health insurance. \\n Data from Urban Institute&quot;) Low Income Jobs Lost to Covid metro_map(perc_low_income_jobs_lost, title = &quot;Low Income Jobs Lost to Covid&quot;, legend = &quot;Percent&quot;, caption = &quot;Estimate from the Urban Institute based on job categories in the each tract. \\n Data from Urban Institute&quot;) Percent PoC metro_map(perc_person_of_color, title = &quot;Percent Persons of Color&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent of persons in the area who identify as persons of color. \\n Data from Urban Institute&quot;) Extremely Low Income metro_map(perc_30hamfi, title = &quot;Extremely Low Income&quot;, legend = &quot;Percent&quot;, caption = &quot;Renter occupied household making less than 30 percent of area median income. \\n Data from Urban Institute&quot;) Public Assistance metro_map(perc_public_assistance, title = &quot;Recieving Public Assistance&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent receiving some form of public assistance like SNAP or TANF. \\n Data from Urban Institute&quot;) Foreign Born metro_map(perc_foreign_born, title = &quot;Foreign Born&quot;, legend = &quot;Percent&quot;, caption = &quot;Percent born outside the U.S. \\n Data from Urban Institute&quot;) 3.8 Metro Council Tables Housing Subindex library(gt) metro_house_tbl &lt;- metro_sf %&gt;% st_drop_geometry() %&gt;% filter(!is.na(district)) %&gt;% select(district, perc_cost_burdened_under_35k, perc_renters, perc_poverty_12mnth, perc_unemployed_laborforce, perc_overcrowding_renter_1.50_or_more, housing_instability_index) %&gt;% #GT fmt_percent expects percents as decimals mutate(across(starts_with(&quot;perc&quot;), ~ ./100)) %&gt;% gt() %&gt;% tab_header(title = &quot;Table 1: Housing Indicators&quot;, subtitle = &quot;Components of the Housing Instability Subindex&quot;) %&gt;% fmt_number(columns = vars(housing_instability_index), n_sigfig = 2, suffixing = TRUE) %&gt;% fmt_percent(columns = vars(perc_cost_burdened_under_35k, perc_renters, perc_poverty_12mnth, perc_unemployed_laborforce, perc_overcrowding_renter_1.50_or_more), decimals = 0) %&gt;% cols_label(district = &quot;Metro District&quot;, perc_cost_burdened_under_35k = &quot;Cost Burdened&quot;, perc_renters = &quot;Renting&quot;, perc_poverty_12mnth = &quot;Poverty&quot;, perc_unemployed_laborforce = &quot;Unemployed&quot;, perc_overcrowding_renter_1.50_or_more = &quot;Overcrowding&quot;, housing_instability_index = &quot;Index&quot;) %&gt;% cols_move(columns = vars(perc_cost_burdened_under_35k, perc_renters, perc_poverty_12mnth, perc_unemployed_laborforce, perc_overcrowding_renter_1.50_or_more, housing_instability_index), after = vars(district)) %&gt;% tab_spanner( label = &quot;Index&quot;, columns = vars(housing_instability_index) ) %&gt;% tab_spanner( label = &quot;Percent&quot;, columns = vars(perc_cost_burdened_under_35k, perc_renters, perc_poverty_12mnth, perc_unemployed_laborforce, perc_overcrowding_renter_1.50_or_more) ) %&gt;% cols_align(align = &quot;center&quot;) %&gt;% tab_source_note( source_note = md(&quot;Greater Louisville Project&quot;) ) %&gt;% tab_source_note( source_note = md(&quot;Metro Council Districts are estimated from tract level data. Data is from the Urban Institute.&quot;) ) %&gt;% opt_row_striping(row_striping = TRUE) %&gt;% opt_table_outline() %&gt;% tab_options( table.font.size = px(12), table.width = pct(50) ) metro_house_tbl html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #hkhaiwrtyi .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 12px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: 50%; border-top-style: solid; border-top-width: 3px; border-top-color: #D3D3D3; border-right-style: solid; border-right-width: 3px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 3px; border-bottom-color: #D3D3D3; border-left-style: solid; border-left-width: 3px; border-left-color: #D3D3D3; } #hkhaiwrtyi .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hkhaiwrtyi .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #hkhaiwrtyi .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #hkhaiwrtyi .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hkhaiwrtyi .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hkhaiwrtyi .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #hkhaiwrtyi .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #hkhaiwrtyi .gt_column_spanner_outer:first-child { padding-left: 0; } #hkhaiwrtyi .gt_column_spanner_outer:last-child { padding-right: 0; } #hkhaiwrtyi .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #hkhaiwrtyi .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #hkhaiwrtyi .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #hkhaiwrtyi .gt_from_md > :first-child { margin-top: 0; } #hkhaiwrtyi .gt_from_md > :last-child { margin-bottom: 0; } #hkhaiwrtyi .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #hkhaiwrtyi .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #hkhaiwrtyi .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hkhaiwrtyi .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #hkhaiwrtyi .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hkhaiwrtyi .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #hkhaiwrtyi .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #hkhaiwrtyi .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hkhaiwrtyi .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hkhaiwrtyi .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #hkhaiwrtyi .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hkhaiwrtyi .gt_sourcenote { font-size: 90%; padding: 4px; } #hkhaiwrtyi .gt_left { text-align: left; } #hkhaiwrtyi .gt_center { text-align: center; } #hkhaiwrtyi .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #hkhaiwrtyi .gt_font_normal { font-weight: normal; } #hkhaiwrtyi .gt_font_bold { font-weight: bold; } #hkhaiwrtyi .gt_font_italic { font-style: italic; } #hkhaiwrtyi .gt_super { font-size: 65%; } #hkhaiwrtyi .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } Table 1: Housing Indicators Components of the Housing Instability Subindex Metro District Percent Index Cost Burdened Renting Poverty Unemployed Overcrowding Index 1 47&percnt; 45&percnt; 24&percnt; 12&percnt; 0&percnt; 0.22 2 51&percnt; 50&percnt; 20&percnt; 8&percnt; 3&percnt; 0.33 3 46&percnt; 47&percnt; 26&percnt; 10&percnt; 1&percnt; 0.27 4 35&percnt; 80&percnt; 43&percnt; 17&percnt; 1&percnt; 0.97 5 47&percnt; 57&percnt; 34&percnt; 17&percnt; 1&percnt; 0.73 6 40&percnt; 77&percnt; 43&percnt; 11&percnt; 1&percnt; 0.75 7 64&percnt; 27&percnt; 6&percnt; 3&percnt; 0&percnt; &minus;0.35 8 38&percnt; 32&percnt; 9&percnt; 3&percnt; 1&percnt; &minus;0.46 9 41&percnt; 42&percnt; 10&percnt; 4&percnt; 0&percnt; &minus;0.36 10 47&percnt; 41&percnt; 15&percnt; 6&percnt; 0&percnt; &minus;0.15 11 32&percnt; 29&percnt; 7&percnt; 4&percnt; 1&percnt; &minus;0.49 12 49&percnt; 32&percnt; 12&percnt; 6&percnt; 2&percnt; &minus;0.16 13 35&percnt; 39&percnt; 17&percnt; 6&percnt; 1&percnt; &minus;0.21 14 50&percnt; 23&percnt; 16&percnt; 5&percnt; 0&percnt; &minus;0.32 15 41&percnt; 55&percnt; 26&percnt; 9&percnt; 1&percnt; 0.28 16 66&percnt; 19&percnt; 5&percnt; 4&percnt; 1&percnt; &minus;0.32 17 64&percnt; 26&percnt; 7&percnt; 3&percnt; 1&percnt; &minus;0.31 18 56&percnt; 37&percnt; 5&percnt; 3&percnt; 1&percnt; &minus;0.29 19 70&percnt; 21&percnt; 4&percnt; 4&percnt; 1&percnt; &minus;0.29 20 47&percnt; 17&percnt; 4&percnt; 3&percnt; 1&percnt; &minus;0.57 21 50&percnt; 49&percnt; 22&percnt; 6&percnt; 1&percnt; 0.077 22 36&percnt; 21&percnt; 6&percnt; 3&percnt; 2&percnt; &minus;0.51 23 41&percnt; 19&percnt; 6&percnt; 4&percnt; 1&percnt; &minus;0.52 24 48&percnt; 37&percnt; 14&percnt; 5&percnt; 1&percnt; &minus;0.12 25 34&percnt; 34&percnt; 11&percnt; 5&percnt; 1&percnt; &minus;0.39 26 52&percnt; 40&percnt; 12&percnt; 4&percnt; 1&percnt; &minus;0.18 Greater Louisville Project Metro Council Districts are estimated from tract level data. Data is from the Urban Institute. Covid Subindex metro_covid_tbl &lt;- metro_sf %&gt;% st_drop_geometry() %&gt;% filter(!is.na(district)) %&gt;% select(district, perc_no_hinsure, perc_low_income_jobs_lost, covid_index) %&gt;% #GT fmt_percent expects percents as decimals mutate(across(starts_with(&quot;perc&quot;), ~ ./100)) %&gt;% gt() %&gt;% tab_header(title = &quot;Table 2: Covid Indicators&quot;, subtitle = &quot;Components of the Covid Subindex&quot;) %&gt;% fmt_number(columns = vars(covid_index), n_sigfig = 2, suffixing = TRUE) %&gt;% fmt_percent(columns = vars(perc_no_hinsure, perc_low_income_jobs_lost), decimals = 0) %&gt;% cols_label(district = &quot;Metro District&quot;, perc_no_hinsure = &quot;No Health Insurance&quot;, perc_low_income_jobs_lost = &quot;Covid Job Loss&quot;, covid_index = &quot;Covid Index&quot;) %&gt;% cols_move(columns = vars(perc_no_hinsure, perc_low_income_jobs_lost, covid_index), after = vars(district)) %&gt;% tab_spanner( label = &quot;Index&quot;, columns = vars(covid_index) ) %&gt;% tab_spanner( label = &quot;Percent&quot;, columns = vars(perc_no_hinsure, perc_low_income_jobs_lost) ) %&gt;% cols_align(align = &quot;center&quot;) %&gt;% tab_source_note( source_note = md(&quot;Greater Louisville Project&quot;) ) %&gt;% tab_source_note( source_note = md(&quot;Metro Council Districts are estimated from tract level data. Data is from the Urban Institute.&quot;) ) %&gt;% opt_row_striping(row_striping = TRUE) %&gt;% opt_table_outline() %&gt;% tab_options( table.font.size = px(12), table.width = pct(50) ) metro_covid_tbl html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #iiiblojlsm .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 12px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: 50%; border-top-style: solid; border-top-width: 3px; border-top-color: #D3D3D3; border-right-style: solid; border-right-width: 3px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 3px; border-bottom-color: #D3D3D3; border-left-style: solid; border-left-width: 3px; border-left-color: #D3D3D3; } #iiiblojlsm .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iiiblojlsm .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #iiiblojlsm .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #iiiblojlsm .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iiiblojlsm .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iiiblojlsm .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #iiiblojlsm .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #iiiblojlsm .gt_column_spanner_outer:first-child { padding-left: 0; } #iiiblojlsm .gt_column_spanner_outer:last-child { padding-right: 0; } #iiiblojlsm .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #iiiblojlsm .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #iiiblojlsm .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #iiiblojlsm .gt_from_md > :first-child { margin-top: 0; } #iiiblojlsm .gt_from_md > :last-child { margin-bottom: 0; } #iiiblojlsm .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #iiiblojlsm .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #iiiblojlsm .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iiiblojlsm .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #iiiblojlsm .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iiiblojlsm .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #iiiblojlsm .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #iiiblojlsm .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iiiblojlsm .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iiiblojlsm .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #iiiblojlsm .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iiiblojlsm .gt_sourcenote { font-size: 90%; padding: 4px; } #iiiblojlsm .gt_left { text-align: left; } #iiiblojlsm .gt_center { text-align: center; } #iiiblojlsm .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #iiiblojlsm .gt_font_normal { font-weight: normal; } #iiiblojlsm .gt_font_bold { font-weight: bold; } #iiiblojlsm .gt_font_italic { font-style: italic; } #iiiblojlsm .gt_super { font-size: 65%; } #iiiblojlsm .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } Table 2: Covid Indicators Components of the Covid Subindex Metro District Percent Index No Health Insurance Covid Job Loss Covid Index 1 9&percnt; 9&percnt; &minus;0.18 2 14&percnt; 8&percnt; &minus;0.012 3 10&percnt; 9&percnt; &minus;0.098 4 10&percnt; 10&percnt; &minus;0.011 5 10&percnt; 9&percnt; &minus;0.082 6 11&percnt; 9&percnt; 0.0010 7 6&percnt; 9&percnt; &minus;0.20 8 4&percnt; 9&percnt; &minus;0.34 9 7&percnt; 9&percnt; &minus;0.22 10 9&percnt; 9&percnt; &minus;0.20 11 5&percnt; 9&percnt; &minus;0.41 12 7&percnt; 8&percnt; &minus;0.42 13 13&percnt; 8&percnt; &minus;0.17 14 8&percnt; 8&percnt; &minus;0.42 15 12&percnt; 9&percnt; &minus;0.046 16 4&percnt; 10&percnt; &minus;0.24 17 5&percnt; 10&percnt; &minus;0.16 18 5&percnt; 9&percnt; &minus;0.28 19 3&percnt; 9&percnt; &minus;0.36 20 3&percnt; 8&percnt; &minus;0.49 21 14&percnt; 8&percnt; &minus;0.017 22 5&percnt; 8&percnt; &minus;0.44 23 7&percnt; 8&percnt; &minus;0.38 24 9&percnt; 8&percnt; &minus;0.29 25 8&percnt; 8&percnt; &minus;0.38 26 9&percnt; 9&percnt; &minus;0.17 Greater Louisville Project Metro Council Districts are estimated from tract level data. Data is from the Urban Institute. Equity Index metro_equity_tbl &lt;- metro_sf %&gt;% st_drop_geometry() %&gt;% filter(!is.na(district)) %&gt;% select(district, perc_person_of_color, perc_30hamfi, perc_public_assistance, perc_foreign_born, equity_index) %&gt;% #GT fmt_percent expects percents as decimals mutate(across(starts_with(&quot;perc&quot;), ~ ./100)) %&gt;% gt() %&gt;% tab_header(title = &quot;Table 3: Equity Indicators&quot;, subtitle = &quot;Components of the Equity Subindex&quot;) %&gt;% fmt_number(columns = vars(equity_index), n_sigfig = 2, suffixing = TRUE) %&gt;% fmt_percent(columns = vars(perc_person_of_color, perc_30hamfi, perc_public_assistance, perc_foreign_born), decimals = 0) %&gt;% cols_label(district = &quot;Metro District&quot;, perc_person_of_color = &quot;Person of Color&quot;, perc_30hamfi = &quot;Extremely Low Income&quot;, perc_public_assistance = &quot;Public Assistance&quot;, perc_foreign_born = &quot;Foreign Born&quot;, equity_index = &quot;Index&quot;) %&gt;% cols_move(columns = vars(perc_person_of_color, perc_30hamfi, perc_public_assistance, perc_foreign_born, equity_index), after = vars(district)) %&gt;% tab_spanner( label = &quot;Index&quot;, columns = vars(equity_index) ) %&gt;% tab_spanner( label = &quot;Percent&quot;, columns = vars(perc_person_of_color, perc_30hamfi, perc_public_assistance, perc_foreign_born, equity_index) ) %&gt;% cols_align(align = &quot;center&quot;) %&gt;% tab_source_note( source_note = md(&quot;Greater Louisville Project&quot;) ) %&gt;% tab_source_note( source_note = md(&quot;Metro Council Districts are estimated from tract level data. Data is from the Urban Institute.&quot;) ) %&gt;% opt_row_striping(row_striping = TRUE) %&gt;% opt_table_outline() %&gt;% tab_options( table.font.size = px(12), table.width = pct(50) ) metro_equity_tbl html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #iezilvhksr .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 12px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: 50%; border-top-style: solid; border-top-width: 3px; border-top-color: #D3D3D3; border-right-style: solid; border-right-width: 3px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 3px; border-bottom-color: #D3D3D3; border-left-style: solid; border-left-width: 3px; border-left-color: #D3D3D3; } #iezilvhksr .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iezilvhksr .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #iezilvhksr .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #iezilvhksr .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iezilvhksr .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iezilvhksr .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #iezilvhksr .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #iezilvhksr .gt_column_spanner_outer:first-child { padding-left: 0; } #iezilvhksr .gt_column_spanner_outer:last-child { padding-right: 0; } #iezilvhksr .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #iezilvhksr .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #iezilvhksr .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #iezilvhksr .gt_from_md > :first-child { margin-top: 0; } #iezilvhksr .gt_from_md > :last-child { margin-bottom: 0; } #iezilvhksr .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #iezilvhksr .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #iezilvhksr .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iezilvhksr .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #iezilvhksr .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iezilvhksr .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #iezilvhksr .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #iezilvhksr .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iezilvhksr .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iezilvhksr .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #iezilvhksr .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iezilvhksr .gt_sourcenote { font-size: 90%; padding: 4px; } #iezilvhksr .gt_left { text-align: left; } #iezilvhksr .gt_center { text-align: center; } #iezilvhksr .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #iezilvhksr .gt_font_normal { font-weight: normal; } #iezilvhksr .gt_font_bold { font-weight: bold; } #iezilvhksr .gt_font_italic { font-style: italic; } #iezilvhksr .gt_super { font-size: 65%; } #iezilvhksr .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } Table 3: Equity Indicators Components of the Equity Subindex Metro District Percent Person of Color Extremely Low Income Public Assistance Foreign Born Index 1 68&percnt; 43&percnt; 2&percnt; 2&percnt; 0.48 2 69&percnt; 28&percnt; 2&percnt; 18&percnt; 0.67 3 66&percnt; 45&percnt; 4&percnt; 4&percnt; 0.57 4 60&percnt; 50&percnt; 4&percnt; 4&percnt; 0.53 5 74&percnt; 45&percnt; 3&percnt; 1&percnt; 0.63 6 53&percnt; 46&percnt; 3&percnt; 5&percnt; 0.38 7 16&percnt; 11&percnt; 1&percnt; 7&percnt; &minus;0.71 8 7&percnt; 15&percnt; 1&percnt; 3&percnt; &minus;0.92 9 15&percnt; 19&percnt; 2&percnt; 5&percnt; &minus;0.67 10 28&percnt; 28&percnt; 2&percnt; 9&percnt; &minus;0.28 11 23&percnt; 11&percnt; 2&percnt; 8&percnt; &minus;0.53 12 27&percnt; 26&percnt; 3&percnt; 5&percnt; &minus;0.32 13 31&percnt; 23&percnt; 5&percnt; 12&percnt; &minus;0.035 14 15&percnt; 28&percnt; 4&percnt; 3&percnt; &minus;0.51 15 38&percnt; 32&percnt; 5&percnt; 8&percnt; 0.11 16 18&percnt; 8&percnt; 1&percnt; 8&percnt; &minus;0.67 17 25&percnt; 15&percnt; 2&percnt; 10&percnt; &minus;0.43 18 20&percnt; 12&percnt; 1&percnt; 11&percnt; &minus;0.57 19 17&percnt; 14&percnt; 1&percnt; 6&percnt; &minus;0.71 20 16&percnt; 17&percnt; 1&percnt; 4&percnt; &minus;0.74 21 44&percnt; 29&percnt; 2&percnt; 19&percnt; 0.28 22 22&percnt; 13&percnt; 1&percnt; 5&percnt; &minus;0.63 23 23&percnt; 16&percnt; 2&percnt; 6&percnt; &minus;0.54 24 31&percnt; 26&percnt; 3&percnt; 11&percnt; &minus;0.13 25 24&percnt; 20&percnt; 2&percnt; 6&percnt; &minus;0.49 26 26&percnt; 20&percnt; 4&percnt; 13&percnt; &minus;0.19 Greater Louisville Project Metro Council Districts are estimated from tract level data. Data is from the Urban Institute. 3.9 Home Mortgages 3.9.1 Mortgages by geography In 2019, about 3.8 mortgages were issued per 100 residents; however, the availability of mortgages varies greatly across the city. Two census tracts saw 0 mortgages issued in 2019, and most of West Louisville saw fewer than 1 mortgage issued per 100 residents. Meanwhile, many areas experienced a much larger availability of mortgages, especially where there is new construction around the edges of the county. home_loan_tract_race &lt;- home_loan_tract %&gt;% filter(year == 2019, sex == &quot;total&quot;, race != &quot;total&quot;) %&gt;% select(tract, race, denial:rate_spread) home_loan_tract %&lt;&gt;% filter(year == 2019, sex == &quot;total&quot;, race == &quot;total&quot;) %&gt;% select(tract, denial:rate_spread) jfco_sf %&lt;&gt;% left_join(home_loan_tract, by = c(&quot;GEOID&quot; = &quot;tract&quot;)) loan_num_labs &lt;- c(&quot;No mortgages&quot;, &quot;Less than 1&quot;, &quot;1 to 3&quot;, &quot;3 to 5&quot;, &quot;5 to 10&quot;, &quot;More than 10&quot;) jfco_sf %&lt;&gt;% mutate( loan_num_fill = case_when( loan_number_per_100 == 0 ~ loan_num_labs[1], loan_number_per_100 &lt;= 1 ~ loan_num_labs[2], loan_number_per_100 &lt;= 3 ~ loan_num_labs[3], loan_number_per_100 &lt;= 5 ~ loan_num_labs[4], loan_number_per_100 &lt;= 10 ~ loan_num_labs[5], loan_number_per_100 &gt; 10 ~ loan_num_labs[6], is.na(loan_number_per_100) ~ NA_character_, TRUE ~ &quot;error!!&quot;) %&gt;% factor(levels = loan_num_labs, ordered = TRUE)) ggplot(jfco_sf) + geom_sf(aes(fill = loan_num_fill)) + scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), legend.title = element_blank()) + labs(title = &quot;Mortgages issued per 100 residents in 2019&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 3.9.2 Mortgages by race We can also examine mortgage data by race. Black residents in Louisville received fewer than half the number of mortgages per person that White residents did in 2019. # Interactive Mortgage map # load(&quot;home_loans_detail.RData&quot;) # home_loan_detail %&lt;&gt;% # select(tract, year, race, sex, loan_status, income, loan, rate) %&gt;% # mutate(tract = str_extract(tract, &quot;21111.*&quot;)) %&gt;% # filter(year == 2019, loan_status == &quot;approved&quot;) # # num_points &lt;- home_loan_detail %&gt;% # group_by(tract) %&gt;% # summarise(n = n(), .groups=&quot;drop&quot;) %&gt;% # left_join(glptools::map_tract, by = &quot;tract&quot;) %&gt;% # group_by(tract) %&gt;% # nest() %&gt;% # mutate(points = map(data, function(x) st_sample(x$geometry, x$n))) %&gt;% # unnest() # # home_loan_detail %&lt;&gt;% arrange(tract) # num_points %&lt;&gt;% arrange(tract) # # st_geometry(home_loan_detail) &lt;- num_points$points # # library(leaflet) # # # fillpal &lt;- colorFactor(RColorBrewer::brewer.pal(5, &quot;Dark2&quot;), domain = unique(home_loan_detail$race)) # # leaflet(filter(home_loan_detail, is.na(race))) %&gt;% # addCircleMarkers( # radius = ~sqrt(loan / 30000), # #radius = 5, # stroke=T, # fillColor = ~fillpal(race), # color = ~fillpal(race), # weight = 1, # fillOpacity = 0.15, # opacity = 0.4) %&gt;% # addLegend(pal = fillpal, values = unique(home_loan_detail$race)) %&gt;% # addTiles() mortgage_county &lt;- home_loan_county plt_by &lt;- function(df, group_var, var, title_text = &quot;Home Mortgages&quot;, y_axis = &quot;Percent&quot;, y_min = NA, units = &quot;number&quot;) { var &lt;- enquo(var) group_var &lt;- enquo(group_var) text_scale &lt;- 1 plt &lt;- ggplot(data = df, aes(x = year, y = !!var, group = !!group_var, colour = !!group_var)) + geom_point(size = 2) + geom_line(size = .65) + theme_bw() + labs(title = title_text, x = &quot;Year&quot;, y = y_axis) + theme(legend.position = &quot;bottom&quot;) plt &lt;- plt + scale_colour_manual(values = c(&quot;#323844&quot;, &quot;#d63631&quot;)) + scale_x_continuous(breaks = seq(from = 2007, to = 2019, by = 2)) + theme(text = element_text(family = &quot;Montserrat&quot;), legend.title = element_text(size = 30 * text_scale), legend.text = element_text(size = 24 * text_scale, margin = margin(b = 0.2 * text_scale, t = 0.2 * text_scale, unit = &quot;cm&quot;)), axis.text = element_text(size = 24 * text_scale), axis.title = element_text(size = 30 * text_scale), axis.title.x = element_text(margin = margin(t = 0.3 * text_scale, unit = &quot;cm&quot;)), axis.title.y = element_text(margin = margin(r = 0.3 * text_scale, unit = &quot;cm&quot;)), plot.title = element_text(size = 42 * text_scale, hjust = .5, margin = margin(b = 0.4 * text_scale, unit = &quot;cm&quot;))) if (!is.na(y_min)) { plt &lt;- plt + ylim(y_min, NA) } if(units == &quot;Dollars&quot;) plt &lt;- plt + scale_y_continuous(labels = scales::dollar) if(units == &quot;Percent&quot;) plt &lt;- plt + scale_y_continuous(labels = function(x) scales::percent(x, accuracy = 1, scale = 1)) plt &lt;- plt + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA) ) plt } mortgage_county %&lt;&gt;% filter(FIPS == &quot;21111&quot;, sex==&quot;total&quot;, race %in% c(&quot;black&quot;, &quot;white&quot;)) %&gt;% rename(Race = race) %&gt;% mutate(Race = str_to_title(Race)) plt_by(mortgage_county, Race, loan_number_per_100, &quot;Mortgages by race&quot;, y_axis = &quot;Mortgages per 100 People&quot;, y_min = 0) 3.9.3 Mortgage Dollars by race The racial disparity is mortgages is even larger when you incorporate the dollar amount of mortgages issues. In 2019, white residents received $2.60 in mortgages for every $1 that Black residents received after adjusting for population size. plt_by(mortgage_county, Race, loan_amount_pp, &quot;Mortgage Lending by race&quot;, y_axis = &quot;Dollars per 100 People&quot;, y_min = 0, units = &quot;Dollars&quot;) 3.9.4 Denial Rates by Race Black residents are denied mortgages at a rate roughly twice that of white residents. The mortgage denial rate for Black residents has decreased from a high of 29% in 2008 to a low of 14% in 2019. However, it has not shown signs of decreasing in recent years, and Black residents are more likely to be impacted by the economic impacts of COVID-19, worsening the disparity in 2020 and beyond. plt_by(mortgage_county, Race, denial, &quot;Mortgage Denial by race&quot;, y_axis = &quot;Denial Rate&quot;, y_min = 0, units= &quot;Percent&quot;) 3.9.5 Denial Rates by Geography A major factor in mortgage availability is denial rates. While some areas of town saw few to no mortgage denials, people in many parts of West Louisville experienced denial rates of 30 to 40%. make_map(denial, title = &quot;Mortgage Denial Rate in 2019&quot;, legend = &quot;Percent&quot;, caption = &quot;Denial rate&quot;) 3.9.6 Interest Rates by geography For the mortgages that were issued, interest rates varied from around 3.5% to around 5%. While the average interest rate was around 4% for the much of East Louisville, average interest rates in West Louisville were closer to 5%. A 30-year mortgage with an interest rate of 5% requires monthly payments that are 13% higher than a mortgage with an interest rate of 4%. make_map(rate, title = &quot;Mortgage Interest Rate in 2019&quot;, legend = &quot;Percent&quot;, caption = &quot;Interest rate&quot;) 3.10 Housing Price Changes As Louisville grows, increasing home prices reflect changes in inflation and increasing demand for homes. Long-term growth in home prices helps homeowners build equity and wealth. Short-term appreciation can be a boon to homeowners with the finances to stay in their home, though it also causes many homeowners and renters to be dislocated from their neighborhood. 3.10.1 Long-term appreciation This map shows the change in existing home prices across zip codes since 2000, controlling for new construction. Since 2000, existing homes in Louisville have increased in value by an average of 57% (an average of about 2.4% per year). However, not every area of the city has benefited equally from this growth. Home prices in zip code 40204, which contains the Upper Highlands and Germantown, have more than doubled since 2000. While many zip codes close to downtown also saw high growth, many parts of West Louisville saw slow growth, and homes in 40212 lost value. lou_num &lt;- HPI_county %&gt;% filter(FIPS == &quot;21111&quot;) housing_price_index &lt;- HPI_zip housing_price_index %&lt;&gt;% filter(year == 2019) map_zip %&lt;&gt;% left_join(housing_price_index, by = &quot;zip&quot;) hpi_change &lt;- c(&quot;Lost value&quot;, &quot;0% - 25%&quot;, &quot;25% - 50%&quot;, &quot;50% - 75%&quot;, &quot;75% - 100%&quot;, &quot;100% - 125%&quot;) hpi_2015_change &lt;- c(&quot;Lost value&quot;, &quot;0% - 10%&quot;, &quot;10% - 20%&quot;, &quot;20% - 30%&quot;, &quot;30% - 40%&quot;, &quot;40% - 50%&quot;) map_zip %&lt;&gt;% mutate( hpi_fill = case_when( HPI &lt; 100 ~ hpi_change[1], HPI &lt; 125 ~ hpi_change[2], HPI &lt; 150 ~ hpi_change[3], HPI &lt; 175 ~ hpi_change[4], HPI &lt; 200 ~ hpi_change[5], HPI &lt; 225 ~ hpi_change[6], is.na(HPI) ~ NA_character_, TRUE ~ &quot;error!!&quot;) %&gt;% factor(levels = hpi_change, ordered = TRUE), hpi_2015_fill = case_when( HPI_2015 &lt; 0 ~ hpi_2015_change[1], HPI_2015 &lt; 10 ~ hpi_2015_change[2], HPI_2015 &lt; 20 ~ hpi_2015_change[3], HPI_2015 &lt; 30 ~ hpi_2015_change[4], HPI_2015 &lt; 40 ~ hpi_2015_change[5], HPI_2015 &lt; 50 ~ hpi_2015_change[6], is.na(HPI) ~ NA_character_, TRUE ~ &quot;error!!&quot;) %&gt;% factor(levels = hpi_2015_change, ordered = TRUE)) ggplot(map_zip) + geom_sf(aes(fill = hpi_fill)) + scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + #scale_fill_viridis() + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), legend.title = element_blank()) + labs(title = &quot;Change in housing prices since 2000&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 3.10.2 Short-term appreciation Looking at the growth since 2015 highlights zip codes where changes in home prices have been very acute. The average home in Louisville increased in value by 21% between 2015 and 2019. The vast majority of zip codes saw total growth of 10% - 30%, while changes in home prices for zip codes in West Louisville range from a decrease of 30% in 40212 to an increase of 40% in 40203. The rapid price increase in 40203, which contains parts of Russell and Old Louisville, threaten to displace many residents. In 40203, home prices across Louisville increased by an average of 8.8% per year. ggplot(map_zip) + geom_sf(aes(fill = hpi_2015_fill)) + scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + #scale_fill_viridis() + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), legend.title = element_blank()) + labs(title = &quot;Change in housing prices since 2015&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 3.11 Housing Availability Housing must be both affordable and available for families to have housing that meets their needs. Based on framework from the Housing Needs Assessment, we compare households incomes to the price of housing available to them. We use the Area Median Income (AMI) to group households and housing units. In 2019, the AMI for Louisville was $76,400 for a family of four. (The AMI adjusts for household size.) We also use AMI to group homes and apartments by determining whether the housing would be affordable to households in that income group. Housing is affordable is a household spends less than 30% of their income on housing costs. For a fuller explanation of AMI, see the next section. We find that households making less than 30% of AMI do not have enough housing units available to them. While 39,000 households have incomes below 30% of AMI, there are only enough affordable and available units for about half of them of them. This creates an affordability gap for households making between 30% and 50% of AMI. While there are actually more housing units than households at this income level, many of them are occupied by households with lower incomes, making them unavailable. The same problem exists for households in the 80% AMI income group. At higher income levels, we find that households generally have access to affordable housing. Creating housing opportunities for households below 30% of AMI would help ease the housing gap not only for them, but for households in higher income groups as well. library(magrittr) acs_micro_houses_ddi &lt;- ipumsr::read_ipums_ddi(&quot;housing_data/usa_00083.xml&quot;) acs_houses_unoccupied &lt;- ipumsr::read_ipums_micro(acs_micro_houses_ddi, verbose=F) acs_houses_unoccupied %&lt;&gt;% clean_acs_micro() acs_houses_unoccupied %&lt;&gt;% filter(FIPS == &quot;21111&quot;, year %in% 2015:2019) acs_micro &lt;- arrow::read_feather(&quot;../glpdata/data-raw/microdata/acs_micro.feather&quot;) # Create table of AMI limits based on HUD information mult = c(0.7, 0.8, 0.9, 1 + seq(0, 0.64, by = 0.08)) mult_br = c(0.7, 0.75, 0.9, 1.04 + seq(0, 0.88, by = 0.12)) ami_table_16 &lt;- data.frame( hh_size = rep(1:12), ami30 = c(15050, 17200, 20780, 25100, 29420, 33740, 38060, 42380, plyr::round_any(42380 + (42380 / 1.32 * 0.08) * 1:4, 50, ceiling)), ami50 = c(25050, 28600, 32200, 35750, 38650, 41500, 44350, 47200, plyr::round_any(47200 + (47200 / 1.32 * 0.08) * 1:4, 50, ceiling)), ami80 = c(40050, 45800, 51500, 57200, 61800, 66400, 70950, 75550, plyr::round_any(75550 + (75550 / 1.32 * 0.08) * 1:4, 50, ceiling)), ami100 = 71500 * mult, ami150 = 71500 * mult * 1.5, ami200 = 71500 * mult * 2) ami_table_16_house &lt;- ami_table_16 %&gt;% transmute( bedrooms = hh_size - 1, ami30_house = ami30, ami50_house = ami50, ami80_house = ami80, ami100_house = ami100, ami150_house = ami150, ami200_house = ami200) ami_table_19 &lt;- data.frame( hh_size = rep(1:12), ami30 = c(16050, 18350, 21330, 25750, 30170, 34590, 39010, 43430, plyr::round_any(43430 + (43430 / 1.32 * 0.08) * 1:4, 50, ceiling)), ami50 = c(26750, 30600, 34400, 38200, 41300, 44350, 47400, 50450, plyr::round_any(50450 + (50450 / 1.32 * 0.08) * 1:4, 50, ceiling)), ami80 = c(42800, 48900, 55000, 61100, 66000, 70900, 75800, 80700, plyr::round_any(75550 + (75550 / 1.32 * 0.08) * 1:4, 50, ceiling)), ami100 = plyr::round_any(76400 * mult, 50, ceiling), ami150 = plyr::round_any(76400 * mult * 1.5, 50, ceiling), ami200 = plyr::round_any(76400 * mult * 2, 50, ceiling)) # Calculate household size, subset, and add AMI dataframe acs_micro %&lt;&gt;% filter( FIPS == &quot;21111&quot;, year %in% 2015:2019, OWNERSHP != 0) %&gt;% group_by(year, SERIAL) %&gt;% mutate(hh_size = n()) %&gt;% ungroup() %&gt;% filter(PERNUM == 1) # Calculate adjustment factor for renters who did not report utilty information utility_adjust &lt;- acs_micro %&gt;% filter( #vacant | RENTGRS &gt; RENT) %&gt;% mutate(utility_est = (RENTGRS - RENT) / RENT) %&gt;% summarise(utiity_est = Hmisc::wtd.quantile(utility_est, HHWT, probs = 0.5, na.rm = T)) %&gt;% pull(utiity_est) %&gt;% unname() # Process microdata acs_micro %&lt;&gt;% mutate( # Recode missing values OWNCOST = replace(OWNCOST, OWNCOST == 99999, NA), HHINCOME = replace(HHINCOME, HHINCOME == 99999, NA), OWNERSHP = replace(OWNERSHP, OWNERSHP == 0, NA), RENTGRS = case_when( RENTGRS == 0 &amp; OWNERSHP == 1 ~ NA_real_, RENTGRS == RENT ~ RENT * (1 + utility_adjust), TRUE ~ RENTGRS), BEDROOMS = case_when( BEDROOMS == 0 ~ NA_real_, BEDROOMS &gt;= 1 ~ BEDROOMS -1), # calculate homeownership and cost burden homeownership = if_else(OWNERSHP == 1, 1, 0), hcost = if_else(homeownership == 1, OWNCOST, RENTGRS), cost_burden = if_else(hcost * 12 / HHINCOME &gt; 0.3, 1, 0), severe_cost_burden = if_else(hcost * 12 / HHINCOME &gt; 0.5, 1, 0), hh_type = case_when( homeownership == 1 &amp; cost_burden == 0 ~ &quot;noncb_homeowner&quot;, homeownership == 1 &amp; cost_burden == 1 ~ &quot;cb_homeowner&quot;, homeownership == 0 &amp; cost_burden == 0 ~ &quot;noncb_renter&quot;, homeownership == 0 &amp; cost_burden == 1 ~ &quot;cb_renter&quot;, TRUE ~ NA_character_)) %&gt;% # Adjust HHICOME for inflation COLA(HHINCOME, base_year = 2019, rpp = F) %&gt;% left_join(ami_table_19, by = &quot;hh_size&quot;) %&gt;% mutate( hh_ami_group = case_when( HHINCOME &lt; ami30 ~ 30, HHINCOME &lt; ami50 ~ 50, HHINCOME &lt; ami80 ~ 80, HHINCOME &lt; ami100 ~ 100, HHINCOME &lt; ami150 ~ 150, HHINCOME &lt; ami200 ~ 200, TRUE ~ Inf)) # Tidy data for unoccupied houses acs_houses_unoccupied %&lt;&gt;% mutate( vacancy = case_when( VACANCY == 0 ~ &quot;occupied&quot;, VACANCY %in% 1:2 ~ &quot;available&quot;, VACANCY %in% 3:9 ~ &quot;unavailable&quot;)) %&gt;% filter(vacancy %in% c(&quot;available&quot;)) %&gt;% transmute( FIPS, year, HHWT, homeownership = if_else(VACANCY == 2, 1, 0), RENTGRS = RENT * (1 + utility_adjust), RENT, VALUEH, BEDROOMS = case_when( BEDROOMS == 0 ~ NA_real_, BEDROOMS &gt;= 1 ~ BEDROOMS -1), VACANCY) # Bind data to occupied houses acs_houses &lt;- acs_micro %&gt;% bind_rows(acs_houses_unoccupied) %&gt;% # Adjust for inflation COLA(RENTGRS, VALUEH, base_year = 2019, rpp = F) %&gt;% mutate( # Reverse cost-burden calc to test AMI category of home # Per HNA, mortgage of $279,307 corresponds to a rent ceiling of $1,787 est_cost = case_when( homeownership == 0 ~ RENTGRS * 12, homeownership == 1 ~ VALUEH / 279307 * 1787 * 12), min_income = est_cost / 0.3, br_pp = min_income * mult[BEDROOMS + 1], br_p1.5p = min_income * mult_br[BEDROOMS + 1], ami_pct = br_p1.5p / 71500 * 100, adj_income = HHINCOME * mult[hh_size]) %&gt;% mutate( # house_ami_group = case_when( # br_p1.5p &lt; (71500 * 0.3) ~ 30, # br_p1.5p &lt; (71500 * 0.5) ~ 50, # br_p1.5p &lt; (71500 * 0.8) ~ 80, # br_p1.5p &lt; (71500 * 1) ~ 100, # br_p1.5p &lt; (71500 * 1.5) ~ 150, # br_p1.5p &lt; (71500 * 2) ~ 200, # TRUE ~ Inf)) %&gt;% house_ami_group = case_when( br_p1.5p &lt; (76400 * 0.3) ~ 30, br_p1.5p &lt; (76400 * 0.5) ~ 50, br_p1.5p &lt; (76400 * 0.8) ~ 80, br_p1.5p &lt; (76400 * 1) ~ 100, br_p1.5p &lt; (76400 * 1.5) ~ 150, br_p1.5p &lt; (76400 * 2) ~ 200, TRUE ~ Inf)) %&gt;% mutate( hh_ami_group = replace_na(hh_ami_group, 0), available = if_else(VACANCY %in% 1:2 | adj_income &gt;= br_p1.5p, 1, 0)) %&gt;% #available = if_else(VACANCY %in% 1:2 | hh_ami_group &lt;= house_ami_group, 1, 0)) %&gt;% select(year, HHWT, RENT, RENTGRS, VALUEH, VACANCY, OWNERSHP, BEDROOMS, hh_size, homeownership, hh_ami_group, est_cost, min_income, br_pp, br_p1.5p, ami_pct, house_ami_group, available) results_people &lt;- acs_micro %&gt;% group_by(homeownership, hh_ami_group) %&gt;% summarise(households = sum(HHWT) / 5, .groups = &quot;drop&quot;) %&gt;% rename(ami_group = hh_ami_group) sum_avail &lt;- function(df, value) { filter(df, hh_ami_group &lt;= value, house_ami_group &lt;= value) %&gt;% group_by(homeownership) %&gt;% summarise( ami_group = value, houses = sum(HHWT) / 5, .groups=&quot;drop&quot;) } results_30 &lt;- sum_avail(acs_houses, 30) results_50 &lt;- sum_avail(acs_houses, 50) results_80 &lt;- sum_avail(acs_houses, 80) results_100 &lt;- sum_avail(acs_houses, 100) results_150 &lt;- sum_avail(acs_houses, 150) results_200 &lt;- sum_avail(acs_houses, 200) results_Inf &lt;- sum_avail(acs_houses, Inf) results_houses &lt;- bind_rows(results_30, results_50, results_80, results_100, results_150, results_200, results_Inf) # actual &lt;- data.frame( # homeownership = c(rep(0:1, each = 7)), # level = rep(c(30, 50, 80, 100, 150, 200, Inf), 2), # report_num = c(17563, 46023, 89538, 98513, 115443, 121556, NA_real_, 8404, 19788, 54031, 75898, 120394, 148999, NA_real_)) # results_houses %&lt;&gt;% # left_join(actual) %&gt;% # mutate(dif = (freq - report_num) / report_num * 100) results &lt;- full_join(results_people, results_houses) library(ggtext) results %&lt;&gt;% group_by(ami_group) %&gt;% summarise(across(households:houses, sum), .groups = &quot;drop&quot;) group_avail &lt;- function(df, value) { df %&gt;% filter(ami_group &lt;= value) %&gt;% mutate(ami = value) } results$houses[2:7] = results$houses[2:7] - results$houses[1:6] results %&lt;&gt;% mutate( households_cumsum = cumsum(households), homes_cumsum = cumsum(houses), lab_color = viridis(7, direction = -1)[2:7][match(ami_group, c(30, 50, 80, 100, 150, 200))], label = paste0(&quot;&lt;span style=&#39;font-size:36pt&#39;&gt;&quot;, scales::percent(homes_cumsum / households_cumsum, accuracy = 1), &quot;&lt;/span&gt;&quot;, &quot;&lt;span style=&#39;font-size:12pt&#39;&gt;&lt;br&gt;of households&lt;br&gt;up to&lt;br&gt;&lt;/span&gt;&quot;, &quot;&lt;span style=&#39;font-size:20pt; face:bold; color:&quot;, lab_color, &quot;&#39;&gt;&quot;, ami_group, &quot;% AMI&quot;, &quot;&lt;/span&gt;&quot;)) results_30 &lt;- group_avail(results, 30) results_50 &lt;- group_avail(results, 50) results_80 &lt;- group_avail(results, 80) results_100 &lt;- group_avail(results, 100) results_150 &lt;- group_avail(results, 150) results_200 &lt;- group_avail(results, 200) results_graph &lt;- bind_rows(results_30, results_50, results_80, results_100, results_150, results_200) results_graph %&lt;&gt;% pivot_longer(households:houses, names_to = &quot;obs_type&quot;, values_to = &quot;value&quot;) %&gt;% mutate( ami_group = factor(ami_group, levels = c(200, 150, 100, 80, 50, 30), labels = c(200, 150, 100, 80, 50, 30), ordered = T), ami = factor(ami, labels = unique(label))) %&gt;% arrange(ami_group) ggplot(results_graph, aes(x = obs_type, y = value, fill = ami_group)) + geom_col(position = &#39;stack&#39;) + scale_fill_manual(values = viridis(7, direction = -1)[2:7], breaks = rev(c(200, 150, 100, 80, 50, 30)), guide = guide_legend(reverse = TRUE), name = &quot;AMI Group&quot;) + facet_grid(~ ami) + theme_bw(base_family = &quot;Montserrat&quot;, base_size = 22) + theme( panel.grid = element_blank(), panel.spacing.y = element_blank(), axis.text.y = element_blank(), axis.text.x = element_markdown(margin=margin(-20)), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), strip.background = element_blank(), plot.subtitle = element_text(hjust = 0, lineheight = 0.5), legend.title = element_text(size = 24), strip.text.x = element_markdown(lineheight = 0.6), strip.placement = &quot;outside&quot;, plot.title = element_text(size = 32), plot.caption = element_text(size = 16, lineheight = 0.5, hjust = 0)) + scale_y_continuous(expand = c(.15, 0)) + geom_text( aes(label = scales::number(stat(y), scale = .001, accuracy = 1, suffix = &quot;K&quot;), group = ami), stat = &#39;summary&#39;, fun = sum, vjust = -1, size = 6, family = &quot;Montserrat&quot;) + labs(title = &quot;Affordability Gaps&quot;, subtitle = &quot;There are enough available and affordable homes for...&quot;, caption = &quot;Within each group, the bar on the left represents the number of households at that income level\\nand the bar on the right represents the number of homes that are available and affordable to them.&quot;) + scale_x_discrete( name = NULL, labels = c(households = &quot;&lt;img src=&#39;001-family.png&#39; width=&#39;16&#39;/&gt;&quot;, houses = &quot;&lt;img src=&#39;002-house-black-silhouette-without-door.png&#39; width=&#39;16&#39;/&gt;&quot;)) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) The table below shows the cutoffs for family income, monthly rent, and home purchase prices for each AMI group. We group residents by percentages of the Area Median Income (AMI) as determined by the Department of Housing and Urban Development. In 2019, the AMI for a four-person household in Louisville was $76,300. Median income means 50% of four-person families earned less than the AMI, and 50% earned more. The AMI is adjusted down for smaller households and up for larger households. For example, the AMI for a person living alone is $54,000, and the AMI for a six-person household is $89,000. Households in the 30% AMI income group have income less than or equal to the Federal Poverty Level (about 30% of $76,300). Households in the 50% AMI group have income between the Federal Poverty Level and 50% of the AMI. Households in the 80% AMI income group have income between 50% of the AMI and 80% of the AMI, and so on for higher AMI levels. We group homes and apartments by AMI by determining the minimum income needed for a household to live there affordably (without spending more than 30% of their income on housing costs). We adjust housing costs by bedroom size to align with how the AMI for households is adjusted by household size. We determine the AMI group of apartments using monthly rent and utilities. We determine the AMI group of homes based on the value of the home in order to measure the affordability of homeownership for new buyers, rather than cost-burden for existing homeowners. Based on the conversion used in the Housing Needs Assessment, we calculate that the annual cost of homeownership is about 1/13th of the homes value. More details on the methodology can be found in the Housing Needs Assessment and the Housing Needs Assessment Methodology: https://loutrustfund.org/wp-content/uploads/2019/02/HNA_Appendix_190130.pdf https://secureservercdn.net/166.62.110.60/7nm.5c8.myftpupload.com/wp-content/uploads/2019/02/HNA_FINAL_190222.pdf ami_table_19 &lt;- data.frame( hh_size = rep(1:12), ami30 = c(16050, 18350, 21330, 25750, 30170, 34590, 39010, 43430, plyr::round_any(43430 + (43430 / 1.32 * 0.08) * 1:4, 50, ceiling)), ami50 = c(26750, 30600, 34400, 38200, 41300, 44350, 47400, 50450, plyr::round_any(50450 + (50450 / 1.32 * 0.08) * 1:4, 50, ceiling)), ami80 = c(42800, 48900, 55000, 61100, 66000, 70900, 75800, 80700, plyr::round_any(75550 + (75550 / 1.32 * 0.08) * 1:4, 50, ceiling)), ami100 = plyr::round_any(76400 * mult, 50, ceiling), ami150 = plyr::round_any(76400 * mult * 1.5, 50, ceiling), ami200 = plyr::round_any(76400 * mult * 2, 50, ceiling)) ami_table_19 %&lt;&gt;% pivot_longer(ami30:ami200, names_to = &quot;ami&quot;, values_to = &quot;value&quot;) %&gt;% mutate( rent = value * 0.3 / 12, mortgage = rent / 1787 * 279307) %&gt;% pivot_wider(names_from = ami, values_from = value:mortgage) library(gt) ami_19 &lt;- ami_table_19 %&gt;% gt() %&gt;% tab_header(title = &quot;Area Median Incomes, Rents, and Purchase Price Limits by Household Size&quot;) %&gt;% fmt_currency(columns = vars(value_ami30, value_ami50, value_ami80, value_ami100, value_ami150, value_ami200, mortgage_ami30, mortgage_ami50, mortgage_ami80, mortgage_ami100, mortgage_ami150, mortgage_ami200), decimals = 0, suffixing =T) %&gt;% fmt_currency(columns = vars(rent_ami30, rent_ami50, rent_ami80, rent_ami100, rent_ami150, rent_ami200), decimals = 1, suffixing =T) %&gt;% cols_label( hh_size = &quot;Household Size&quot;, value_ami30 = &quot;Annual Income&quot;, value_ami50 = &quot;Annual Income&quot;, value_ami80 = &quot;Annual Income&quot;, value_ami100 = &quot;Annual Income&quot;, value_ami150 = &quot;Annual Income&quot;, value_ami200 = &quot;Annual Income&quot;, rent_ami30 = &quot;Monthly Rent Ceiling&quot;, rent_ami50 = &quot;Monthly Rent Ceiling&quot;, rent_ami80 = &quot;Monthly Rent Ceiling&quot;, rent_ami100 = &quot;Monthly Rent Ceiling&quot;, rent_ami150 = &quot;Monthly Rent Ceiling&quot;, rent_ami200 = &quot;Monthly Rent Ceiling&quot;, mortgage_ami30 = &quot;Purchase Price Ceiling&quot;, mortgage_ami50 = &quot;Purchase Price Ceiling&quot;, mortgage_ami80 = &quot;Purchase Price Ceiling&quot;, mortgage_ami100 = &quot;Purchase Price Ceiling&quot;, mortgage_ami150 = &quot;Purchase Price Ceiling&quot;, mortgage_ami200 = &quot;Purchase Price Ceiling&quot;) %&gt;% # cols_move(columns = vars(perc_cost_burdened_under_35k, perc_renters, perc_poverty_12mnth, perc_unemployed_laborforce, perc_overcrowding_renter_1.50_or_more, housing_instability_index), # after = vars(district)) %&gt;% tab_spanner( label = &quot;30% AMI&quot;, columns = vars(value_ami30, rent_ami30, mortgage_ami30) ) %&gt;% tab_spanner( label = &quot;50% AMI&quot;, columns = vars(value_ami50, rent_ami50, mortgage_ami50) ) %&gt;% tab_spanner( label = &quot;80% AMI&quot;, columns = vars(value_ami80, rent_ami80, mortgage_ami80) ) %&gt;% tab_spanner( label = &quot;100% AMI&quot;, columns = vars(value_ami100, rent_ami100, mortgage_ami100) ) %&gt;% tab_spanner( label = &quot;150% AMI&quot;, columns = vars(value_ami150, rent_ami150, mortgage_ami150) ) %&gt;% tab_spanner( label = &quot;200% AMI&quot;, columns = vars(value_ami200, rent_ami200, mortgage_ami200) ) %&gt;% cols_align(align = &quot;center&quot;) %&gt;% tab_source_note( source_note = md(&quot;Greater Louisville Project&quot;) ) %&gt;% tab_source_note( source_note = md(&quot;Analysis framework from the 2019 Housing Needs Assessment.&quot;) ) %&gt;% opt_row_striping(row_striping = TRUE) %&gt;% opt_table_outline() %&gt;% tab_options( table.font.size = px(12), table.width = pct(50) ) ami_19 "],["early-childhood.html", "Chapter 4 Early Childhood 4.1 Introduction 4.2 Kindergarten Readiness 4.3 Early Child Care 4.4 Child Health", " Chapter 4 Early Childhood 4.1 Introduction The first few years of a childs life provide the building blocks for lifelong learning and health. While Louisville has a large ecosystem of people, businesses, and organizations that support early childhood development, many families across Louisville face barriers to accessing those resources. This report analyzes one way to evaluate early childhood developmentkindergarten readinessas well as several factors that impact it: the cost and availability of child care, adverse childhood experiences, and food security. We chose these data based on community interest and with the aim of illuminating topics for which local data is not widely available. Wherever possible, we analyze the connection between race, geography, and early childhood development. Louisvilles early childhood system does not support all populations equally as a result of institutional racism, residential segregation, discriminatory policies, and many other factors. In support of A Path Forward, we focus on Black children in particular. However, structural racism does not just affect Black children, and exclusionary policies affect people based on more identities than their race and ethnicity. While we provide some data that extends beyond race, data for other races and populations in our community is often limited, a problem in its own right. The Greater Louisville Project created this report in conjunction with the ReadyforK Alliance, whose vision is that all children enter kindergarten ready to thrive. 4.2 Kindergarten Readiness Kindergarten readiness is an important indicator of whether children will succeed in the classroom. Based on data from KySTATS, JCPS students who entered school ready for kindergarten in 2016 were over three times as likely to achieve test results at or above their grade level on their standardized K-PREP math and reading tests in the 3rd grade. This is true for both JCPS students as a whole and Black JCPS students in particular. Kentucky school districts evaluate kindergarten readiness using the BRIGANCE Early Childhood Kindergarten Screen III, which assesses child development across five areas: Academic/Cognitive Development Language Development Physical Development Self-help Skills Social and Emotional Skills The BRIGANCE screener asks children to perform tasks such as identifying letters, numbers, and shapes or using a writing utensil. Parents provide information on their childs self-help, social, and emotional skills such as whether their child can dress themselves, communicate their feelings, or take turns with other children. The results are a strong indicator of a students future academic performance. It is important to note that the BRIGANCE screener has limitations. For example, children in professional care facilities are more likely to receive instruction tailored to the BRIGRANCE screener than children in a home setting with their parents or a relative. While many of the topics and questions represent important developmental foundations, child development includes factors beyond just the questions in BRIGANCE. Its important to communicate the topics in BRIGRANCE to all families as well as ensure the questions in BRIGRANCE are not culturally biased. You can see some of the questions included in BRIGANCE here: Example child assessment (academic, language, and physical measures) Example parent report (self-help, social, and emotional skills) To view more data on kindergarten readiness, you can visit our Kindergarten Readiness page. 4.2.1 Overall Readiness Since JCPS began tracking kindergarten readiness in 2012-13, overall readiness levels have fluctuated up to five percentage points per year but have remained largely unchanged. Other Kentucky students have seen their scores slightly increase. load(&quot;early-childhood/raw_data/kready_ky.RData&quot;) kready_ky %&lt;&gt;% mutate(year = year - 1) kready_total &lt;- kready_ky %&gt;% filter(sex == &quot;total&quot;, race == &quot;total&quot;, frl_status == &quot;total&quot;, prior_setting == &quot;All Students&quot;) %&gt;% filter(variable %in% c(&quot;lou&quot;, &quot;mean&quot;)) %&gt;% mutate(District = if_else(variable == &quot;lou&quot;, &quot;JCPS&quot;, &quot;Other Kentucky Districts&quot;)) plt_by(kready_total, District, kready, title_text = &quot;Kindergarten Readiness&quot;, caption_text = &quot;Source: Greater Louisville Project Data from the Kentucky Department of Education School Report Card&quot;, school = T, y_min = 40, ymax = 60) 4.2.2 by Race Racial disparities in kindergarten readiness have been largely persistent since the 2012-13 school year. The kindergarten readiness gap between Black students and white students shrank from 12 points in 2012-13 to around 5 points in 2016-17 before growing again. As of the 2018-19 school year, scores for the four groups included here are all within five points of their original levels. kready_race &lt;- kready_ky %&gt;% filter(variable == &quot;lou&quot;, sex == &quot;total&quot;, race %in% c(&quot;black&quot;, &quot;white&quot;, &quot;hispanic&quot;, &quot;asian&quot;), frl_status == &quot;total&quot;, prior_setting == &quot;All Students&quot;) %&gt;% mutate(Race = str_to_title(race)) plt_by(kready_race, Race, kready, school = T, title_text = &quot;JCPS Kindergarten Readiness by Race&quot;, caption_text = &quot;Source: Greater Louisville Project Data from the Kentucky Department of Education School Report Card&quot;) 4.2.3 by Prior Setting The largest differences among kindergarten studnets are based on prior setting. Children who were in licensed child care providers prior to entering school are most likely to be kindergarten ready, while children who stayed at home with a parent or guardian are least likely to be kindergarten ready. Children who were previously enrolled in Head Start, a State-funded preschool program, or were in another home setting such as a private sitter or other family member (labeled Other), fall in the middle. kready_louisville &lt;- kready_ky %&gt;% filter(variable == &quot;lou&quot;, sex == &quot;total&quot;, race == &quot;total&quot;, frl_status == &quot;total&quot;, prior_setting %in% c(&quot;State Funded&quot;, &quot;Head Start&quot;, &quot;Child Care&quot;, &quot;Home&quot;, &quot;Other&quot;)) %&gt;% mutate(prior_setting = if_else(prior_setting == &quot; State Funded&quot;, &quot;State-Funded&quot;, prior_setting)) kready_louisville2 &lt;- kready_ky %&gt;% filter(variable == &quot;lou&quot;, sex == &quot;total&quot;, race %in% c(&quot;black&quot;, &quot;total&quot;), frl_status == &quot;total&quot;, prior_setting %in% c(&quot;State Funded&quot;, &quot;Head Start&quot;, &quot;Child Care&quot;, &quot;Home&quot;, &quot;Other&quot;)) %&gt;% mutate(prior_setting = if_else(prior_setting == &quot; State Funded&quot;, &quot;State-Funded&quot;, prior_setting)) plt_by(kready_louisville, prior_setting, kready, school = T, title_text = &quot;JCPS Kindergarten Readiness by Prior Setting&quot;, caption_text = &quot;Source: Greater Louisville Project Data from the Kentucky Department of Education School Report Card&quot;, remove_legend_title = T) 4.2.3.1 Prior setting by Race The graph below shows the prior setting of students entering JCPS kindergarten in 2019. About 60% of students were enrolled in a child care program or preschool outside the home, and around 40% of students were at home with their parents or another caretaker. Students who are White, Asian, American Indian or Alaska Native, or of two or more races are more likely than average to be enrolled in professional care setting outside of the home before entering JCPS. Students who are Black are much less likely to be enrolled in professional child care, but much more likely to be enrolled in State Funded preschool. Hispanic students and students whose race is not known are much more likely to be in a home setting. prior_setting_race &lt;- readxl::read_excel(&quot;early-childhood/raw_data/ORR DRMS 9969 MetroUnitedWay.xlsx&quot;, sheet = &quot;Race&quot;, skip = 1) prior_setting_race %&lt;&gt;% pivot_longer(cols = `State Funded`:Other, names_to = &quot;Prior Setting&quot;, values_to = &quot;count&quot;) %&gt;% filter(!is.na(count)) %&gt;% group_by(Race) %&gt;% mutate( percent = count / sum(count) * 100, count = scales::comma(count, accuracy = 1)) %&gt;% ungroup() %&gt;% mutate( Race = if_else(Race == &quot;Grand Total&quot;, &quot;All JCPS Students&quot;, Race), Race = if_else(Race == &quot;White (Non-Hispanic)&quot;, &quot;White&quot;, Race), Race = if_else(Race == &quot;African American&quot;, &quot;Black&quot;, Race), Race = factor(Race, levels = rev(c(&quot;All Students&quot;, &quot;American Indian or Alaska Native&quot;, &quot;Asian&quot;, &quot;Black&quot;, &quot;Hispanic&quot;, &quot;White&quot;, &quot;Two or more races&quot;, &quot;Unknown&quot;)), ordered = TRUE), `Prior Setting` = factor(`Prior Setting`, levels = rev(c(&quot;Child Care&quot;, &quot;State Funded&quot;, &quot;Head Start&quot;, &quot;Other&quot;, &quot;Home&quot;)), ordered = TRUE)) plot_ly(prior_setting_race, x = ~percent, y = ~Race, color = ~`Prior Setting`, colors = c(&quot;Child Care&quot; = &quot;#d63631&quot;, &quot;State Funded&quot; = &quot;#323844&quot;, &quot;Head Start&quot; = &quot;#eaab21&quot;, &quot;Other&quot; = &quot;#a7bfd7&quot;, &quot;Home&quot; = &quot;#7CE3B6&quot;), text = ~`count`, type = &#39;bar&#39;, hovertemplate = paste(&#39;Percent: %{x:.1f}%&lt;br&gt;Count: %{text}&lt;extra&gt;&lt;/extra&gt;&#39;)) %&gt;% layout( title = &quot;JCPS Prior Setting by Race&quot;, font = list(family = &quot;Montserrat&quot;), barmode = &#39;stack&#39;, yaxis = list(title = &quot;&quot;), xaxis = list(title = &quot;Percent&quot;), legend = list(title = list(text = &quot;Prior Setting&quot;))) 4.2.3.2 Prior setting by Zip Code Among children who enter JCPS, children in the Highlands and in Eastern Louisville are more likely than average to be enrolled in professional child care before entering JCPS. Children in West Louisville are most likely to be enrolled in State Funded preschool at JCPS, and children in South Louisville are most likely to be in a home setting. prior_setting_zip &lt;- readxl::read_excel(&quot;early-childhood/raw_data/ORR DRMS 9969 MetroUnitedWay.xlsx&quot;, sheet = &quot;Zip Code&quot;, skip=1) prior_setting_zip %&lt;&gt;% mutate( zip = `Zip Code`, total_students = `State Funded` + `Head Start` + `Child Care` + Home + Other) %&gt;% mutate(across(`State Funded`:`Other`, ~ . / total_students * 100)) %&gt;% filter(!is.na(zip)) prior_setting_map &lt;- map_zip %&gt;% left_join(prior_setting_zip, by = &quot;zip&quot;) pal &lt;- colorNumeric(&quot;viridis&quot;, domain = c(0, 75)) leaflet(prior_setting_map) %&gt;% addTiles() %&gt;% addPolygons( color = &quot;#444444&quot;, fillOpacity = 0.9, weight = 2, smoothFactor = 0.5, fillColor = ~pal(`Child Care`), group = &quot;Child Care&quot;) %&gt;% addPolygons( color = &quot;#444444&quot;, fillOpacity = 0.9, weight = 2, smoothFactor = 0.5, fillColor = ~pal(`State Funded`), group = &quot;State Funded&quot;) %&gt;% addPolygons( color = &quot;#444444&quot;, fillOpacity = 0.9, weight = 2, smoothFactor = 0.5, fillColor = ~pal(`Head Start`), group = &quot;Head Start&quot;) %&gt;% addPolygons( color = &quot;#444444&quot;, fillOpacity = 0.9, weight = 2, smoothFactor = 0.5, fillColor = ~pal(`Home`), group = &quot;Home&quot;) %&gt;% addPolygons( color = &quot;#444444&quot;, fillOpacity = 0.9, weight = 2, smoothFactor = 0.5, fillColor = ~pal(`Other`), group = &quot;Other&quot;) %&gt;% addLegend(pal = pal, values = c(0, 75), opacity = 0.7, title = &quot;Percent&quot;) %&gt;% addLayersControl(baseGroups = c(&quot;Child Care&quot;, &quot;State Funded&quot;, &quot;Head Start&quot;, &quot;Home&quot;, &quot;Other&quot;), options = layersControlOptions(collapsed = F)) 4.2.4 by Race and Prior setting Combining the analysis by race and prior setting shows which settings are most effective at ensuring children enter kindergarten ready to learn. Click on the dropdown box on the right of the graph to toggle the prior setting. Among the groups we examine here, the smallest racial disparities exist among children who were previously enrolled in Head Start or state-funded preschool. This is likely due to the fact that families must meet certain income limits to enroll their children in these programs, so children in these programs come from families with common economic situations. Black and Brown children in these settings enter kindergarten with relatively high readiness rates, and they have seen improvements since 2013-14. Students in professional child care settings are the most kindergarten ready; however, racial disparities for these children are wider than for children in all other settings. As will be discussed later, this reflects differences in access to affordable and high-quality child care. Differences in kindergarten readiness among children who were previously in a home setting with their parents (Home) or in another home-based setting (Other) are difficult to interpret because it reflects a wide variety of experiences for children. On average, children who were previously at home with their parents enter kindergarten the least ready to learn. kready_race_plotly &lt;- kready_ky %&gt;% filter(variable == &quot;lou&quot;, sex == &quot;total&quot;, race %in% c(&quot;black&quot;, &quot;white&quot;, &quot;hispanic&quot;, &quot;asian&quot;), frl_status == &quot;total&quot;, prior_setting %in% c(&quot;All Students&quot;, &quot;State Funded&quot;, &quot;Head Start&quot;, &quot;Child Care&quot;, &quot;Home&quot;, &quot;Other&quot;)) %&gt;% mutate(race = str_to_title(race)) %&gt;% pivot_wider(names_from = race, values_from = kready) %&gt;% mutate(year_label = paste0(year - 1, &quot;-&quot;, year - 2000)) trnfm_list &lt;- list( list( type = &#39;filter&#39;, target = ~prior_setting, operation = &#39;in&#39;, value = unique(kready_race_plotly$prior_setting)[1])) plot_ly(kready_race_plotly, width = &quot;100%&quot;) %&gt;% add_trace(x = ~year_label, y = ~Asian, name = &quot;Asian&quot;, type = &quot;scatter&quot;, mode = &quot;lines&quot;, line = list(color = &#39;#a7bfd7&#39;, width = 2), marker = list(color = &#39;#a7bfd7&#39;, size = 6), transforms = trnfm_list) %&gt;% add_trace(x = ~year_label, y = ~Black, name = &quot;Black&quot;, type = &quot;scatter&quot;, mode = &quot;lines&quot;, line = list(color = &#39;#d63631&#39;, width = 2), marker = list(color = &#39;#d63631&#39;, size = 6), transforms = trnfm_list) %&gt;% add_trace(x = ~year_label, y = ~Hispanic, name = &quot;Hispanic&quot;, type = &quot;scatter&quot;, mode = &quot;lines&quot;, line = list(color = &#39;#eaab21&#39;, width = 2), marker = list(color = &#39;#eaab21&#39;, size = 6), transforms = trnfm_list) %&gt;% add_trace(x = ~year_label, y = ~White, name = &quot;White&quot;, type = &quot;scatter&quot;, mode = &quot;lines&quot;, line = list(color = &#39;#323844&#39;, width = 2), marker = list(color = &#39;#323844&#39;, size = 6), transforms = trnfm_list) %&gt;% layout(title = &quot;JCPS Kindergerten Readiness by Race&quot;, font = list(family = &quot;Montserrat&quot;), xaxis = list(title = &quot;Year&quot;), yaxis = list(title = &quot;Percent Ready&quot;, range = c(0, 100)), hovermode = &quot;x unified&quot;, updatemenus = list( list( x = 1.25, y = 0.75, buttons = list( list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(kready_race_plotly$prior_setting)[1]), label = unique(kready_race_plotly$prior_setting)[1]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(kready_race_plotly$prior_setting)[2]), label = unique(kready_race_plotly$prior_setting)[2]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(kready_race_plotly$prior_setting)[3]), label = unique(kready_race_plotly$prior_setting)[3]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(kready_race_plotly$prior_setting)[4]), label = unique(kready_race_plotly$prior_setting)[4]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(kready_race_plotly$prior_setting)[5]), label = unique(kready_race_plotly$prior_setting)[5]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(kready_race_plotly$prior_setting)[6]), label = unique(kready_race_plotly$prior_setting)[6]))))) 4.2.5 by Geography 4.2.5.1 Student Zip Code This data was acquired through a data request to JCPS. Note that this data only includes parents who send their children to JCPS, so does not include children who attend private school or who are homeschooled. The data show wide disparities in kindergarten readiness across Louisville. Because some zip codes contain small numbers of students, we combine data over three years to increase the reliability of the data. Kindergarten readiness by zip code ranges from 30% in 40118 to 81% in 40205. # Kready math # ready w/ enrichments * (% distinguished + % proficient) ready_prof_dist_math = (643 * (.317 + .353) + 2956 * (.122 + .355)) / (643 * (1 - .143) + 2956 * (1 - .111)) * 100 not_ready_prof_dist_math = 3886 * (.034 + .160) / 3886 * (1 - .111) * 100 mult_math = ready_prof_dist_math / not_ready_prof_dist_math # Kready reading ready_prof_dist_reading = (643 * (.463 + .235) + 2956 * (.219 + .309)) / (643 * (1 - .143) + 2956 * (1 - .111)) * 100 not_ready_prof_dist_reading = 3886 * (.057 + .165) / 3886 * (1 - .111) * 100 mult_reading = ready_prof_dist_reading / not_ready_prof_dist_reading # black children # ready w/ enrichments * (% distinguished + % proficient) ready_prof_dist_math = (149 * (.148 + .376) + 940 * (.044 + .234)) / (149 * (1 - .067) + 940 * (1 - .089)) * 100 not_ready_prof_dist_math = 1443 * (.013 + .089) / 1443 * (1 - .090) * 100 mult_math_black = ready_prof_dist_math / not_ready_prof_dist_math # Kready reading ready_prof_dist_reading = (149 * (.275 + .248) + 940 * (.091 + .240)) / (149 * (1 - .067) + 940 * (1 - .089)) * 100 not_ready_prof_dist_reading = 1443 * (.019 + .106) / 1443 * (1 - .090) * 100 mult_reading_black = ready_prof_dist_reading / not_ready_prof_dist_reading race_math = mult_math_black / mult_math race_reading = mult_reading_black / mult_reading # Ready in kready data kready_zip &lt;- readxl::read_excel(&quot;early-childhood/raw_data/Copy of 1920_Brigance Zip Code_Prior Settings TablesForORR.xlsx&quot;, sheet = &quot;ZipCode3Years&quot;, range =&quot;B4:K38&quot;, col_names = c(&quot;zip&quot;, paste0(c(&quot;num_&quot;, &quot;ready_&quot;, &quot;notready_&quot;), rep(2018:2020, each = 3))), col_types = c(&quot;text&quot;, rep(&quot;numeric&quot;, 9)), na = &quot;*&quot;) # Clean and organize data frame kready_zip %&lt;&gt;% pivot_longer(num_2018:notready_2020, names_to = c(&quot;var_type&quot;, &quot;year&quot;), names_sep = &quot;_&quot;) %&gt;% filter(var_type != &quot;notready&quot;) %&gt;% mutate( var_type = case_when(var_type == &quot;num&quot; ~ &quot;population&quot;, var_type == &quot;ready&quot; ~ &quot;percent&quot;)) %&gt;% transmute( zip, year, var_type, kready = if_else(var_type == &quot;percent&quot;, value * 100, value)) # Summarize data frame over three years due to unstable data kready_zip_sum &lt;- kready_zip %&gt;% pivot_wider(names_from = var_type, values_from = kready) %&gt;% group_by(zip) %&gt;% filter(all(!is.na(percent))) %&gt;% summarise( percent = weighted.mean(percent, population), population = sum(population), .groups = &quot;drop&quot;) %&gt;% rename(kready = percent) # Join data to map map_zip %&lt;&gt;% left_join(kready_zip_sum, by = &quot;zip&quot;) ggplot(map_zip) + geom_sf(aes(fill = kready), color = &quot;white&quot;) + #scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + viridis::scale_fill_viridis(na.value = &quot;grey&quot;, name = &quot;Percent Ready&quot;) + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank()) + labs(title = &quot;JCPS Kindergarden Readiness by Student&#39;s Home Zip Code&quot;, subtitle = &quot;Average for the school years 2017-2018, 2018-2019, and 2019-2020&quot;, caption_text = &quot;Source: Greater Louisville Project Data from JCPS&quot;) + theme(plot.caption = element_text(lineheight = .5)) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 4.2.5.2 School Location Elementary School Assignment Area This map shows kindergarten readiness results by school. The areas on the map represent student assignment areas for individual schools, and the thicker white lines show student assignment clusters. load(&quot;early-childhood/raw_data/kready_jc.RData&quot;) load(&quot;early-childhood/raw_data/map_elementary.RData&quot;) # Filter out kready_jc_subset &lt;- kready_jc %&gt;% filter(code != &quot;275&quot;, year == 2020, demographic == &quot;All Students&quot;, prior_setting == &quot;All Students&quot;) %&gt;% mutate(code = str_sub(code, 4, 6) %&gt;% as.numeric) map_elementary %&lt;&gt;% rename( SCHOOL_NAME = SCHOOL_NAM, LOCATION = LocNumber, CLUSTER = ClusterNum) map_elementary %&lt;&gt;% left_join(kready_jc_subset, by = c(&quot;LOCATION&quot; = &quot;code&quot;)) map_cluster &lt;- map_elementary %&gt;% group_by(CLUSTER) %&gt;% summarise( kready = weighted.mean(kready, num_students), .groups = &quot;drop&quot;) ggplot(map_elementary) + geom_sf(aes(fill = kready), color = &quot;white&quot;) + #scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + viridis::scale_fill_viridis(na.value = &quot;grey&quot;, name = &quot;Percent Ready&quot;) + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank()) + labs(title = &quot;JCPS Kindergarden Readiness by School Location, 2019-2020&quot;, caption_text = &quot;Source: Greater Louisville Project Data from the Kentucky Department of Education School Report Card&quot;) + theme(plot.caption = element_text(lineheight = .5)) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) + geom_sf(data = map_cluster, fill=NA, color = &quot;white&quot;, size = 1) Elementary School Cluster This map shows kindergarten readiness results by elementary school clusters. ggplot(map_cluster) + geom_sf(aes(fill = kready), color = &quot;white&quot;, size = 1) + #scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + viridis::scale_fill_viridis(na.value = &quot;grey&quot;, name = &quot;Percent Ready&quot;) + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank()) + labs(title = &quot;JCPS Kindergarden Readiness by School Cluster, 2019-2020&quot;, caption_text = &quot;Source: Greater Louisville Project Data from the Kentucky Department of Education School Report Card&quot;) + theme(plot.caption = element_text(lineheight = .5)) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 4.3 Early Child Care High quality, affordable, and accessible child care is important for our community. As discussed in the prior setting section above, children in a professional child care setting enter kindergarten with the highest levels of kindergarten readiness. Additionally, reliable child care is important to ensure that caretakers are able to work. However, child care is not affordable or accessible for many families. Using data from kynect, we examine the cost and availability of child care using information from child care providers. While providers should update their information anytime it changes, some data is not current, and many child care centers are in flux due to COVID-19. However, the kynect database is linked to the state registration system, and it is the most comprehensive source available at this time. While our data examines the total licensed capacity of child care providers, the number of available child care slots is smaller. Many providers have smaller actual capacity to maintain quality standards, due to issues retaining staff, or due to temporary barriers due to COVID-19. 4.3.1 Cost The median cost of child care for one toddler is $8,710 per year, approximately 15% of the median family income for Jefferson County in 2019. We report daily rates in the charts below because that is the format provided by kynect. The median annual rate of $8,710 corresponds to a daily rate of $33.50. 4.3.1.1 Comparison to CCAP The chart below shows the cost of child care by age group and provider type. The CCAP Reimbursement Cap column lists maximum reimbursement rates for the Kentuckys Child Care Assistance Program, and the column Percent of Slots under CCAP shows the percent of slots that would be fully paid for by CCAP. # Creates four data frames linked by license number (CLR) # provider_information: original file from the state. # includes provider name, address, and several other fields. # provider_hours: includes open days and hours # provider_cost: includes program offerings and cost # provider_service_offerings: includes which age ranges are available # provider_other: includes other available info. # Might just duplicate fields from program_information, though. # Infant: &lt;12 months # Toddler: between 12 and 24 months # School-age: child enrolled in kindergarten, elementary, or secondary education # Read in provider information (county, name, address, etc.) provider_information &lt;- readxl::read_xlsx(&quot;early-childhood/raw_data/Chilcare Provider Download.xlsx&quot;, skip = 2) # Subset to Jefferson County and rename license column for ease of use provider_information %&lt;&gt;% filter(County == &quot;JEFFERSON&quot;) %&gt;% rename(CLR = `CLR#`) %&gt;% filter(CLR != &quot;C6739&quot;) %&gt;% transmute( CLR, Name, Location = `Location Address`, Capacity, Transportation = if_else(`Transportation Service` == &quot;Y&quot;, T, F), STARS = as.numeric(`Stars Rating`), Type = `Provider Type`, active_CCAP = if_else(`Active CCAP Children` == &quot;Y&quot;, T, F), special_needs = case_when( `Serves Children with Special Needs` == &quot;Y&quot; ~ T, `Serves Children with Special Needs` == &quot;N&quot; ~ F, TRUE ~ NA), offerring = recode(`Age Range Of Service`, &quot;Infant&quot; = 1, &quot;Infant To School Age&quot; = 2, &quot;Infant To Two_To_School&quot; = 3, &quot;Toddler To Two_To_School&quot; = 4, &quot;Toddler To School_Age&quot; = 5, &quot;Two_To_School&quot; = 6, &quot;Two_To_School To School_Age&quot; = 7, &quot;School_Age&quot; = 8, &quot;No Information Available&quot; = 9), Infant = if_else(offerring %in% 1:3, T, F), Toddler = if_else(offerring %in% 2:5, T, F), Preschool = if_else(offerring %in% 2:7, T, F), School = if_else(offerring %in% c(2, 5, 7, 8), T, F)) %&gt;% mutate(across(Infant:School, ~ if_else(offerring == 9, NA, .))) %&gt;% select(-offerring) # Read in provider data collected from KYnect provider_data &lt;- read_csv(&quot;early-childhood/raw_data/Childcare Provider Cost Data.csv&quot;, col_names = c(&quot;CLR&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;Services&quot;, &quot;FullTime&quot;, &quot;PartTime&quot;, &quot;Other&quot;)) # Check that no data is missing a license number - PASSED # missing_CLR &lt;- provider_data %&gt;% # filter(is.na(CLR)) %&gt;% # filter(!is.na(Day) | !is.na(Time) | !is.na(Services) | # !is.na(FullTime) | !is.na(PartTime) | !is.na(Other)) # # # Check that the list of license numbers are identical - PASSED # check_data1 &lt;- mean(provider_information$CLR %in% provider_data$CLR) + # mean(provider_data$CLR %in% provider_information$CLR) # Check values and number of each variable # table(provider_data$Day) # good, 1 provider removed from listing # table(provider_data$Time) # good # table(provider_data$Services) # good # table(provider_data$FullTime) # good # table(test$PartTime) # often contains data for &quot;Other&quot; # table(provider_data$Other) # good # table(str_remove(provider_data$Other, &quot;\\\\d*&quot;)) # good # Filter out rows without license numbers (used to make data entry easier) # Remove C6739, which closed between the creation of the provider registry and data collection # Remove L355501, which is actually in Goshen provider_data %&lt;&gt;% filter(!is.na(CLR), CLR %not_in% c(&quot;C6739&quot;, &quot;L355501&quot;)) # The data for the &quot;Other&quot; column is often located in the PartTime column. # Group by license and determine whether the number of children is in the PartTime column. (should be in Other) # If so, move the data from the PartTime column to the Other column for that provider. provider_data %&lt;&gt;% group_by(CLR) %&gt;% mutate(move_PartTime = if_else(any(str_detect(PartTime, &quot;Children&quot;)), T, F), move_PartTime = if_else(is.na(move_PartTime), F, move_PartTime)) %&gt;% mutate(Other = if_else(move_PartTime, PartTime, Other), PartTime = if_else(move_PartTime, NA_character_, PartTime)) %&gt;% ungroup() %&gt;% select(-move_PartTime) # Hours data # Clean by filtering data to days of the week # Convert hour text to numbers provider_hours &lt;- provider_data %&gt;% select(CLR, Day, Time) %&gt;% filter(Day %in% c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;)) %&gt;% mutate( open_hour = as.numeric(str_extract(Time, &quot;^\\\\d{1,2}&quot;)), open_minutes = as.numeric(str_extract(Time, &quot;(?&lt;=:)\\\\d*&quot;)), open_period = str_extract(Time, &quot;.{2}(?= -)&quot;), close_hour = as.numeric(str_extract(Time, &quot;(?&lt;=- )\\\\d{1,2}&quot;)), close_minutes = as.numeric(str_extract(Time, &quot;(?&lt;=- .{1,2}:)\\\\d{1,2}&quot;)), close_period = str_extract(Time, &quot;.{2}$&quot;), open_hour = if_else(open_hour == 12, 0, open_hour), close_hour = if_else(close_hour == 12, 0, close_hour), open_time = open_hour + open_minutes / 60 + if_else(open_period == &quot;PM&quot;, 12, 0), close_time = close_hour + close_minutes / 60 + if_else(close_period == &quot;PM&quot;, 12, 0)) %&gt;% select(CLR, Day, Hours = Time, open_time, close_time) # Cost data # Multiple offerings for each age-group are labeled with numbers (e.g. Toddler 1, Toddler 2). Remove. # Clean by filtering data to type of service (infant, toddler, preschool, school age) # Average multiple offerings for the same provider and age group provider_cost &lt;- provider_data %&gt;% select(CLR, Services, FullTime, PartTime) %&gt;% mutate( Services = str_remove(Services, &quot; \\\\d&quot;), FullTime = as.numeric(FullTime), PartTime = as.numeric(PartTime)) %&gt;% filter(Services %in% c(&quot;Infant&quot;, &quot;Toddler&quot;, &quot;Preschool&quot;, &quot;School Age&quot;)) %&gt;% group_by(CLR, Services) %&gt;% summarise( FullTime = mean(FullTime), PartTime = mean(PartTime)) %&gt;% ungroup() # View number of different-cost options within each age group # provider_cost %&gt;% group_by(CLR, Services) %&gt;% summarise(n = n()) %&gt;% pull(n) %&gt;% table() # Other data provider_other &lt;- provider_data %&gt;% select(CLR, Other) # Column contains data labels/headers followed by data # Copy the data to a new column and shift it up one row to create key-value pairs provider_other$header &lt;- provider_other$Other provider_other$data &lt;- c(provider_other$Other[2:nrow(provider_other)], NA_character_) # Filter the data to rows where the header is in the header column. (Remove value-key pairs.) # Spread the data across columns provider_other %&lt;&gt;% select(-Other) %&gt;% filter(header %in% c(&quot;Capacity&quot;, &quot;CCCAP Subsidy&quot;, &quot;Acceditations&quot;, &quot;Food Permit&quot;, &quot;Transportation&quot;)) %&gt;% pivot_wider(names_from = header, values_from = data) %&gt;% transmute( CLR, Capacity = as.numeric(str_remove(Capacity, &quot; Children&quot;)), accepts_CCCAP = case_when(`CCCAP Subsidy` == &quot;Accepted&quot; ~ T, `CCCAP Subsidy` == &quot;No&quot; ~ F, TRUE ~ NA), food_permit = case_when(`Food Permit` == &quot;Yes&quot; ~ T, `Food Permit` == &quot;No&quot; ~ F, TRUE ~ NA), transportation = if_else(Transportation == &quot;Yes&quot;, T, F)) %&gt;% select(CLR, accepts_CCAP = accepts_CCCAP, food_permit) provider_information %&lt;&gt;% left_join(provider_other, by = &quot;CLR&quot;) # provider_information: original file from the state. # includes provider name, address, and several other fields. # provider_hours: includes open days and hours # provider_cost: includes program offerings and cost # provider_service_offerings: includes which age ranges are available # provider_other: includes other available info. # Might just duplicate fields from program_information, though. # Determine offerings for each provider based on the cost data provider_offerings_cost &lt;- provider_data %&gt;% filter(!is.na(Services)) %&gt;% group_by(CLR) %&gt;% summarise( Infant = if_else(any(str_detect(Services, &quot;Infant&quot;)), T, F), Toddler = if_else(any(str_detect(Services, &quot;Toddler&quot;)), T, F), Preschool = if_else(any(str_detect(Services, &quot;Preschool&quot;)), T, F), School = if_else(any(str_detect(Services, &quot;School Age&quot;)), T, F), .groups = &quot;drop&quot;) %&gt;% mutate(all_missing = if_else(!Infant &amp; !Toddler &amp; !Preschool &amp; !School, T, F)) %&gt;% mutate(across(Infant:School, ~if_else(all_missing, NA, .))) %&gt;% select(-all_missing) %&gt;% rename(Infant_from_cost = Infant, Toddler_from_cost = Toddler, Preschool_from_cost = Preschool, School_from_cost = School) # Determine offerings for each provider based on the general information provider_offerings_info &lt;- provider_information %&gt;% rename(Infant_from_info = Infant, Toddler_from_info = Toddler, Preschool_from_info = Preschool, School_from_info = School) # Combine offering info from cost and general info, prefer cost data provider_offerings &lt;- provider_offerings_info %&gt;% left_join(provider_offerings_cost, by = &quot;CLR&quot;) %&gt;% mutate(check = (Infant_from_info == Infant_from_cost &amp; Toddler_from_info == Toddler_from_cost &amp; Preschool_from_info == Preschool_from_cost &amp; School_from_info == School_from_cost)) %&gt;% mutate(Infant = if_else(!is.na(Infant_from_cost), Infant_from_cost, Infant_from_info), Toddler = if_else(!is.na(Toddler_from_cost), Toddler_from_cost, Toddler_from_info), Preschool = if_else(!is.na(Preschool_from_cost), Preschool_from_cost, Preschool_from_info), School = if_else(!is.na(School_from_cost), School_from_cost, School_from_info)) %&gt;% select(CLR, Infant, Toddler, Preschool, School) # Missing values are for certified providers # Most certified providers offer all age ranges # Fill in missings with all age ranges provider_offerings[with(provider_offerings, is.na(Infant) &amp; is.na(Toddler) &amp; is.na(Preschool) &amp; is.na(School)), c(&quot;Infant&quot;, &quot;Toddler&quot;, &quot;Preschool&quot;, &quot;School&quot;)][] &lt;- T provider_information %&lt;&gt;% select(-Infant, -Toddler, -Preschool, -School) %&gt;% left_join(provider_offerings, by = &quot;CLR&quot;) rm(provider_data, provider_offerings_cost, provider_offerings_info) # Cost summary provider_cost_summary &lt;- provider_cost %&gt;% left_join(provider_information, by = &quot;CLR&quot;) %&gt;% group_by(Services) %&gt;% summarize( mean = weighted.mean(FullTime, Capacity, na.rm = TRUE), median = unname(Hmisc::wtd.quantile(FullTime, Capacity, probs = 0.5, na.rm = TRUE)), sd = sqrt(Hmisc::wtd.var(FullTime, Capacity, na.rm = TRUE)), min = min(FullTime, na.rm = TRUE), max = max(FullTime, na.rm = TRUE)) # Infant (0-1): 13.2, Toddler (1-2): 24.7, # Preschool (2-4): 69.4, # School-age (5-6): 30, # Infant (0-1): 15.9, Toddler (1-2): 29.8, # Preschool (2-4): 60, # School-age (5-8): 24.3, (9-11): 11.1, (12-14): 4.6 # https://www2.census.gov/library/publications/2013/demo/p70-135.pdf # 4-year old (per kready data) .630 pop_df &lt;- read_tsv(&quot;early-childhood/raw_data/Bridged-Race Population Estimates 1990-2019.txt&quot;) pop_df %&lt;&gt;% filter(is.na(Notes)) %&gt;% transmute( age = as.numeric(`Age Code`), population = Population) %&gt;% filter(age &lt;= 14) childcare_participation &lt;- data.frame( age = c(0:14), type = c(&quot;Infant&quot;, &quot;Toddler&quot;, rep(&quot;Preschool&quot;, 3), rep(&quot;School&quot;, 10)), participation = c(.159, # infant 0 rep(.298, 2), # toddler 1, 2 .39, # preschool 3 .63, # preschool 4 rep(.243, 4), # school age 5 - 8, rep(.111, 3), # school age 9 - 11, rep(.046, 3))) # School age 12 - 14 childcare_participation %&lt;&gt;% left_join(pop_df, by = &quot;age&quot;) %&gt;% mutate(est_enrolled = participation * population) childcare_participation_pct &lt;- childcare_participation %&gt;% group_by(type) %&gt;% summarise(est_enrolled = sum(est_enrolled), .groups = &quot;drop&quot;) %&gt;% mutate(est_pct = est_enrolled / sum(est_enrolled)) temp_infant &lt;- provider_information %&gt;% filter(Infant) %&gt;% summarise(Capacity = sum(Capacity)) %&gt;% pull(Capacity) temp_toddler &lt;- provider_information %&gt;% filter(Toddler) %&gt;% summarise(Capacity = sum(Capacity)) %&gt;% pull(Capacity) temp_preschool &lt;- provider_information %&gt;% filter(Preschool) %&gt;% summarise(Capacity = sum(Capacity)) %&gt;% pull(Capacity) temp_school &lt;- provider_information %&gt;% filter(School) %&gt;% summarise(Capacity = sum(Capacity)) %&gt;% pull(Capacity) provider_seat_estimate &lt;- provider_information %&gt;% select(CLR, Capacity, Infant, Toddler, Preschool, School) %&gt;% pivot_longer(Infant:School, names_to = &quot;type&quot;, values_to = &quot;includes&quot;) %&gt;% group_by(CLR) %&gt;% mutate(num_oferrings = sum(includes)) %&gt;% ungroup() %&gt;% mutate(Capacity = Capacity / num_oferrings) %&gt;% group_by(type) %&gt;% summarise(Capacity = sum(Capacity)) # Some care centers seem to have reported weekly rates. That throws the mean and sd off, but shouldn&#39;t really impact the medians. Median cost is $30 per day for infants and toddlers, down to $25 per day for school age children. # 150 a week or 7800 a year, or an average of $650 a month. ccapcap &lt;- data.frame( Services = rep(c(&quot;Infant&quot;, &quot;Toddler&quot;, &quot;Preschool&quot;, &quot;School Age&quot;), 2), Type = rep(c(&quot;Certified&quot;, &quot;Licensed&quot;), each = 4), ft_cap = c(25, 25, 24, 20, 27, 27, 25, 22), pt_cap = c(18, 18, 17, 14, 19, 19, 18, 15)) provider_cost_summary &lt;- provider_cost %&gt;% left_join(provider_information, by = &quot;CLR&quot;) %&gt;% left_join(ccapcap, by = c(&quot;Services&quot;, &quot;Type&quot;)) %&gt;% group_by(Services, Type) %&gt;% summarize( ft_mean = weighted.mean(FullTime, Capacity, na.rm = TRUE), ft_median = unname(Hmisc::wtd.quantile(FullTime, Capacity, probs = 0.5, na.rm = TRUE)), ft_sd = sqrt(Hmisc::wtd.var(FullTime, Capacity, na.rm = TRUE)), ft_min = min(FullTime, na.rm = TRUE), ft_max = max(FullTime, na.rm = TRUE), ft_under_ccap = sum(Capacity[FullTime &lt;= ft_cap], na.rm=T) / sum(Capacity), pt_mean = weighted.mean(PartTime, Capacity, na.rm = TRUE), pt_median = unname(Hmisc::wtd.quantile(PartTime, Capacity, probs = 0.5, na.rm = TRUE)), pt_sd = sqrt(Hmisc::wtd.var(PartTime, Capacity, na.rm = TRUE)), pt_min = min(PartTime, na.rm = TRUE), pt_max = max(PartTime, na.rm = TRUE), pt_under_ccap = sum(Capacity[PartTime &lt;= pt_cap], na.rm=T) / sum(Capacity), n = n(), ft_cap = mean(ft_cap), pt_cap = mean(pt_cap)) provider_cost_summary_collapsed &lt;- provider_cost %&gt;% left_join(provider_information, by = &quot;CLR&quot;) %&gt;% left_join(ccapcap, by = c(&quot;Services&quot;, &quot;Type&quot;)) %&gt;% group_by(Services) %&gt;% summarize( Type = &quot;Total&quot;, ft_mean = weighted.mean(FullTime, Capacity, na.rm = TRUE), ft_median = unname(Hmisc::wtd.quantile(FullTime, Capacity, probs = 0.5, na.rm = TRUE)), ft_sd = sqrt(Hmisc::wtd.var(FullTime, Capacity, na.rm = TRUE)), ft_min = min(FullTime, na.rm = TRUE), ft_max = max(FullTime, na.rm = TRUE), ft_under_ccap = sum(Capacity[FullTime &lt;= ft_cap], na.rm=T) / sum(Capacity), pt_mean = weighted.mean(PartTime, Capacity, na.rm = TRUE), pt_median = unname(Hmisc::wtd.quantile(PartTime, Capacity, probs = 0.5, na.rm = TRUE)), pt_sd = sqrt(Hmisc::wtd.var(PartTime, Capacity, na.rm = TRUE)), pt_min = min(PartTime, na.rm = TRUE), pt_max = max(PartTime, na.rm = TRUE), pt_under_ccap = sum(Capacity[PartTime &lt;= pt_cap], na.rm=T) / sum(Capacity), n = n(), ft_cap = mean(ft_cap), pt_cap = mean(pt_cap)) %&gt;% mutate(ft_cap = NA_real_, pt_cap = NA_real_) provider_cost_summary %&gt;% #bind_rows(provider_cost_summary_collapsed) %&gt;% select(Type, Services, n, ft_median, ft_under_ccap, pt_median, pt_under_ccap, ft_cap, pt_cap) %&gt;% gt() %&gt;% tab_header(title = &quot;Cost of Child Care compared to CCAP Reimbursement Rates&quot;, subtitle = &quot;&quot;) %&gt;% fmt_currency(columns = vars(ft_median, pt_median, ft_cap, pt_cap), use_subunits = F) %&gt;% fmt_percent(columns = vars(ft_under_ccap, pt_under_ccap), decimals = 0) %&gt;% cols_label(n = &quot;Number of Providers&quot;, ft_median = &quot;Median Daily Price&quot;, ft_cap = &quot;CCAP Reimbursement Cap&quot;, ft_under_ccap = &quot;Slots at or below CCAP Rate&quot;, pt_median = &quot;Median Daily Price&quot;, pt_cap = &quot;CCAP Reimbursement Cap&quot;, pt_under_ccap = &quot;Slots at or below CCAP Rate&quot;) %&gt;% row_group_order( groups = c(&quot;Infant&quot;, &quot;Toddler&quot;, &quot;Preschool&quot;, &quot;School Age&quot;)) %&gt;% tab_spanner( label = &quot;Full-Time&quot;, columns = vars(ft_median, ft_cap, ft_under_ccap)) %&gt;% tab_spanner( label = &quot;Part-Time&quot;, columns = vars(pt_median, pt_cap, pt_under_ccap)) %&gt;% cols_align(align = &quot;center&quot;) %&gt;% tab_source_note( source_note = md(&quot;Source: Greater Louisville Project. Data from kynect.&quot;)) %&gt;% opt_row_striping(row_striping = TRUE) %&gt;% opt_table_outline() %&gt;% tab_options( table.font.size = px(12), table.width = pct(50)) %&gt;% tab_style( cell_text( font = &quot;Montserrat&quot;, weight = &quot;bold&quot;), cells_row_groups()) %&gt;% fmt_missing(c(&quot;ft_cap&quot;, &quot;pt_cap&quot;), missing_text = &quot;-&quot;) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #orwrezdase .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 12px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: 50%; border-top-style: solid; border-top-width: 3px; border-top-color: #D3D3D3; border-right-style: solid; border-right-width: 3px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 3px; border-bottom-color: #D3D3D3; border-left-style: solid; border-left-width: 3px; border-left-color: #D3D3D3; } #orwrezdase .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #orwrezdase .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #orwrezdase .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #orwrezdase .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #orwrezdase .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #orwrezdase .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #orwrezdase .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #orwrezdase .gt_column_spanner_outer:first-child { padding-left: 0; } #orwrezdase .gt_column_spanner_outer:last-child { padding-right: 0; } #orwrezdase .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #orwrezdase .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #orwrezdase .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #orwrezdase .gt_from_md > :first-child { margin-top: 0; } #orwrezdase .gt_from_md > :last-child { margin-bottom: 0; } #orwrezdase .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #orwrezdase .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #orwrezdase .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #orwrezdase .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #orwrezdase .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #orwrezdase .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #orwrezdase .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #orwrezdase .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #orwrezdase .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #orwrezdase .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #orwrezdase .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #orwrezdase .gt_sourcenote { font-size: 90%; padding: 4px; } #orwrezdase .gt_left { text-align: left; } #orwrezdase .gt_center { text-align: center; } #orwrezdase .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #orwrezdase .gt_font_normal { font-weight: normal; } #orwrezdase .gt_font_bold { font-weight: bold; } #orwrezdase .gt_font_italic { font-style: italic; } #orwrezdase .gt_super { font-size: 65%; } #orwrezdase .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } Cost of Child Care compared to CCAP Reimbursement Rates Type Number of Providers Full-Time Part-Time Median Daily Price CCAP Reimbursement Cap Slots at or below CCAP Rate Median Daily Price CCAP Reimbursement Cap Slots at or below CCAP Rate Infant Certified 59 $26 $25 44&percnt; $20 $18 34&percnt; Licensed 218 $35 $27 8&percnt; $29 $19 8&percnt; Toddler Certified 61 $26 $25 48&percnt; $19 $18 33&percnt; Licensed 237 $34 $27 11&percnt; $27 $19 11&percnt; Preschool Certified 60 $24 $24 52&percnt; $20 $17 30&percnt; Licensed 259 $30 $25 17&percnt; $21 $18 24&percnt; School Age Certified 56 $21 $20 45&percnt; $17 $14 29&percnt; Licensed 224 $28 $22 18&percnt; $17 $15 22&percnt; Source: Greater Louisville Project. Data from kynect. 4.3.1.2 Full-Time Care The chart below shows the estimated number of full-time child care slots by daily price in Louisville. Based on kynect data, the total number of licensed child care slots for children of all ages is 31,597. Most of these slots are licensed to be available children of all age ranges, but we estimate the actual utilization of child care slots by age group based on data from the Survey of Income and Program Participation. For example, the number of licensed slots available for infants is over 20,000, however the vast majority of those slots are used by children of other ages for whom they are also licensed. provider_information %&lt;&gt;% mutate(cum_pct = if_else(Infant, 0.05022589, 0) + if_else(Toddler, 0.09359373, 0) + if_else(Preschool, 0.41347562, 0) + if_else(School, 0.44270477, 0), infant_est = if_else(Infant, Capacity * 0.05022589 / cum_pct, 0), toddler_est = if_else(Toddler, Capacity * 0.09359373 / cum_pct, 0), preschool_est = if_else(Preschool, Capacity * 0.41347562 / cum_pct, 0), school_est = if_else(School, Capacity * 0.44270477 / cum_pct, 0)) temp_infant &lt;- provider_information %&gt;% filter(Infant) %&gt;% mutate(Services = &quot;Infant&quot;) %&gt;% left_join(provider_cost, by = c(&quot;CLR&quot;, &quot;Services&quot;)) %&gt;% mutate(FullTime = if_else(FullTime &gt; 5 * min(FullTime, na.rm = TRUE), FullTime / 5, FullTime)) %&gt;% arrange(FullTime) %&gt;% mutate(ft_cumsum = round(cumsum(infant_est), 0)) %&gt;% arrange(PartTime) %&gt;% mutate(pt_cumsum = round(cumsum(infant_est), 0)) temp_toddler &lt;- provider_information %&gt;% filter(Toddler) %&gt;% mutate(Services = &quot;Toddler&quot;) %&gt;% left_join(provider_cost, by = c(&quot;CLR&quot;, &quot;Services&quot;)) %&gt;% mutate(FullTime = if_else(FullTime &gt; 5 * min(FullTime, na.rm = TRUE), FullTime / 5, FullTime)) %&gt;% arrange(FullTime) %&gt;% mutate(ft_cumsum = round(cumsum(toddler_est), 0)) %&gt;% arrange(PartTime) %&gt;% mutate(pt_cumsum = round(cumsum(toddler_est), 0)) temp_preschool &lt;- provider_information %&gt;% filter(Preschool) %&gt;% mutate(Services = &quot;Preschool&quot;) %&gt;% left_join(provider_cost, by = c(&quot;CLR&quot;, &quot;Services&quot;)) %&gt;% mutate( FullTime = if_else(FullTime &gt; 5 * min(FullTime, na.rm = TRUE), FullTime / 5, FullTime), PartTime = if_else(PartTime &gt; 5 * min(PartTime, na.rm = TRUE), PartTime / 5, PartTime)) %&gt;% arrange(FullTime) %&gt;% mutate(ft_cumsum = round(cumsum(preschool_est), 0)) %&gt;% arrange(PartTime) %&gt;% mutate(pt_cumsum = round(cumsum(preschool_est), 0)) temp_school &lt;- provider_information %&gt;% filter(School) %&gt;% mutate(Services = &quot;School Age&quot;) %&gt;% left_join(provider_cost, by = c(&quot;CLR&quot;, &quot;Services&quot;)) %&gt;% mutate( FullTime = if_else(FullTime &gt; 10 * min(FullTime, na.rm = TRUE), FullTime / 5, FullTime), PartTime = if_else(PartTime &gt; 80, PartTime / 5, PartTime)) %&gt;% arrange(FullTime) %&gt;% mutate(ft_cumsum = round(cumsum(school_est), 0)) %&gt;% arrange(PartTime) %&gt;% mutate(pt_cumsum = round(cumsum(school_est), 0)) cost_seats &lt;- bind_rows(temp_infant, temp_toddler, temp_preschool, temp_school) cost_seats_ft &lt;- cost_seats %&gt;% arrange(ft_cumsum) trnfm_list &lt;- list( list( type = &#39;filter&#39;, target = ~Services, operation = &#39;in&#39;, value = unique(cost_seats$Services)[1])) plot_ly(filter(cost_seats_ft ,!is.na(FullTime))) %&gt;% add_trace(x = ~ft_cumsum, y = ~FullTime, type = &quot;scatter&quot;, mode = &quot;lines&quot;, marker = list(color = &#39;#d63631&#39;, size = 4), line = list(color = &#39;#323844&#39;, width = 2), transforms = trnfm_list, hovertemplate = paste(&#39;Price: $%{y:.2f} per day&lt;br&gt;Slots at or below price: %{x}&lt;extra&gt;&lt;/extra&gt;&#39;)) %&gt;% layout( font = list(family = &quot;Montserrat&quot;), title = &quot;Estimated Child Care Provider Slots by Price&quot;, xaxis = list(title = &quot;Child Care Slots&quot;), yaxis = list(title = &quot;Daily Rate ($)&quot;, rangemode = &quot;tozero&quot;), showlegend = FALSE, updatemenus = list( list( x = 0.75, y = 0.85, buttons = list( list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(cost_seats$Services)[1]), label = unique(cost_seats$Services)[1]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(cost_seats$Services)[2]), label = unique(cost_seats$Services)[2]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(cost_seats$Services)[3]), label = unique(cost_seats$Services)[3]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(cost_seats$Services)[4]), label = unique(cost_seats$Services)[4]))))) 4.3.1.3 Part-Time Care The chart below shows the estimated number of part-time child care slots by daily price in Louisville. Based on kynect data, the total number of licensed child care slots for children of all ages is 31,597. Most of these slots are licensed to be available children of all age ranges, but we estimate the actual utilization of child care slots by age group based on data from the Survey of Income and Program Participation. For example, the number of licensed slots available for infants is over 20,000, however the vast majority of those slots are used by children of other ages for whom they are also licensed. plot_ly(filter(cost_seats ,!is.na(PartTime))) %&gt;% add_trace(x = ~pt_cumsum, y = ~PartTime, type = &quot;scatter&quot;, mode = &quot;lines&quot;, marker = list(color = &#39;#d63631&#39;, size = 4), line = list(color = &#39;#323844&#39;, width = 2), transforms = trnfm_list, hovertemplate = paste(&#39;Price: $%{y:.2f} per half-day&lt;br&gt;Slots at or below price: %{x}&lt;extra&gt;&lt;/extra&gt;&#39;)) %&gt;% layout( font = list(family = &quot;Montserrat&quot;), title = &quot;Estimated Child Care Provider Slots by Price&quot;, xaxis = list(title = &quot;Child Care Slots&quot;), yaxis = list(title = &quot;Daily Rate ($)&quot;, rangemode = &quot;tozero&quot;), showlegend = FALSE, updatemenus = list( list( x = 0.75, y = 0.85, buttons = list( list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(cost_seats$Services)[1]), label = unique(cost_seats$Services)[1]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(cost_seats$Services)[2]), label = unique(cost_seats$Services)[2]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(cost_seats$Services)[3]), label = unique(cost_seats$Services)[3]), list(method = &quot;restyle&quot;, args = list(&quot;transforms[0].value&quot;, unique(cost_seats$Services)[4]), label = unique(cost_seats$Services)[4]))))) # Geocode providers # Break information into individual pieces for best results provider_information_addressed &lt;- provider_information %&gt;% mutate( street = str_extract(Location, &quot;.*?(?=,)&quot;), city = str_extract(Location, &quot;(?&lt;=, )\\\\w*(?=, KY)&quot;), county = &quot;Jefferson&quot;, state = &quot;KY&quot;, postalcode = str_sub(Location, -5)) # Use free default providers first (Census and OSM) pi_cascade &lt;- provider_information_addressed %&gt;% geocode( street = street, city = city, state = state, postalcode = postalcode, method = &quot;cascade&quot;) # Fill in missings with Geocodio (free up to 2,500 per day) Sys.setenv(GEOCODIO_API_KEY = &quot;cccff3c3cc3aca633fc09ccc3901c1a861a9069&quot;) #pw: &quot;glpgeocoder21!&quot; pi_fails &lt;- pi_cascade %&gt;% filter(is.na(lat)) %&gt;% select(-lat, -long, -geo_method) pi_fails %&lt;&gt;% geocode( street = street, city = city, state = state, postalcode = postalcode, method = &quot;geocodio&quot;) %&gt;% mutate(geo_method = &quot;geocodio&quot;) pi_fails %&lt;&gt;% mutate(geo_method = &quot;geocodio&quot;) pi_cascade %&lt;&gt;% filter(!is.na(lat)) %&gt;% bind_rows(pi_fails) pi_cascade %&lt;&gt;% filter(CLR != &quot;L355501&quot;) save(pi_cascade, file = &quot;raw_data/provider_locations.RData&quot;) 4.3.2 Location 4.3.2.1 Provider map The map below shows the location of the 395 licensed child care providers throughout the city. Hover over the map to see provider information. The size of the circle indicates the number of licensed slots, and the color of the circle indicates the providers Kentucky All STARS quality rating based on family engagement, classroom quality, and staff qualifications. Level 1 is the default level indicating the provider is in good standing, and providers can choose to be evaluated to potentially earn a higher rating. The data does not distinguish between providers who have gone unrated and providers who earned a level 1 rating. Providers might not feel the need to confirm their quality with a state evaluation.. However, providers at levels 2 and above have been evaluated and certified to meet certain standards. Providers of all ratings can be found throughout the city. Looking at the distribution of quality ratings by neighborhood, there are no discernible trends. A larger issue is the general access to quality care: there are only three 5-STAR providers in Louisville, and only 107 out of 395 providers have more than one star. load(&quot;early-childhood/raw_data/provider_locations.RData&quot;) provider_map &lt;- st_as_sf(pi_cascade, coords = c(&quot;long&quot;, &quot;lat&quot;), crs = 4326) pi_cascade %&lt;&gt;% mutate( offerings = paste0( if_else(Infant, &quot;Infant, &quot;, &quot;&quot;), if_else(Toddler, &quot;Toddler, &quot;, &quot;&quot;), if_else(Preschool, &quot;Preschool, &quot;, &quot;&quot;), if_else(School, &quot;School-age&quot;, &quot;&quot;)), offerings = str_remove(offerings, &quot;, $&quot;), line1 = Name, line2 = paste0(&quot;Capacity: &quot;, Capacity), line3 = paste0(&quot;Age range: &quot;, offerings) ) provider_labels &lt;- sprintf(&quot;%s&lt;br/&gt;%s&lt;br/&gt;%s&quot;, pi_cascade$line1, pi_cascade$line2, pi_cascade$line3) %&gt;% lapply(htmltools::HTML) pi_cascade %&lt;&gt;% mutate( type_color = if_else(Type == &quot;Licensed&quot;, &quot;blue&quot;, &quot;red&quot;), stars_color = viridis(5)[STARS]) leaflet(pi_cascade) %&gt;% addTiles() %&gt;% addCircleMarkers(lng = ~long, lat = ~lat, radius = ~sqrt(Capacity), color = ~stars_color, label = provider_labels, opacity = 0.7, weight = 2, labelOptions = labelOptions(style = list(&quot;font-weight&quot; = &quot;normal&quot;, &quot;font-family&quot; = &quot;Montserrat&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% addPolygons(data = st_transform(filter(map_county, FIPS == &quot;21111&quot;), 4326), fill = F, weight = 2, color = &quot;black&quot;) %&gt;% addLegend(title = &quot;STARS rating&quot;, labels = 1:5, colors = viridis(5)) 4.3.2.2 Providers by Neighborhood Unlike STAR ratings, there are patterns in terms of the distribution of child care slots throughout Louisville. The map below shows the number of child care slots available to children ages 0 to 4 by neighborhood. The highest availability is located around Downtown, Old Louisville, and the University of Louisville. This likely reflects the large number of people who commute to work in this area and use nearby child care. These neighborhoods are the only ones where there are more slots available than children who live there. The lowest availability of child care is in neighborhoods at the very Southwest and West of the city: Fairdale and Valley Station in the South Louisville, and Chickasaw, Shawnee, and Portland in West Louisville. map_nh &lt;- st_transform(map_nh, 4326) provider_nh &lt;- st_join(provider_map, map_nh, join = st_within) provider_nh %&lt;&gt;% group_by(neighborhood) %&gt;% summarise(seats = sum(infant_est + toddler_est + preschool_est)) child_pop &lt;- poverty_nh %&gt;% filter(year == max(year), sex == &quot;total&quot;, race %in% c(&quot;total&quot;, &quot;white&quot;), var_type == &quot;population&quot;) %&gt;% select(neighborhood, race, poverty_under_5) %&gt;% pivot_wider(names_from = &quot;race&quot;, values_from = &quot;poverty_under_5&quot;) %&gt;% mutate( percent_nonwhite = (total - white) / total * 100) provider_nh_summary &lt;- provider_nh %&gt;% st_drop_geometry() %&gt;% left_join(child_pop, by = &quot;neighborhood&quot;) %&gt;% mutate(seats_per = seats / total) %&gt;% transmute( Neighborhood = neighborhood, `Estimated Seats` = seats, `Seats per child` = seats_per, `Percent Nonwhite` = percent_nonwhite) provider_nh_map &lt;- map_nh %&gt;% left_join(provider_nh_summary, by = c(&quot;neighborhood&quot; = &quot;Neighborhood&quot;)) ggplot(provider_nh_map) + geom_sf(aes(fill=`Seats per child`), color = &quot;white&quot;) + scale_fill_viridis(na.value = &quot;grey&quot;, name = &quot;Slots per child&quot;) + theme_bw(base_size = 22) + theme(plot.caption = element_text(lineheight = .5)) + theme(text = element_text(family = &quot;Montserrat&quot;), panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank()) + labs(title = &quot;Estimated Slots per Child Ages 0 - 4&quot;, caption_text = &quot;Source: Greater Louisville Project Data from kynect and ACS Table B17001&quot;) + theme(plot.caption = element_text(lineheight = .5)) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 4.3.2.3 Neighborhoods by Race and Licensed Slots The neighborhoods with the highest availability of child care tend to be neighborhoods with a predominantly white population. As a result, parents of Black and Brown are more likely to have difficulty accessing child care due to where they live. On the graph below, neighborhoods with more non-white children are located to the right, and neighborhoods with a higher prcentage of white children are to the left. avg_annotation1 &lt;- list( x = 90, y = mean(provider_nh_summary$`Estimated Seats`) + 150, xref = &#39;x&#39;, yref = &#39;y&#39;, text = &quot;City Average&quot;, showarrow = FALSE) avg_annotation2 &lt;- list( x = 90, y = sum(provider_nh_summary$`Estimated Seats`) / sum(child_pop$total) + 0.045, xref = &#39;x&#39;, yref = &#39;y&#39;, text = &quot;City Average&quot;, showarrow = FALSE) plot_ly(provider_nh_summary) %&gt;% add_markers(x = ~`Percent Nonwhite`, y = ~`Estimated Seats`, text = provider_nh_summary$Neighborhood, marker = list(color = &#39;#d63631&#39;, size = 10), hoverinfo = &#39;text&#39;, visible = TRUE) %&gt;% add_segments(x = 0, xend = 100, y = mean(provider_nh_summary$`Estimated Seats`), yend = mean(provider_nh_summary$`Estimated Seats`), line = list(color = &#39;#323844&#39;, width = 1, dash = &#39;dash&#39;), visible = TRUE) %&gt;% add_markers(x = ~`Percent Nonwhite`, y = ~`Seats per child`, text = provider_nh_summary$Neighborhood, marker = list(color = &#39;#d63631&#39;, size = 10), hoverinfo = &#39;text&#39;, visible = FALSE) %&gt;% add_segments(x = 0, xend = 100, y = sum(provider_nh_summary$`Estimated Seats`) / sum(child_pop$total), yend = sum(provider_nh_summary$`Estimated Seats`) / sum(child_pop$total), line = list(color = &#39;#323844&#39;, width = 1, dash = &#39;dash&#39;), visible = FALSE) %&gt;% layout( font = list(family = &quot;Montserrat&quot;), title = &quot;Estimated Child Care Provider Slots by Race&quot;, xaxis = list(title = &quot;Percent of children age 0-4 who are not White&quot;), yaxis = list(title = &quot;Total Estimated Slots&quot;, rangemode = &quot;tozero&quot;), showlegend = FALSE, updatemenus = list( list( active = 0, x = 0.95, y = 0.85, buttons = list( list(label = &quot;Total Estimated Slots&quot;, method = &quot;update&quot;, args = list(list(visible = list(TRUE, TRUE, FALSE, FALSE)), list(yaxis = list(title = &quot;Total Estimated Slots&quot;, rangemode = &quot;tozero&quot;), annotations = list(avg_annotation1, c())))), list(label = &quot;Estimated Slots per child&quot;, method = &quot;update&quot;, args = list(list(visible = list(FALSE, FALSE, TRUE, TRUE)), list(yaxis = list(title = &quot;Estimated Slots per Child&quot;, rangemode = &quot;tozero&quot;), annotations = list(c(), avg_annotation2)))))))) 4.3.3 Hours Another barrier to child care access is the hours during which providers are open. The vast majority of child care providers are open between 6am and 6pm Monday through Friday, and there is much more limited availability of child care late in the night, in the early morning, and on the weekends. hours_info &lt;- provider_hours %&gt;% left_join(provider_information) %&gt;% select(CLR, Capacity, Day, open_time, close_time) all_day_seats &lt;- hours_info %&gt;% filter(abs(open_time - close_time) &lt;= 1) hours_info %&lt;&gt;% anti_join(all_day_seats, by = c(&quot;CLR&quot;, &quot;Day&quot;)) all_day_seats %&lt;&gt;% group_by(Day) %&gt;% summarise(seats = sum(Capacity)) for(day in c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;)) { for(time in seq(0, 24, by = 0.25)) { capacity &lt;- hours_info %&gt;% filter( Day %in% day, # Filter to day # Time is greater than opening time OR # if close time is post midnight (less than opening time), less than close time time &gt;= open_time | (close_time &lt; open_time &amp; time &lt;= close_time), # Time is greater than opening time OR # close time is post midnight time &lt;= close_time | close_time &lt; open_time) %&gt;% summarise(seats = sum(Capacity)) %&gt;% pull(seats) temp = c(&quot;Day&quot; = day, &quot;Time&quot; = time, &quot;Seats&quot; = capacity) seat_summary &lt;- assign_row_join(seat_summary, temp) } } seat_summary %&lt;&gt;% mutate( Time = as.numeric(Time), Seats = as.numeric(Seats)) %&gt;% left_join(all_day_seats, by = &quot;Day&quot;) %&gt;% mutate(Seats = Seats + seats) %&gt;% select(-seats) %&gt;% mutate(day_category = case_when(Day %in% c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) ~ &quot;Monday - Friday&quot;, Day == &quot;Saturday&quot; ~ &quot;Saturday&quot;, Day == &quot;Sunday&quot; ~ &quot;Sunday&quot;)) %&gt;% group_by(Time, day_category) %&gt;% summarise(Seats = round(mean(Seats), 0), .groups = &quot;drop&quot;) %&gt;% filter(Time != 0) %&gt;% mutate( hour = trunc(Time), minute = str_pad((Time - hour) * 60, 2, &quot;left&quot;, &quot;0&quot;), suffix = if_else(hour %in% 12:23, &quot;PM&quot;, &quot;AM&quot;), hour = case_when(hour %in% c(0, 12, 24) ~ 12, hour %in% 1:11 ~ hour, hour %in% 13:23 ~ hour - 12), time = paste0(hour, &quot;:&quot;, minute, &quot; &quot;, suffix), time_label = factor(Time, levels = Time, labels = time, ordered = TRUE)) seat_summary %&lt;&gt;% select( `Day of the Week` = day_category, time_label, Seats) %&gt;% pivot_wider(names_from = `Day of the Week`, values_from = Seats) plot_ly(seat_summary, hoverinfo = &#39;text&#39;) %&gt;% add_trace(x = ~time_label, y = ~`Monday - Friday`, name = &quot;Monday - Friday&quot;, type = &quot;scatter&quot;, mode = &quot;lines&quot;, line = list(color = &#39;#d63631&#39;, width = 4), hoverinfo = &#39;text&#39;, text = paste0(seat_summary$time_label, &quot;&lt;br&gt;Slots available: &quot;, scales::comma(seat_summary$`Monday - Friday`, accuracy = 1), &quot;&lt;br&gt;Percent available: &quot;, scales::percent(seat_summary$`Monday - Friday` / 31597, accuracy = 0.1))) %&gt;% add_trace(x = ~time_label, y = ~Saturday, name = &quot;Saturday&quot;, type = &quot;scatter&quot;, mode = &quot;lines&quot;, line = list(color = &#39;#323844&#39;, width = 4), hoverinfo = &#39;text&#39;, text = paste0(seat_summary$time_label, &quot;&lt;br&gt;Slots available: &quot;, scales::comma(seat_summary$Saturday, accuracy = 1), &quot;&lt;br&gt;Percent available: &quot;, scales::percent(seat_summary$Saturday / 31597, accuracy = 0.1))) %&gt;% add_trace(x = ~time_label, y = ~Sunday, name = &quot;Sunday&quot;, type = &quot;scatter&quot;, mode = &quot;lines&quot;, line = list(color = &#39;#eaab21&#39;, width = 4), hoverinfo = &#39;text&#39;, text = paste0(seat_summary$time_label, &quot;&lt;br&gt;Slots available: &quot;, scales::comma(seat_summary$Sunday, accuracy = 1), &quot;&lt;br&gt;Percent available: &quot;, scales::percent(seat_summary$Sunday / 31597, accuracy = 0.1))) %&gt;% layout( font = list(family = &quot;Montserrat&quot;), title = &quot;Licensed Child Care Provider Slots by Day and Time&quot;, xaxis = list(title = &quot;Time of Day&quot;), yaxis = list(title = &quot;Slots available&quot;)) 4.3.4 Compensation of Child Care Workers 4.3.4.1 Ranking A major factor restricting the expansion of child care is relatively low wages in the child care field. In 2019, the median hourly wages for Louisville child care workers was $9.78. read_and_prep &lt;- function(file_path) { df &lt;- readxl::read_excel(file_path) %&gt;% janitor::clean_names() %&gt;% mutate(MSA = as.numeric(area), h_median = as.numeric(h_median)) %&gt;% filter(MSA %in% c(24340, 41180, 36420, 46140, 24860, 28940, 13820, 31140, 26900, 28140, 36540, 24660, 16740, 18140, 17140, 34980, 32820) &amp; occ_title %in% c(&quot;Childcare Workers&quot;, &quot;Child care workers&quot;)) %&gt;% select(MSA, tot_emp, h_mean, a_mean, h_median, a_median) %&gt;% mutate(city = case_when( MSA == 24340 ~ &quot;Grand Rapids&quot;, MSA == 41180 ~ &quot;St. Louis&quot;, MSA == 36420 ~ &quot;Oklahoma City&quot;, MSA == 46140 ~ &quot;Tulsa&quot;, MSA == 24860 ~ &quot;Greenville&quot;, MSA == 28940 ~ &quot;Knoxville&quot;, MSA == 13820 ~ &quot;Birmingham&quot;, MSA == 31140 ~ &quot;Louisville&quot;, MSA == 26900 ~ &quot;Indianapolis&quot;, MSA == 28140 ~ &quot;Kansas City&quot;, MSA == 36540 ~ &quot;Omaha&quot;, MSA == 24660 ~ &quot;Greensboro&quot;, MSA == 16740 ~ &quot;Charlotte&quot;, MSA == 18140 ~ &quot;Columbus&quot;, MSA == 17140 ~ &quot;Cincinnati&quot;, MSA == 34980 ~ &quot;Nashville&quot;, MSA == 32820 ~ &quot;Memphis&quot;, TRUE ~ NA_character_ )) return(df) } df19 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2019_dl.xlsx&quot;) %&gt;% mutate(year = 2019) ranking(df19, &quot;h_median&quot;, text_size = 2, plot_title = &quot;Median Wages for Child Care Workers, 2019&quot;, year = 2019, subtitle_text = &quot;2019&quot;, #font didn&#39;t really work here. Could play with text size more? caption_text = &quot;Source: Greater Louisville Project Data from the Bureau of Labor Statistics&quot;, y_title = &quot;Dollars&quot;, FIPS_df = FIPS_df) 4.3.4.2 Trend The relatively low pay rate is around the 25th percentile of Louisvilles peer cities. After adjusting for inflation, median wages for child care workers have fallen since 2010. df18 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2018_dl.xlsx&quot;) %&gt;% mutate(year = 2018) df17 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2017_dl.xlsx&quot;) %&gt;% mutate(year = 2017) df16 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2016_dl.xlsx&quot;) %&gt;% mutate(year = 2016) df15 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2015_dl.xlsx&quot;) %&gt;% mutate(year = 2015) df14 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2014_dl.xlsx&quot;) %&gt;% mutate(year = 2014) df13 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2013_dl_1_AK_IN.xls&quot;) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2013_dl_2_KS_NY.xls&quot;)) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2013_dl_3_OH_WY.xls&quot;)) %&gt;% mutate(year = 2013) df12 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2012_dl_1_AK_IN.xls&quot;) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2012_dl_2_KS_NY.xls&quot;)) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2012_dl_3_OH_WY.xls&quot;)) %&gt;% mutate(year = 2012) df11 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2011_dl_1_AK_IN.xls&quot;) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2011_dl_2_KS_NY.xls&quot;)) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2011_dl_3_OH_WY.xls&quot;)) %&gt;% mutate(year = 2011) df10 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2010_dl_1.xls&quot;) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2010_dl_2.xls&quot;)) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2010_dl_3.xls&quot;)) %&gt;% mutate(year = 2010) df09 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2009_dl_1.xls&quot;) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2009_dl_2.xls&quot;)) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2009_dl_3.xls&quot;)) %&gt;% mutate(year = 2009) df08 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_M2008_dl_1.xls&quot;) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2008_dl_2.xls&quot;)) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_M2008_dl_3.xls&quot;)) %&gt;% mutate(year = 2008) df07 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_May2007_dl_1.xls&quot;) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_May2007_dl_2.xls&quot;)) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_May2007_dl_3.xls&quot;)) %&gt;% mutate(year = 2007) df06 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_may2006_dl_1.xls&quot;) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_may2006_dl_2.xls&quot;)) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_may2006_dl_3.xls&quot;)) %&gt;% mutate(year = 2006) df05 &lt;- read_and_prep(&quot;early-childhood/bls_data/MSA_may2005_dl_1.xls&quot;) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_may2005_dl_2.xls&quot;)) %&gt;% bind_rows(read_and_prep(&quot;early-childhood/bls_data/MSA_may2005_dl_3.xls&quot;)) %&gt;% mutate(year = 2005) #MSA codes all change in 2004 df_t &lt;- bind_rows(df19, df18, df17, df16, df15, df14, df13, df12, df11, df10, df09, df08, df07, df06, df05) #inflate to 2019 dollars based on CPI df_cpi &lt;- tibble( year = 2005:2019, cpi_value = c(195.292, 201.592, 207.342, 215.303, 214.537, 218.056, 224.939, 229.594, 232.957, 236.736, 237.017, 240.007, 245.120, 251.107, 255.657) ) %&gt;% mutate(multiplier = max(cpi_value)/ cpi_value) #scale to 2019 dollars df_t &lt;- left_join(df_t, df_cpi, by = &quot;year&quot;) df_t &lt;- df_t %&gt;% mutate(h_median = h_median * multiplier) trend_cc(df_t, &quot;h_median&quot;, plot_title = &quot;Median Hourly Wages for Child Care Workers&quot;, y_title = &quot;Dollars&quot;, caption_text = &quot;Source: Greater Louisville Project Data from the Bureau of Labor Statistics&quot;) 4.4 Child Health Child health is important for healthy child development and future success. 4.4.1 Adverse Childhood Experiences Adverse childhood experiences are potentially traumatic events that occur in childhood. If you would prefer to skip past this section, you can do so by clicking Child Food Security in the sidebar. Adverse Childhood Experiences (ACEs) include forms of abuse, neglect, and household dysfunction. According to the CDC, ACEs can have lasting, negative effects on health, well-being, and opportunity. In 2018, 71% of Louisville adults reported experiencing one or more ACEs during their childhood. To understand the questionnaire and find your ACE score, you can click here. ACEs data was collected by the Kentucky BRFSS survey using phone interviews throughout 2018. Kentucky Department for Public Health (KDPH) and the Centers for Disease Control and Prevention (CDC). Kentucky Behavioral Risk Factor Survey Data - Adverse Childhood Experiences 2015&amp;2018. Frankfort, Kentucky: Cabinet for Health and Family Services, Kentucky Department for Public Health, [2018]. 4.4.1.1 Impact of ACEs Louisville adults who have experienced a high number of ACEs report much higher numbers of chronic disease than those who experienced no ACEs. The chart below compares the prevalence of several healh conditions among the two groups. The data is based on the health status of current adults based on the number of ACEs they report having experienced as a child. Compared to adults who experienced no ACEs, adults who experienced a high number of ACEs are 6.5 times as likely to be a current smoker, 2.2 times as likely to report poor health status, 6.3 times as likely to have had a heart attack, and 3.9 times as likely to have depression. ACE risk factors 4.4.1.2 Prevelance of ACEs 4.4.1.3 ACE scores In 2018, 71% of adults in Louisville reported experiencing at least one ACE when they were a child. Higher numbers of ACEs are associated with greater prevalence of risk factors and chronic disease. ace_prevelance &lt;- tibble( number = c(0:4, &quot;5+&quot;), percent = c(29, 20.8, 17.8, 10, 10, 12.4)) %&gt;% mutate( number = factor(number, levels = rev(c(0:4, &quot;5+&quot;)), ordered = T), label_text = scales::percent(percent, scale = 1), ypos = cumsum(percent) - 0.5 * percent) text_size = 2 p &lt;- ggplot(ace_prevelance, aes(x=factor(1), y=percent)) p = p + guides(fill = FALSE, color = FALSE) p &lt;- p + geom_bar(aes(alpha = number), stat = &quot;identity&quot;, width = 1, size = text_size, fill = &quot;#d63631&quot;) + scale_alpha_manual( name = &quot;Number of ACEs&quot;, breaks = c(0:4, &quot;5+&quot;), values = seq(0.2, 1, length.out = 6)) + coord_polar(&quot;y&quot;) + theme_void() + geom_text(aes(label = label_text, family = &quot;Montserrat&quot;), color = &quot;black&quot;, size = 12, position = position_stack(vjust = 0.5)) p &lt;- p + theme(text = element_text(family = &quot;Montserrat&quot;), plot.title = element_text(size = 14 * text_size, hjust = 0.5, margin = margin(b = 10, unit = &quot;pt&quot;)), plot.caption = element_text(size = 10 * text_size, lineheight = 0.5), legend.text = element_text(size = 12 * text_size, lineheight = 0.5), legend.title = element_text(size = 12 * text_size)) p &lt;- p + labs(title = &quot;Percentage of Louisville adults by ACE score, 2018&quot;, caption = &quot;Source: Greater Louisville Project Data from the Kentucky Behavioral Risk Factor Survey&quot;) p &lt;- p + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) p 4.4.1.4 Type of ACEs The most common ACE Louisville adults report experiencing as a child is divorce among their parents, followed by a drinking problem in the household. Over one quarter of adults reported experiencing verbal abuse as a child. ace_types &lt;- tibble( category = c(rep(&quot;abuse&quot;, 3), rep(&quot;dysfunction&quot;, 6)), type = c(&quot;physical_abuse&quot;, &quot;sexual_abuse&quot;, &quot;verbal_abuse&quot;, &quot;incarcerated_hh_member&quot;, &quot;drug_problem&quot;, &quot;drinking_problem&quot;, &quot;witness_domestic_violence&quot;, &quot;mentally_ill_hh_member&quot;, &quot;divorced_parents&quot;), percent = c(12.5, 15.4, 28.2, 9.7, 16.9, 31.6, 20.5, 26.1, 41.8)) ace_types %&lt;&gt;% mutate(type = factor(type, levels = c(&quot;verbal_abuse&quot;, &quot;sexual_abuse&quot;, &quot;physical_abuse&quot;, &quot;divorced_parents&quot;, &quot;drinking_problem&quot;, &quot;mentally_ill_hh_member&quot;, &quot;witness_domestic_violence&quot;, &quot;drug_problem&quot;, &quot;incarcerated_hh_member&quot;), labels = c(&quot;Verbal abuse&quot;, &quot;Sexual abuse&quot;, &quot;Physical abuse&quot;, &quot;Divorced Parents&quot;, &quot;Drinking problem in household&quot;, &quot;Mentally ill household member&quot;, &quot;Witnessed domestic violence&quot;, &quot;Drug problem in household&quot;, &quot;Incarcerated household member&quot;), ordered = TRUE)) ace_types %&lt;&gt;% mutate(label_text = scales::percent(percent, scale=1, accuracy = 1)) text_size = 2 p &lt;- ggplot(ace_types, aes(type, percent)) p = p + guides(fill = FALSE, color = FALSE) p &lt;- p + geom_bar(stat = &quot;identity&quot;, size = text_size, fill = &quot;#d63631&quot;) + coord_flip(clip=&quot;off&quot;) + ggthemes::theme_tufte() p &lt;- p + theme(text = element_text(family = &quot;Montserrat&quot;), plot.title = element_text(size = 13.5 * text_size, hjust = 0.5, margin = margin(b = 10, unit = &quot;pt&quot;)), axis.text.y = element_text(hjust = 0, size = 10 * text_size), axis.title.x = element_text(size = 10 * text_size), axis.title.y = element_text(size = 10 * text_size), axis.ticks = element_blank(), axis.text.x = element_blank(), plot.caption = element_text(size = 10 * text_size, lineheight = 0.5)) # p &lt;- p + # labs(subtitle = subtitle_text) + # theme(plot.subtitle = element_text(hjust = 0.5, size = 10 * text_size)) # Add remaining text p &lt;- p + labs(title = &quot;Prevelance of ACEs among Louisville adults, 2018&quot;, y = &quot;Percent&quot;, x = &quot;&quot;, caption = &quot;Souce: Greater Louisville Project Data from the Kentucky Behavioral Risk Factor Survey&quot;) p &lt;- p + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) p &lt;- p + geom_text(aes(label = label_text, family = &quot;Montserrat Bold&quot;), size = 4.5 * text_size, color = &quot;black&quot;, hjust = 1.1) p 4.4.1.5 ACEs by race The most recent national data from the National Survey of Childrens Health shows that children who are Hispanic or Black are more likely to have experienced one or more ACEs than other children.. While we have some local data for children of different races, it is limited and highly variable from year to year. The original ACEs questionnaire mostly measures trauma that occurs in the home, and it excludes many kinds of trauma that are most likely to affect Black and Brown children, such as racial discrimination from peers, experiences with community violence, and family separation. There are various proposals to create a more comprehensive Expanded or Culturally-Informed ACEs measure. Some suggestions include adding questions about community experiences, such as witnessing violence or living in unsafe neighborhoods. Proposals also include collecting more data on experiences with racism, including discrimination, stigma, and historical trauma. Racism is both a source of trauma and an amplifier of other kinds of trauma. 4.4.2 Child Food Security Child food security data comes from the Feeding Americas Mind the Meal Gap program. According to Feeding America, research shows an association between food insecurity and delayed development in young children; risk of chronic illnesses like asthma and anemia; and behavioral problems like hyperactivity, anxiety and aggression in school-age children. 4.4.2.1 Trend From 2014 to 2018, Louisville saw a slight decline in child food insecurity. However, child food insecurity increased by 40% in Louisville from 2018 to October of 2020. # Read in food insecurity data from Mind the Meal Gap dinner_time &lt;- function(folder, starting_year){ wd &lt;- getwd() directory &lt;- paste0(wd, &quot;/&quot;, folder) file_names &lt;- list.files(directory) # Read file for each year for (y in starting_year:2018){ # Create parameters to read in sheet based on the year file_path &lt;- paste0(wd, &quot;/&quot;, folder, &quot;/&quot;, file_names[y-2008]) sheet_name &lt;- case_when( y %in% 2009:2010 ~ &quot;County&quot;, y %in% 2011:2018 ~ paste0(y, &quot; County&quot;)) skip_num &lt;- case_when( y %in% 2009:2017 ~ 0, y %in% 2018 ~ 1) df &lt;- readxl::read_xlsx(file_path, sheet = sheet_name, skip = skip_num) # Create variables names based on the year food_insecure_var &lt;- paste0(y, &quot; Food Insecurity Rate&quot;) food_insecure_num_var &lt;- paste0(&quot;# of Food Insecure Persons in &quot;, y) child_food_insecure_var &lt;- paste0(y, &quot; Child food insecurity rate&quot;) child_food_insecure_num_var &lt;- paste0(&quot;# of Food Insecure Children in &quot;, y) insecure_FRL &lt;- paste0(&quot;% food insecure children in HH w/ HH incomes below 185 FPL in &quot;, y) insecure_non_FRL &lt;- paste0(&quot;% food insecure children in HH w/ HH incomes above 185 FPL in &quot;, y) # Tidy data frame df %&lt;&gt;% transmute( FIPS = str_pad(FIPS, 5, &quot;left&quot;, &quot;0&quot;), year = y, food_insecurity = .data[[food_insecure_var]], food_insecurity_num = .data[[food_insecure_num_var]], child_food_insecurity = .data[[child_food_insecure_var]], child_food_insecurity_num = .data[[child_food_insecure_num_var]], low_threshold = `Low Threshold in state`, low_threshold_type = `Low Threshold Type`, high_threshold = `High Threshold in state`, high_threshold_type = `High Threshold Type`, under_low = `% FI  Low Threshold`, between = `% FI Btwn Thresholds`, above = `% FI &gt; High Threshold`, child_below_FRL = .data[[insecure_FRL]], child_above_FRL = .data[[insecure_non_FRL]]) output &lt;- assign_row_join(output, df) } output } feeding_america &lt;- dinner_time(&quot;early-childhood/raw_data/Map the Meal Gap data&quot;, starting_year = 2012) feeding_america_covid &lt;- readxl::read_xlsx(&quot;early-childhood/raw_data/Projections data (revised Oct. 2020)/The Impact of Coronavirus on Food Insecurity Update 10.2020.xlsx&quot;, sheet = &quot;County&quot;) feeding_america_covid %&lt;&gt;% transmute( FIPS = str_pad(FIPS, 5, &quot;left&quot;, &quot;0&quot;), year = 2020, food_insecurity = `[Revised Projections  Oct 2020] \\r\\n2020 Food Insecurity %`, food_insecurity_num = `[Revised Projections  Oct 2020] \\r\\n2020 Food Insecurity #`, child_food_insecurity = `[Revised Projections  Oct 2020] \\r\\n2020 Child Food Insecurity %`, child_food_insecurity_num = `[Revised Projections  Oct 2020] \\r\\n2020 Child Food Insecurity #`) feeding_america %&lt;&gt;% bind_rows(feeding_america_covid) feeding_america %&lt;&gt;% pull_peers(FIPS_df = FIPS_df) %&gt;% mutate(across( c(food_insecurity, child_food_insecurity, under_low, between, above, child_below_FRL, child_above_FRL), ~ . * 100)) feeding_america_1 &lt;- feeding_america %&gt;% stl_merge(food_insecurity_num, child_food_insecurity_num, method = &quot;sum&quot;) feeding_america_2 &lt;- feeding_america %&gt;% stl_merge(food_insecurity, under_low, between, above, method = &quot;mean&quot;, weight_var = &quot;food_insecurity_num&quot;) feeding_america_3 &lt;- feeding_america %&gt;% stl_merge(child_food_insecurity, child_below_FRL, child_above_FRL, method = &quot;mean&quot;, weight_var = &quot;child_food_insecurity_num&quot;) feeding_america_t = left_join(feeding_america_1, feeding_america_2) %&gt;% left_join(feeding_america_3) feeding_america_t %&lt;&gt;% mutate(pct_above_frl = child_above_FRL * child_food_insecurity / 100, pct_below_frl = (100 - child_above_FRL) * child_food_insecurity / 100) trend_cc(feeding_america_t, &quot;child_food_insecurity&quot;, plot_title = &quot;Child Food Insecurity&quot;, caption_text = &quot;Source: Greater Louisville Project Data from Feeding America&quot;, y_title = &quot;Percent&quot;, xmin = 2014, xmax = 2020) 4.4.2.2 Ranking While Louisville is toward the middle of its peer cities in child food Insecurity, more than 1 in 5 children are food insecure. ranking(feeding_america_t, &quot;child_food_insecurity&quot;, plot_title = &quot;Child Food Insecurity, October 2020&quot;, caption_text = &quot;Source: Greater Louisville Project Data from Feeding America&quot;, year = 2020, order = &quot;Ascending&quot;, text_size = 2, FIPS_df = FIPS_df) 4.4.2.3 Breakdown by Program Eligibility As of 2018, Feeding America estimated that most food-insecure children lived in families under 185% of the poverty line, meaning that they were generally eligible for programs like SNAP, WIC, and Free or Reduced School lunch. Compared to cities with similar rates of overall child food insecurity, Louisville has a relatively low number of food insecure children who are eligible for food benefit programs and a relatively high number of food insecure children above this cutoff. This shows that food insecurity is prevalent in families with a wide range of incomes. feeding_america_stack &lt;- feeding_america_t %&gt;% filter(year == 2018) %&gt;% pull_peers(add_info = T, FIPS_df = FIPS_df) %&gt;% filter(current == 1) %&gt;% arrange(child_food_insecurity) %&gt;% mutate( rank = row_number(), names = paste0(rank, &quot;. &quot;, city)) feeding_america_stack %&lt;&gt;% select(names, rank, city, pct_below_frl, pct_above_frl) %&gt;% pivot_longer(pct_below_frl:pct_above_frl) %&gt;% arrange(desc(name)) %&gt;% group_by(city) %&gt;% mutate(label_ypos = if_else(name == &quot;pct_below_frl&quot;, value[name == &quot;pct_below_frl&quot;], sum(value))) color_values &lt;- c(&quot;#323844&quot;, &quot;#d63631&quot;) color_names &lt;- c(&quot;Above 185% of poverty&quot;, &quot;Below 185% of poverty&quot;) feeding_america_stack$color &lt;- &quot;Below 185% of poverty&quot; feeding_america_stack$color[feeding_america_stack$name == &quot;pct_above_frl&quot;] &lt;- &quot;Above 185% of poverty&quot; feeding_america_stack$alpha = 0.9 feeding_america_stack$alpha[feeding_america_stack$city == &quot;Louisville&quot;] &lt;- 1 # Create numeric labels label_text &lt;- feeding_america_stack$value %&gt;% scales::percent(accuracy = 0.1, scale = 1, suffix = &quot;%&quot;) # Set text format, highlight and italicise Louisville text, highlight Louisville bar feeding_america_stack$textcolor &lt;- &quot;#000000&quot; feeding_america_stack$textcolor[feeding_america_stack$name == &quot;pct_above_frl&quot;] &lt;- &quot;#000000&quot; feeding_america_stack$textfont &lt;- &quot;Montserrat&quot; feeding_america_stack$textfont[feeding_america_stack$city == &quot;Louisville&quot;] &lt;- &quot;Montserrat Bold&quot; label_color_names &lt;- c(&quot;white&quot;, &quot;black&quot;) label_color_values &lt;- c(&quot;#000000&quot;, &quot;#ffffff&quot;) feeding_america_stack$label_color &lt;- &quot;white&quot; feeding_america_stack$label_color[feeding_america_stack$name == &quot;pct_above_frl&quot;] &lt;- &quot;black&quot; #df$linecolor &lt;- &quot;#ffffff&quot; #df$linecolor[df$city == &quot;Louisville&quot;] &lt;- &quot;#00a9b7&quot; feeding_america_stack$lou &lt;- if_else(feeding_america_stack$city == &quot;Louisville&quot;, 1, 0) feeding_america_stack$text_alignment &lt;- 1.1 feeding_america_stack$text_alignment[feeding_america_stack$city %in% &quot;Grand Rapids&quot; &amp; feeding_america_stack$name == &quot;pct_above_frl&quot;] &lt;- 1.02 ### PLOT GRAPH text_size = 2 # Initial plot p &lt;- ggplot(data = feeding_america_stack, aes(x = factor(names, levels = unique(rev(names))), y = value, alpha = alpha)) p &lt;- p + guides(color = FALSE, alpha = FALSE) # Add bars p &lt;- p + geom_bar(aes(fill = factor(color, levels = color_names, ordered = TRUE)), stat = &quot;identity&quot;, size = text_size) + coord_flip() + ggthemes::theme_tufte() p &lt;- p + scale_fill_manual(values = color_values, guide = guide_legend(reverse = TRUE)) + scale_alpha(range = c(0.8, 1)) text_scale &lt;- 2 #p &lt;- p + scale_color_manual(values = c(&quot;#ffffff&quot;, &quot;#00a9b7&quot;)) # Add features title_scale &lt;- min(1, 48 / nchar(&quot;Child Food Security&quot;)) p &lt;- p + theme(text = element_text(family = &quot;Montserrat&quot;), plot.title = element_text(size = 14 * title_scale * text_size, hjust = 0.5, margin = margin(b = 10, unit = &quot;pt&quot;)), legend.text = element_text(size = 10 * text_scale, margin = margin(b = 0.2 * text_scale, t = 0.2 * text_scale, unit = &quot;cm&quot;)), axis.text.y = element_text(hjust = 0, size = 10 * text_size, color = rev(feeding_america_stack$textcolor), family = rev(feeding_america_stack$textfont)), axis.title.y = element_blank(), axis.title.x = element_text(size = 10 * text_size), axis.ticks = element_blank(), axis.text.x = element_blank(), plot.caption = element_text(size = 10 * text_size, lineheight = 0.5), legend.title = element_blank()) p &lt;- p + labs(caption = &quot;Source: Greater Louisville Project Data from Feeding America&quot;) # Add numeric labels to bars based on bar_label parameter p &lt;- p + geom_text(aes(label = label_text, hjust = text_alignment, color = factor(label_color), family = textfont, group = name, y = label_ypos), position = &quot;identity&quot;, size = 4.5 * text_size) + scale_colour_manual(values=c(&quot;#ffffff&quot;, &quot;#000000&quot;)) # Add vertical line to the left side of the bars based on the h_line parameter # Add remaining text p &lt;- p + labs(title = &quot;Child Food Security&quot;, y = &quot;Percent&quot;) + theme(legend.position = &quot;bottom&quot;) p &lt;- p + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) p "],["black-wealth.html", "Chapter 5 Black Wealth 5.1 Introduction 5.2 Wealth (National) 5.3 Business Ownership (Local) 5.4 Homeownership (Local) 5.5 Household Income (Local) 5.6 The Tip of the Iceberg", " Chapter 5 Black Wealth # Knitr options knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, dev.args=list(bg=&quot;transparent&quot;)) library(tidyverse) library(magrittr) library(showtext) library(rgdal) library(sf) library(viridis) library(plotly) library(tidygeocoder) library(leaflet) library(rvest) library(lubridate) load(&quot;Black_wealth/glptools_exports.RData&quot;) source(&quot;Black_wealth/helper_functions.R&quot;) library(showtext) showtext_auto() font_add(&quot;Montserrat&quot;, &quot;Black_wealth/Montserrat/Montserrat-Regular.ttf&quot;) font_add(&quot;Montserrat Bold&quot;, &quot;Black_wealth/Montserrat/Montserrat-SemiBold.ttf&quot;) jfco_shp &lt;- readOGR(&quot;Black_wealth/JC Tracts&quot;, layer = &quot;JC Tracts&quot;, GDAL1_integer64_policy = TRUE, verbose = FALSE) jfco_sf &lt;- st_as_sf(jfco_shp) %&gt;% mutate(GEOID = str_sub(GEO_ID, start = -11)) 5.1 Introduction There is no universally-accepted definition of wealth within the Black community. Even within the traditional definitions of monetary wealth, there is no direct data on Black Wealth in Louisville. This report looks at the available national data on monetary wealth and then looks at local data in three areas that are closely related to wealth and wealth-building: business ownership, housing finance, and income. 5.2 Wealth (National) Wealth data remains scarce in general because the subject of wealth can be sensitive and is not tracked in a comprehensive way. Multiple surveys ask about income, and tax records show yearly income, but this data provides an incomplete picture, often missing key metrics such as property ownership, community investment, inherited wealth, etc. As such, our measures of wealth remain indirect. The national Survey of Consumer Finances (SCF), which occurs every three years, is our best source of wealth data. It measures all assets over which a family has legal claim that can be used to finance its present and future consumption. The most recently available data is from 2019, leaving the impact of the ongoing pandemic undefined. The key findings from the Federal Reserve report include: The median white family has $188,200, while the median Black family has $24,100, less than 15% of what white families hold. After falling from 2007 to 2013, median Black wealth has increased from 2013-2019; however, the gap between White and Black families remains largely unchanged. The gap in wealth starts at an early age, with white families under 35 having a median wealth of $25,400 and Black families having $600. White families are more likely to own homes at any age, but the Black-White gap is largest in households under 35, likely reflecting parental wealth. The Federal Reserve Report concludes that inheritances and other sources of family support are the single largest driver of the racial wealth gap. 5.3 Business Ownership (Local) Entrepreneurship is a key driver of wealth creation and generational wealth. Business owners are able to build wealth through their companies, and money spent at locally-owned businesses contribute to local wages and neighborhood development. Data on business ownership are available for all businesses for the Louisville MSA, which includes 9 surrounding counties. At the county level, data on business ownership is only available for employer businesses: businesses that have at least one employee. While employer businesses only make up about 20% of local registered businesses, they comprise 98.2% of local business revenue, and so we will focus our analysis there. We do note that while Black residents only own 2.3% of employer businesses in Louisville, they own 9.8% of all businesses in the larger Louisville MSA. Overall, the data show a large racial disparity in ownership of employer businesses in Louisville. 5.3.1 Comparison to peer cities In Jefferson County, Black residents make up 21.9% of the population, and they own 2.3% of employer businesses. The graph below compares this ratio across Louisvilles cities. Cities would fall on the solid line if Black residents were represented equally among employer business owners and the population. The dotted line shows the average level of representation of Black residents among employer business owners in Louisvilles peer cities. Black residents have higher-than-average representation in cities that fall above the dotted line, and they have below-average representation in cities below the line, but no cities, including Louisville, come close to equal representation. pct_nonemp_business &lt;- 57630 / (57630 + 14785) pct_nonemp_revenue &lt;- 2757359000 / (2757359000 + 152432057000) # glpdata::population_msa_1yr %&gt;% filter(race %in% c(&quot;black&quot;, &quot;total&quot;), MSA == &quot;31140&quot;, year == 2019, sex == &quot;total&quot;) business_ownership_county_clean &lt;- business_ownership_county %&gt;% group_by(FIPS, year) %&gt;% mutate( firm_percent = firms_num / firms_num[sex==&quot;total&quot; &amp; race == &quot;total&quot;] * 100, revenue_percent = revenue_num / revenue_num[sex==&quot;total&quot; &amp; race == &quot;total&quot;] * 100) %&gt;% ungroup() %&gt;% filter(race == &quot;black&quot;) %&gt;% pull_peers(add_info = T, FIPS_df = FIPS_df) %&gt;% filter(current == 1) business_ownership_county_summary &lt;- business_ownership_county_clean %&gt;% filter(FIPS != &quot;21111&quot;) %&gt;% summarize(avg_ratio = mean(firm_percent / pop_percent)) %&gt;% pull(avg_ratio) business_ownership_county_clean %&lt;&gt;% mutate(marker_color = if_else(city == &quot;Louisville&quot;, &#39;#d63631&#39;, &quot;#000000&quot;)) lou &lt;- filter(business_ownership_county_clean, city == &quot;Louisville&quot;) a &lt;- list( x = lou$pop_percent, y = lou$firm_percent, text = lou$city, xref = &quot;x&quot;, yref = &quot;y&quot;, showarrow = F, arrowhead = 0, ax = 0, ay = 10, yanchor = &quot;top&quot;) b &lt;- list( x = 12, y = 11, text = &quot;Equal representation&quot;, xref = &quot;x&quot;, yref = &quot;y&quot;, showarrow = F, arrowhead = 0, ax = 0, ay = 30, xanchor = &quot;left&quot;) c &lt;- list( x = 40, y = 7, text = &quot;Average representation in peer cities&quot;, xref = &quot;x&quot;, yref = &quot;y&quot;, showarrow = F, arrowhead = 0, ax = 0, ay = -16, textangle = -20) plot_ly(business_ownership_county_clean) %&gt;% add_markers(x = ~`pop_percent`, y = ~`firm_percent`, text = business_ownership_county_clean$city, color = ~I(marker_color), marker = list(size = 10), hoverinfo = &#39;text&#39;, showlegend = FALSE) %&gt;% add_segments(x = 0, xend = 60, y = 0, yend = 60, name = &quot;Equality&quot;, line = list(color = &#39;#323844&#39;, width = 1), showlegend = FALSE) %&gt;% add_segments(x = 0, xend = 60, y = 0, yend = business_ownership_county_summary * 60, name = &quot;Peer Average&quot;, line = list(color = &#39;#323844&#39;, width = 1, dash = &#39;dash&#39;), showlegend = FALSE) %&gt;% layout( font = list(family = &quot;Montserrat&quot;), annotations = list(a, b, c), title = &quot;Black Business Ownership by Peer City&quot;, xaxis = list(title = &quot;Percent of Residents who are Black&quot;), yaxis = list(title = &quot;Percent of Businesses Owned by Black Residents&quot;, range = c(0, 20))) 5.3.2 Peer Ranking This graph shows the number of employer-businesses that Black residents own for every 100 Black residents. ranking(business_ownership_county_clean, &quot;firms_num_per_100&quot;, race = &quot;black&quot;, plot_title = &quot;Black Business Ownership&quot;, y_title = &quot;Businesses per 100 residents&quot;, caption_text = &quot;Source: Greater Louisville Project Data from the Census Bureau Annual Business Survey&quot;, year = 2017, text_size = 2, accuracy = 0.01, FIPS_df = FIPS_df) 5.3.3 Local business creation The map below shows business filings throughout 2020 within Jefferson County. These businesses include any type of LLC, corporation, or nonprofit officially registered with the Commonwealth of Kentucky. Compared to the previous data that focuses on larger organizations, it shows that entrepreneurship is widespread throughout the city. cols_spec &lt;- cols(&quot;organization_number&quot; = col_character(), &quot;comptype&quot; = col_number(), &quot;compseq&quot; = col_character(), &quot;name&quot; = col_character(), &quot;standing&quot; = col_character(), &quot;status&quot; = col_character(), &quot;org_country&quot; = col_character(), &quot;org_state&quot; = col_character(), &quot;company_type&quot; = col_character(), &quot;registered_agent_name&quot; = col_character(), &quot;registered_agent_address_1&quot; = col_character(), &quot;registered_agent_address_2&quot; = col_character(), &quot;registered_agent_address_3&quot; = col_character(), &quot;registered_agent_address_4&quot; = col_character(), &quot;registered_agent_city&quot; = col_character(), &quot;registered_agent_state&quot; = col_character(), &quot;registered_agent_zip&quot; = col_character(), &quot;address_1&quot; = col_character(), &quot;address_2&quot; = col_character(), &quot;address_3&quot; = col_character(), &quot;address_4&quot; = col_character(), &quot;city&quot; = col_character(), &quot;state&quot; = col_character(), &quot;zip&quot; = col_character(), &quot;file_date&quot; = col_date(&quot;%m/%d/%Y&quot;), &quot;organization_date&quot; = col_date(&quot;%m/%d/%Y&quot;), &quot;authorization_date&quot; = col_date(&quot;%m/%d/%Y&quot;), &quot;record_date&quot; = col_date(&quot;%m/%d/%Y&quot;), &quot;registered_agent_res_date&quot; = col_date(&quot;%m/%d/%Y&quot;), &quot;expiration_date&quot; = col_date(&quot;%m/%d/%Y&quot;), &quot;renewal_date&quot; = col_date(&quot;%m/%d/%Y&quot;), &quot;numofcr&quot; = col_skip(), &quot;numofshr&quot; = col_skip(), &quot;mangnum&quot; = col_skip(), &quot;applname&quot; = col_skip(), &quot;appltitl&quot; = col_skip(), &quot;parpre&quot; = col_skip(), &quot;parcomno&quot; = col_skip(), &quot;parcom&quot; = col_skip(), &quot;parpreno&quot; = col_skip(), &quot;for_profit&quot; = col_character(), &quot;record_num&quot; = col_character()) #File available at https://drive.google.com/file/d/1cTCZK0A4XTru3HYPLLbDnu0DoKHlB5l1/view?usp=sharing all_companies &lt;- read_tsv(&quot;Black_wealth/AllCompanies20210430.txt&quot;, col_names = names(cols_spec$cols), col_types = cols_spec, quote = &quot;&quot;) # Select one record per organization, excluding name reservations all_companies %&lt;&gt;% filter(compseq == &quot;99999&quot;, comptype %not_in% c(1, 2, 3, 4, 7, 11, 12, 13, 14), year(file_date) &gt;= 2000) lou_zips &lt;- glptools::FIPS_zip %&gt;% filter(FIPS == &quot;21111&quot;) %&gt;% pull(zip) %&gt;% as.numeric() all_companies %&lt;&gt;% filter(zip %in% lou_zips) zip_pop &lt;- glpdata::population_zip %&gt;% filter(race == &quot;total&quot;, sex == &quot;total&quot;, year == 2018) t = glpdata::population_zip %&gt;% filter(FIPS == &quot;21111&quot;, sex == &quot;total&quot;, race == &quot;total&quot;, year == 2019) all_companies_zip &lt;- all_companies %&gt;% left_join(t) %&gt;% filter(year(file_date) == 2020) %&gt;% group_by(zip) %&gt;% summarize(num_companies = n(), pct_here = mean(population_in_FIPS / population_total), pct_here = if_else(is.na(pct_here), 1, pct_here)) %&gt;% summarize(sum(num_companies * pct_here)) all_companies_zip &lt;- all_companies %&gt;% filter(year(file_date) == 2020) %&gt;% group_by(zip) %&gt;% summarize(num_companies = n()) %&gt;% left_join(zip_pop, by = &quot;zip&quot;) %&gt;% mutate(companies_pp = num_companies / population_total * 100, companies_pp = if_else(zip %in% c(40209, 40025, 40202), NA_real_, companies_pp)) ggplot(left_join(map_zip, all_companies_zip, by = &quot;zip&quot;)) + geom_sf(aes(fill = companies_pp)) + #scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + scale_fill_viridis(name = &quot;Filings per\\n100 Residents&quot;) + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), legend.title = element_text(size = 18, lineheight = 0.6), plot.caption = element_text(lineheight = 0.6)) + labs(title = &quot;Business Filings, 2020&quot;, caption = &quot;Source: Greater Louisville Project Data from the Kentucky Secretary of State&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 5.4 Homeownership (Local) Homeownership represents a significant component of wealth. Housing reflects historical wealth patternsparental wealth makes it easier to buy a homeand is a major generator of wealthhistorically, homes in most neighborhoods have risen in value, increasing the wealth of those who own them. The data show stark divides between Black and white families throughout the homeownership process, demonstrating one aspect of the wealth gap. 5.4.1 Home Mortgages 5.4.1.1 Mortgages by geography In 2019, about 3.8 mortgages were issued per 100 residents in Jefferson County; however, the availability of mortgages varies greatly across the city. Two census tracts saw 0 mortgages issued in 2019, and most of West Louisville saw fewer than 1 mortgage issued per 100 residents. Often mortgage issuance is limited by a loan to value ratio that reflects property values in a given neighborhood relative to the replacement value of the structure Mortgage issuance is much higher in neighborhoods with higher overall value or new construction. home_loan_tract_race &lt;- home_loan_tract %&gt;% filter(year == 2019, sex == &quot;total&quot;, race != &quot;total&quot;) %&gt;% select(tract, race, denial:rate_spread) home_loan_tract %&lt;&gt;% filter(year == 2019, sex == &quot;total&quot;, race == &quot;total&quot;) %&gt;% select(tract, denial:rate_spread) jfco_sf %&lt;&gt;% left_join(home_loan_tract, by = c(&quot;GEOID&quot; = &quot;tract&quot;)) loan_num_labs &lt;- c(&quot;No mortgages&quot;, &quot;Less than 1&quot;, &quot;1 to 3&quot;, &quot;3 to 5&quot;, &quot;5 to 10&quot;, &quot;More than 10&quot;) jfco_sf %&lt;&gt;% mutate( loan_num_fill = case_when( loan_number_per_100 == 0 ~ loan_num_labs[1], loan_number_per_100 &lt;= 1 ~ loan_num_labs[2], loan_number_per_100 &lt;= 3 ~ loan_num_labs[3], loan_number_per_100 &lt;= 5 ~ loan_num_labs[4], loan_number_per_100 &lt;= 10 ~ loan_num_labs[5], loan_number_per_100 &gt; 10 ~ loan_num_labs[6], is.na(loan_number_per_100) ~ NA_character_, TRUE ~ &quot;error!!&quot;) %&gt;% factor(levels = loan_num_labs, ordered = TRUE)) ggplot(jfco_sf) + geom_sf(aes(fill = loan_num_fill)) + scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), legend.title = element_blank(), plot.caption = element_text(lineheight = 0.6)) + labs(title = &quot;Mortgages issued per 100 residents in 2019&quot;, caption = &quot;Source: Greater Louisville Project GLP analysis of data from the Consumer Financial Protection Bureau&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 5.4.1.2 Mortgages by race We can also examine mortgage data by race. Black residents in Louisville received fewer than half the number of mortgages per person that White residents did in 2019. # Interactive Mortgage map # load(&quot;home_loans_detail.RData&quot;) # home_loan_detail %&lt;&gt;% # select(tract, year, race, sex, loan_status, income, loan, rate) %&gt;% # mutate(tract = str_extract(tract, &quot;21111.*&quot;)) %&gt;% # filter(year == 2019, loan_status == &quot;approved&quot;) # # num_points &lt;- home_loan_detail %&gt;% # group_by(tract) %&gt;% # summarise(n = n(), .groups=&quot;drop&quot;) %&gt;% # left_join(glptools::map_tract, by = &quot;tract&quot;) %&gt;% # group_by(tract) %&gt;% # nest() %&gt;% # mutate(points = map(data, function(x) st_sample(x$geometry, x$n))) %&gt;% # unnest() # # home_loan_detail %&lt;&gt;% arrange(tract) # num_points %&lt;&gt;% arrange(tract) # # st_geometry(home_loan_detail) &lt;- num_points$points # # library(leaflet) # # # fillpal &lt;- colorFactor(RColorBrewer::brewer.pal(5, &quot;Dark2&quot;), domain = unique(home_loan_detail$race)) # # leaflet(filter(home_loan_detail, is.na(race))) %&gt;% # addCircleMarkers( # radius = ~sqrt(loan / 30000), # #radius = 5, # stroke=T, # fillColor = ~fillpal(race), # color = ~fillpal(race), # weight = 1, # fillOpacity = 0.15, # opacity = 0.4) %&gt;% # addLegend(pal = fillpal, values = unique(home_loan_detail$race)) %&gt;% # addTiles() mortgage_county &lt;- home_loan_county mortgage_county %&lt;&gt;% filter(FIPS == &quot;21111&quot;, sex==&quot;total&quot;, race %in% c(&quot;black&quot;, &quot;white&quot;)) %&gt;% rename(Race = race) %&gt;% mutate(Race = str_to_title(Race)) plt_by(mortgage_county, Race, loan_number_per_100, &quot;Mortgages by race&quot;, y_axis = &quot;Mortgages per 100 People&quot;, y_min = 0, caption_text = &quot;Source: Greater Louisville Project GLP analysis of data from the Consumer Financial Protection Bureau&quot;) 5.4.1.3 Mortgage Dollars by race The racial disparity in mortgages is even larger when you incorporate the dollar amount of mortgages issued. In 2019, white residents received $2.60 in mortgages for every $1 that Black residents received after adjusting for population size. plt_by(mortgage_county, Race, loan_amount_pp, &quot;Mortgage Lending by race&quot;, y_axis = &quot;Dollars per 100 People&quot;, y_min = 0, units = &quot;Dollars&quot;, caption_text = &quot;Source: Greater Louisville Project GLP analysis of data from the Consumer Financial Protection Bureau&quot;) 5.4.1.4 Denial Rates by Race Black residents are denied mortgages at a rate roughly twice that of white residents. The mortgage denial rate for Black residents has decreased from a high of 29% in 2008 to a low of 14% in 2019. However, it has not shown signs of decreasing in recent years, and Black residents are more likely to be impacted by the economic impacts of COVID-19, worsening the disparity in 2020 and beyond. plt_by(mortgage_county, Race, denial, &quot;Mortgage Denial by race&quot;, y_axis = &quot;Denial Rate&quot;, y_min = 0, units= &quot;Percent&quot;, caption_text = &quot;Source: Greater Louisville Project GLP analysis of data from the Consumer Financial Protection Bureau&quot;) 5.4.1.5 Denial Rates by Geography A major factor in mortgage availability is denial rates. While some areas of town saw few to no mortgage denials, people in many parts of West Louisville experienced denial rates of 30 to 40%. make_map(denial, title = &quot;Mortgage Denial Rate in 2019&quot;, legend = &quot;Percent&quot;, caption = &quot;Source: Greater Louisville Project GLP analysis of data from the Consumer Financial Protection Bureau&quot;, map_obj = jfco_sf) 5.4.1.6 Interest Rates by geography For the mortgages that were issued, interest rates varied from around 3.5% to around 5%. While the average interest rate was around 4% for the much of East Louisville, average interest rates in West Louisville were closer to 5%. A 30-year mortgage with an interest rate of 5% requires monthly payments that are 13% higher than a mortgage with an interest rate of 4%. make_map(rate, title = &quot;Mortgage Interest Rate in 2019&quot;, legend = &quot;Percent&quot;, caption = &quot;Source: Greater Louisville Project GLP analysis of data from the Consumer Financial Protection Bureau&quot;, map_obj = jfco_sf) 5.4.2 Housing Price Changes As Louisville grows, increasing home prices reflect changes in inflation and increasing demand for homes. Long-term growth in home prices helps homeowners build equity and wealth. Short-term appreciation can be a boon to homeowners with the finances to stay in their home, though it also causes many homeowners and renters to be dislocated from their neighborhood. 5.4.2.1 Long-term appreciation This map shows the change in existing home prices across zip codes since 2000 in Jefferson County, controlling for new construction. Since 2000, existing homes in Louisville have increased in value by an average of 62% after accounting for inflation, an average of about 2.4% per year. However, not every area of the city has benefited equally from this growth. Home prices in zip code 40204, which contains the Upper Highlands and Germantown, have more than doubled since 2000. While many zip codes close to downtown also saw high growth, many parts of West Louisville saw slow growth. lou_num &lt;- HPI_county %&gt;% filter(FIPS == &quot;21111&quot;) housing_price_index &lt;- HPI_zip housing_price_index %&lt;&gt;% filter(year == 2020) map_zip %&lt;&gt;% left_join(housing_price_index, by = &quot;zip&quot;) hpi_change &lt;- c(&quot;Lost value&quot;, &quot;0% - 25%&quot;, &quot;25% - 50%&quot;, &quot;50% - 75%&quot;, &quot;75% - 100%&quot;, &quot;100% - 125%&quot;) hpi_2015_change &lt;- c(&quot;Lost value&quot;, &quot;0% - 10%&quot;, &quot;10% - 20%&quot;, &quot;20% - 30%&quot;, &quot;30% - 40%&quot;, &quot;40% - 50%&quot;) map_zip %&lt;&gt;% mutate( hpi_fill = case_when( HPI &lt; 100 ~ hpi_change[1], HPI &lt; 125 ~ hpi_change[2], HPI &lt; 150 ~ hpi_change[3], HPI &lt; 175 ~ hpi_change[4], HPI &lt; 200 ~ hpi_change[5], HPI &lt; 225 ~ hpi_change[6], is.na(HPI) ~ NA_character_, TRUE ~ &quot;error!!&quot;) %&gt;% factor(levels = hpi_change, ordered = TRUE), hpi_2015_fill = case_when( HPI5 &lt; 0 ~ hpi_2015_change[1], HPI5 &lt; 10 ~ hpi_2015_change[2], HPI5 &lt; 20 ~ hpi_2015_change[3], HPI5 &lt; 30 ~ hpi_2015_change[4], HPI5 &lt; 40 ~ hpi_2015_change[5], HPI5 &lt; 50 ~ hpi_2015_change[6], is.na(HPI) ~ NA_character_, TRUE ~ &quot;error!!&quot;) %&gt;% factor(levels = hpi_2015_change, ordered = TRUE)) ggplot(map_zip) + geom_sf(aes(fill = HPI - 100)) + #scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + scale_fill_viridis(breaks = c(25, 50, 75, 100, 125), limits = c(24, 126), name = &quot;Percent Increase&quot;) + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), plot.caption = element_text(lineheight = 0.6)) + labs(title = &quot;Change in housing prices since 2000&quot;, caption = &quot;Source: Greater Louisville Project Data from Federal Housing Finance Agency HPI Tables&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 5.4.2.2 Short-term appreciation Looking at the growth since 2015 highlights zip codes where changes in home prices have been very acute. The average home in Louisville increased in value by 24% between 2015 and 2020. Most zip codes saw total growth of 20% - 35%, while changes in home prices for zip codes in West Louisville range from an increase of 15% in 40212 to an increase of 46% in 40203. Home prices in 40203 have increased by an average of 7.9% per year since 2015, and they threaten to displace many residents from parts of Russell and Old Louisville. ggplot(map_zip) + geom_sf(aes(fill = HPI5)) + #scale_fill_manual(values = viridis::viridis(6, direction = -1), na.value = &quot;grey&quot;) + scale_fill_viridis(name = &quot;Percent Increase&quot;) + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank(), plot.caption = element_text(lineheight = 0.6)) + labs(title = &quot;Change in housing prices since 2015&quot;, caption = &quot;Source: Greater Louisville Project Data from Federal Housing Finance Agency HPI Tables&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) 5.4.3 Home Valuation by Geography According to research by Dr. Andre Perry at the Brookings Institute, owner-occupied homes in Black neighborhoods are, on average, undervalued by $48,000 per house in the U.S. In the Louisville Metro Area, the median home value in majority Black neighborhoods is $89,681, but would be $117,593 if houses were not devalued, according to the same research. This difference constitutes a 27% undervaluation from what home values in Black neighborhoods would be if based on structural characteristics (e.g. sq. ft, year built) and neighborhood amenities (e.g. walkability, school districts, commute time) alone. devaluation &lt;- read_csv(&quot;Black_wealth/devaluation.csv&quot;) ranking_switch &lt;- function(df, var, plot_title = &quot;&quot;, year = NULL, sex = &quot;total&quot;, race = &quot;total&quot;, order = &quot;Descending&quot;, y_title = &quot;Percent&quot;, caption_text = &quot;&quot;, subtitle_text = &quot;&quot;, bar_label = TRUE, sigfig = 3, accuracy = 0.1, label_function, alternate_text = NULL, ranking_colors = TRUE, text_size, FIPS_df){ # Copy variable var to a new column for use with the &#39;$&#39; operator var &lt;- dplyr:::tbl_at_vars(df, vars(!!enquo(var))) df$var &lt;- df[[var]] # Filter to sex, race, and year if (&quot;sex&quot; %in% names(df)) df &lt;- df[df$sex == sex,] if (&quot;race&quot; %in% names(df)) df &lt;- df[df$race == race,] if(&quot;year&quot; %in% names(df)) { df &lt;- df[df$year %in% year,] if (length(year) &gt; 1) { df %&lt;&gt;% group_by_at(df %cols_in% c(&quot;MSA&quot;, &quot;FIPS&quot;)) %&gt;% summarise(var = mean(var, na.rm = TRUE)) %&gt;% ungroup() } } # Add peer data if not already present if (&quot;city&quot; %not_in% names(df)) { df %&lt;&gt;% pull_peers(add_info = T, FIPS_df = FIPS_df) %&gt;% filter(current == 1) } # Sort according to order parameter if (order %in% c(&quot;descending&quot;, &quot;Descending&quot;)) df %&lt;&gt;% arrange(desc(var)) if (order %in% c(&quot;ascending&quot;, &quot;Ascending&quot;)) df %&lt;&gt;% arrange(var) df %&lt;&gt;% filter(!is.na(var)) # Create numbered city labels for left side of graph df %&lt;&gt;% mutate( rank = row_number(), names = paste0(rank, &quot;. &quot;, city)) # Set bar colors if (ranking_colors) { # color_values &lt;- c(&quot;#96ca4f&quot;, &quot;#ffd600&quot;, &quot;#db2834&quot;) # color_names &lt;- c(&quot;green&quot;, &quot;yellow&quot;, &quot;red&quot;) # if (order %in% c(&quot;descending&quot;, &quot;Descending&quot;)) {color_names = rev(color_names)} # # breaks &lt;- classInt::classIntervals(na.omit(df$var), 3, style = &quot;jenks&quot;) # df$color &lt;- NA # df$color[df$var &lt;= breaks$brks[2]] &lt;- color_names[1] # df$color[df$var &gt; breaks$brks[2] &amp; df$var &lt;= breaks$brks[3]] &lt;- color_names[2] # df$color[df$var &gt; breaks$brks[3]] &lt;- color_names[3] color_values &lt;- c(&quot;#323844&quot;, &quot;#d63631&quot;) color_names &lt;- c(&quot;gray&quot;, &quot;red&quot;) df$color &lt;- &quot;red&quot; df$color[df$city == &quot;Louisville&quot;] &lt;- &quot;gray&quot; } else { df$color &lt;- &quot;blue&quot; color_values &lt;- &quot;#f58021&quot; color_names &lt;- &quot;blue&quot; } #if (order %in% c(&quot;descending&quot;, &quot;Descending&quot;)) color_values = rev(color_values) color_values = rev(color_values) # Create numeric labels # Create numeric labels if (!missing(label_function)) { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% label_function() } else if (y_title %in% c(&quot;Dollars&quot;, &quot;Hourly Wage&quot;)) { if(mean(df$var, na.rm = TRUE) &gt; 10000) { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::dollar(accuracy = accuracy, scale = .001, suffix = &quot;k&quot;) } else { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::dollar(accuracy = .01) } } else if (stringr::str_detect(y_title, &quot;Percent&quot;)) { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::percent(accuracy = accuracy, scale = 1, suffix = &quot;%&quot;) } else { label_text &lt;- df$var %&gt;% signif(sigfig) %&gt;% scales::comma(accuracy = accuracy) } # Set text format, highlight and italicise Louisville text, highlight Louisville bar df$textcolor &lt;- &quot;#000000&quot; df$textcolor[df$city %in% c(&quot;Nashville&quot;, &quot;Greenville&quot;, &quot;Oklahoma City&quot;, &quot;Louisville&quot;)] &lt;- &quot;#000000&quot; df$textfont &lt;- &quot;Montserrat&quot; df$textfont[df$city == &quot;Louisville&quot;] &lt;- &quot;Montserrat Bold&quot; label_color_names &lt;- c(&quot;white&quot;, &quot;black&quot;) label_color_values &lt;- c(&quot;#000000&quot;, &quot;#ffffff&quot;) df$label_color &lt;- &quot;white&quot; df$label_color[df$city %in% c(&quot;Nashville&quot;, &quot;Greenville&quot;, &quot;Oklahoma City&quot;, &quot;Louisville&quot;)] &lt;- &quot;black&quot; #df$linecolor &lt;- &quot;#ffffff&quot; #df$linecolor[df$city == &quot;Louisville&quot;] &lt;- &quot;#00a9b7&quot; df$lou &lt;- if_else(df$city == &quot;Louisville&quot;, 1, 0) df$text_alignment &lt;- 1.1 if (!is.null(alternate_text)) df$text_alignment[df$rank %in% alternate_text] &lt;- -0.1 ### PLOT GRAPH # Initial plot p &lt;- ggplot(data = df, aes(x = factor(names, levels = rev(names)), y = var, fill = factor(color, levels = color_names, ordered = TRUE))) p &lt;- p + guides(fill = FALSE, color = FALSE) # Add bars p &lt;- p + geom_bar(stat = &quot;identity&quot;, size = text_size) + coord_flip() + ggthemes::theme_tufte() p &lt;- p + scale_fill_manual(values = color_values) #p &lt;- p + scale_color_manual(values = c(&quot;#ffffff&quot;, &quot;#00a9b7&quot;)) # Add features title_scale &lt;- min(1, 48 / nchar(plot_title)) p &lt;- p + theme(text = element_text(family = &quot;Montserrat&quot;), plot.title = element_text(size = 14 * title_scale * text_size, hjust = 0.5, margin = margin(b = 10, unit = &quot;pt&quot;)), axis.text.y = element_text(hjust = 0, size = 10 * text_size, color = rev(df$textcolor), family = rev(df$textfont)), axis.title.x = element_text(size = 10 * text_size), axis.ticks = element_blank(), axis.text.x = element_blank(), plot.caption = element_text(size = 10 * text_size, lineheight = 0.5)) if(subtitle_text != &quot;&quot;){ p &lt;- p + labs(subtitle = subtitle_text) + theme(plot.subtitle = element_text(hjust = 0.5, size = 10 * text_size)) } # Add numeric labels to bars based on bar_label parameter if (y_title != &quot;&quot; &amp; bar_label) { p &lt;- p + geom_text(aes(label = label_text, hjust = text_alignment, color = factor(label_color), family = textfont), size = 4.5 * text_size) + scale_colour_manual(values=c(&quot;#000000&quot;, &quot;#ffffff&quot;)) } # Add vertical line to the left side of the bars based on the h_line parameter if (min(df$var, na.rm = TRUE) &lt; 0) p &lt;- p + geom_hline(yintercept = 0, linetype = &quot;longdash&quot;, size = 2) # Add remaining text p &lt;- p + labs(title = plot_title, y = y_title, x = &quot;&quot;, caption = caption_text) p &lt;- p + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;, colour = NA)) p &lt;- p + expand_limits(y = 15) p } ranking_switch(devaluation, devaluation, plot_title = &quot;Devaluation of Homes in Black Neighborhoods&quot;, text_size = 2, alternate_text=1:17, FIPS_df = FIPS_df, caption = &quot;Source: Greater Louisville Project Data from Dr. Andre Perry, Brookings Institute&quot;) 5.4.4 Property Taxes While facing lower home values on the market, homes in majority-Black neighborhoods are valued relatively-higher than homes in majority-white by the property tax administration, and thus face higher taxation relative to the market value of their homes. The Jefferson County Property Value Administration (PVA) assesses homes every three years to determine their value, and that value is used to determine the amount of property taxes the owner owes. The PVA compares homes to similar nearby properties to determine an appropriate valuation. Based on a comparison of property tax assessments to actual sale prices, data shows that property valuations tend to overvalue homes in some neighborhoods and undervalue them in others, resulting in different property tax rates for owners. There are numerous 5.4.4.1 Property Assessments The map below compares property assessments to market values. Negative values indicate that home assessments are usually lower than their market price, while postive values indicate that home assessments are, on average, higher than their market price. Properties inside the Watterson and East of I-65 are consistently valued, and thus taxed, at a lower rate than they are worth. Most over-assessments can be found in Southwest and South Louisville. There are numerous potential reasons for these discrepancies. One significant factor in Louisville is that homes are usually assessed every three years. In neighborhoods where home values consistently go up, market values quickly increase beyond assessment values. In neighborhoods where home values increase more slowly, market prices usually stay close to property assessments. Several other potential reasons are described in detail in the research linked above. # Load Property tax analysis webpage page &lt;- read_html(&quot;Black_wealth/An Evaluation of Property Tax Regressivity in Jefferson County, Kentucky.html&quot;) # Extract sales ratio and property tax rate data-for elements sales_ratio_html = page %&gt;% html_elements(&#39;script[data-for=&quot;htmlwidget-0527b478a846743b2dd4&quot;]&#39;) property_tax_html = page %&gt;% html_elements(&#39;script[data-for=&quot;htmlwidget-a1602585f74d11977716&quot;]&#39;) sales_ratio_html %&lt;&gt;% html_text() property_tax_html %&lt;&gt;% html_text() # Extract relevant component and split long text strings on commas (by census tract) sales_ratio_text &lt;- sales_ratio_html %&gt;% str_extract(&#39;&lt;strong&gt;Census Tract 2, .*300,200(?=&quot;])&#39;) %&gt;% str_split(&#39;&quot;,&quot;&#39;) property_tax_text &lt;- property_tax_html %&gt;% str_extract(&#39;&lt;strong&gt;Census Tract 2, .*300,200(?=&quot;])&#39;) %&gt;% str_split(&#39;&quot;,&quot;&#39;) # Convert to data frame and extract components using regex tax_data &lt;- data.frame( sales_ratio_raw = sales_ratio_text[[1]], property_tax_raw = property_tax_text[[1]]) tax_data %&lt;&gt;% mutate( # &#39;Census Tract &#39; followed by 1-6 characters before a comma sr_tract = str_extract(sales_ratio_raw, &quot;(?&lt;=Census Tract ).{1,6}(?=,)&quot;), # &#39;Sales in Sample): &#39; followed by 3-5 characters before % sr_ratio = str_extract(sales_ratio_raw, &quot;(?&lt;=Sales in Sample\\\\)\\\\: ).{3,5}(?=\\\\%)&quot;), # &#39;( &#39; followed by any number of digits before &#39;)&#39; sr_sample = str_extract(sales_ratio_raw, &quot;(?&lt;=\\\\()\\\\d*(?=\\\\))&quot;), # &#39;Median Home Value: $&#39; followed by the rest of the string home_value = str_extract(sales_ratio_raw, &quot;(?&lt;=Median Home Value\\\\: \\\\$).*&quot;), # &#39;Percent White Population: &#39; followed by 3-5 characters before % white = str_extract(sales_ratio_raw, &quot;(?&lt;=Percent White Population\\\\: ).{3,5}(?=\\\\%)&quot;), # &#39;Census Tract &#39; followed by 1-6 characters before a comma pt_tract = str_extract(property_tax_raw, &quot;(?&lt;=Census Tract ).{1,6}(?=,)&quot;), # &#39;Sales in Sample): &#39; followed by 3-5 characters before % pt_rate = str_extract(property_tax_raw, &quot;(?&lt;=Sales in Sample\\\\)\\\\: ).{3,5}(?=\\\\%)&quot;), # &#39;( &#39; followed by any number of digits before &#39;)&#39; pt_sample = str_extract(property_tax_raw, &quot;(?&lt;=\\\\()\\\\d*(?=\\\\))&quot;)) # Check: tract and sample size match across all tracts. TRUE # all(tax_data$sr_tract == tax_data$pt_tract) # all(tax_data$sr_sample == tax_data$pt_sample) # Create tract IDs and clean data frame tax_data %&lt;&gt;% mutate( tract_start = str_extract(sr_tract, &quot;\\\\d{1,3}&quot;) %&gt;% str_pad(4, &quot;left&quot;, &quot;0&quot;), tract_end = str_extract(sr_tract, &quot;(?&lt;=\\\\.)\\\\d{1,2}&quot;) %&gt;% replace_na(&quot;00&quot;) %&gt;% str_pad(2, &quot;left&quot;, &quot;0&quot;), tract = paste0(&quot;21111&quot;, tract_start, tract_end)) %&gt;% transmute( tract, sales_ratio = as.numeric(sr_ratio), property_tax = as.numeric(pt_rate), sample_size = as.numeric(sr_sample), pct_white = as.numeric(white), median_value = as.numeric(str_remove(home_value, &quot;,&quot;))) tax_data %&lt;&gt;% mutate( dif = sales_ratio - 100, dif_bins = case_when(dif &lt; -10 ~ &quot;10 to 15% lower&quot;, dif &lt; -5 ~ &quot;5 to 10% lower&quot;, dif &lt; 0 ~ &quot;0 to 5% lower&quot;, dif &lt; 5 ~ &quot;0 to 5% higher&quot;, dif &lt; 10 ~ &quot;5 to 10% higher&quot;) %&gt;% factor(levels = c(&quot;10 to 15% lower&quot;, &quot;5 to 10% lower&quot;, &quot;0 to 5% lower&quot;, &quot;0 to 5% higher&quot;, &quot;5 to 10% higher&quot;), ordered = T), sales_ratio_bins = case_when(sales_ratio &lt; 90 ~ &quot;85-90&quot;, sales_ratio &lt; 95 ~ &quot;90-95&quot;, sales_ratio &lt; 100 ~ &quot;95-100&quot;, sales_ratio &lt; 105 ~ &quot;100-105&quot;, sales_ratio &lt; 110 ~ &quot;105-110&quot;) %&gt;% factor(levels = c(&quot;85-90&quot;, &quot;90-95&quot;, &quot;95-100&quot;, &quot;100-105&quot;, &quot;105-110&quot;), ordered = T), property_tax_bins = case_when(property_tax == 0.8 ~ &quot;0.8%&quot;, property_tax == 0.9 ~ &quot;0.9%&quot;, property_tax == 1.0 ~ &quot;1.0%&quot;, property_tax == 1.1 ~ &quot;1.1%&quot;, property_tax == 1.2 ~ &quot;1.2%&quot;, property_tax == 1.3 ~ &quot;1.3%&quot;, property_tax == 1.4 ~ &quot;1.4%&quot;, property_tax == 1.5 ~ &quot;1.5%&quot;,) %&gt;% factor(levels = c(&quot;0.8%&quot;, &quot;0.9%&quot;, &quot;1.0%&quot;, &quot;1.1%&quot;, &quot;1.2%&quot;, &quot;1.3%&quot;, &quot;1.4%&quot;, &quot;1.5%&quot;), ordered = T)) pop_data &lt;- glpdata::population_tract %&gt;% filter(year == 2016, race %in% c(&quot;total&quot;, &quot;black&quot;), sex == &quot;total&quot;) %&gt;% select(tract, race, population) %&gt;% pivot_wider(names_from = race, values_from = population) %&gt;% mutate(percent_black = black / total * 100) tax_data %&lt;&gt;% left_join(pop_data, by = &quot;tract&quot;) jfco_sf %&lt;&gt;% left_join(tax_data, by = c(&quot;GEOID&quot; = &quot;tract&quot;)) make_map_bins &lt;- function(indicator, title = &quot;&quot;, legend = &quot;&quot;, caption = &quot;&quot;, no_legend = FALSE, vir_dir = 1, bins, shapefile){ plt &lt;- ggplot(shapefile) + geom_sf(aes(fill={{ indicator }} )) + # scale_fill_gradient(low = &quot;#323844&quot;, high = &quot;#d63631&quot;, name = &quot;Percent&quot;) + scale_fill_viridis(na.value = &quot;grey&quot;, name = legend, direction = vir_dir, discrete = T) + theme_bw(base_size = 22) + theme(plot.caption = element_text(lineheight = .5)) + theme(text = element_text(family = &quot;Montserrat&quot;), panel.grid = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.border = element_blank()) + labs(title = title, caption = caption) if (no_legend == TRUE){ plt &lt;- plt + theme(legend.position = &quot;none&quot;) } plt &lt;- plt + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) return(plt) } make_map_bins(dif_bins, title = &quot;Assessed Value compared to Market Value&quot;, bins = c(-15, -10, -5, 0, 5, 10), caption = &quot;Source: Greater Louisville Project GLP analysis of data from University of Chicago Harris Public Policy&quot;, shapefile = jfco_sf) 5.4.4.2 Property Taxes The property tax rate for homeowners differs by location. Most homeowners across the county pay taxes toward JCPS, and most homeowners who live inside the Watterson also pay taxes to the Urban Services District. Independent cities, fire departments, and school districts charge different rates throughout the county. As a result, there is no consistent property tax rate throughout Jefferson County. Differences in property tax rates are a result of both local tax rates and property assessments. The map below shows the effective property tax rate, or the amount of property tax homeowners paid based on the market value of their homes. The majority of homeowners pay a property tax of around 1% of their homes value. Homeowners in some neighborhoods pay slightly less, and many pay slightly more. The highest effective tax rates are found in West Louisville due to a combination of high property assessments relative to homes values, and the property tax rate for the Urban Services District. make_map_bins(property_tax_bins, title = &quot;Effective Property Tax Rate&quot;, legend = &quot;Percent of Home Value&quot;, caption = &quot;Source: Greater Louisville Project GLP analysis of data from University of Chicago Harris Public Policy&quot;, shapefile = jfco_sf) 5.4.5 Undervaluation and Overtaxation This image summarizes the previous two sections (home valuation and property assessments). If homes in Black neighborhoods were valued by the market and taxed by the city like homes in other neighborhoods, homeowners in those neighborhoods would have higher-priced homes taxed at a lower rate. *This follows Dr. Andre Perrys (Brookings Institute) methodology in defining a majority Black neighborhood as one with  50% Black residents. **The data on the right reflects a home price without devaluation and the average effective property tax rate of white neighborhoods in Louisville. These differences are likely not a completely just or equitable reality, but one that moves us closer to that. # average property tax vs average property tax in a Black neighborhood tax_data_bn &lt;- tax_data %&gt;% filter(percent_black &gt;=50) %&gt;% #summarize(prop_tax = mean(property_tax, na.rm=T)) summarize(prop_tax = weighted.mean(property_tax, sample_size, na.rm=T)) %&gt;% pull(prop_tax) t=tax_data %&gt;% left_join(glptools::nh_tract) %&gt;% group_by(pct_white&lt;50) %&gt;% summarize( sales_ratio = weighted.mean(sales_ratio, sample_size, na.rm=T), pct_white = mean(pct_white, na.rm=T)) ggplot(tax_data, aes(x=percent_black, y=sales_ratio)) + geom_point() + geom_smooth() + theme_bw(base_size = 22, base_family = &quot;Montserrat&quot;) + theme(panel.grid = element_blank(), panel.border = element_blank(), legend.title = element_blank()) + labs(title = &quot;Neighborhoods by Assessment Ratio and Race&quot;) + theme( panel.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the panel plot.background = element_rect(fill = &quot;transparent&quot;, color = NA), # bg of the plot legend.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend bg legend.box.background = element_rect(fill = &quot;transparent&quot;, color = &quot;transparent&quot;), # get rid of legend panel bg legend.key = element_rect(fill = &quot;transparent&quot;,colour = NA)) + labs(x = &quot;Percent of Residents who are Black&quot;, y = &quot;Assessment Ratio&quot;) # Method 1: Summarize daata for each group based on Dr. Perry&#39;s definitions nb_sales_ratio &lt;- tax_data %&gt;% filter(percent_black &lt;= 1) %&gt;% summarize(output = weighted.mean(sales_ratio, sample_size)) %&gt;% pull(output) black_ratio &lt;- tax_data %&gt;% filter(percent_black &gt;= 50) %&gt;% summarize(output = weighted.mean(sales_ratio, sample_size, na.rm=T)) %&gt;% pull(output) # Method 2: Summarize data for each group based on the 10% most- and 10% least-Black neighborhoods nb_sales_ratio &lt;- tax_data %&gt;% filter(percent_black &lt;= quantile(percent_black, 0.1)) %&gt;% summarize(output = weighted.mean(sales_ratio, sample_size)) %&gt;% pull(output) black_ratio &lt;- tax_data %&gt;% filter(percent_black &gt;= quantile(percent_black, 0.9)) %&gt;% summarize(output = weighted.mean(sales_ratio, sample_size, na.rm=T)) %&gt;% pull(output) prop_ratio &lt;- nb_sales_ratio / black_ratio * tax_data_bn # Method 3: model data using splines library(splines) t=lm(sales_ratio~bs(percent_black, knots = quantile(tax_data$percent_black, c(0.25, 0.5, 0.75))), data=tax_data) plot(predict(t, newdata = list(percent_black = c(0:100))),ylim=c(85, 110),type=&quot;l&quot;) points(tax_data$percent_black, tax_data$sales_ratio) predict(t, newdata = list(percent_black = 0)) predict(t, newdata = list(percent_black = 50:100)) %&gt;% mean() test &lt;- glptools::map_muw test_pop &lt;- glpdata::population_muw %&gt;% filter(year == 2016, sex == &quot;total&quot;, race %in% c(&quot;black&quot;, &quot;total&quot;)) %&gt;% select(-population_change, -population_change_adj) %&gt;% pivot_wider(values_from = population, names_from = race) test %&lt;&gt;% left_join(test_pop) %&gt;% mutate(pct_black = black / total * 100) leaflet(test) %&gt;% addTiles()%&gt;% addPolygons(fill = test$pct_black &gt;= 50) library(glptools) housing_vars_05_5yr &lt;- build_census_var_df(&quot;acs5&quot;, &quot;B25077&quot;) housing_map &lt;- get_census(filter(housing_vars_05_5yr, year == 2019), &quot;tract&quot;) pop_map &lt;- glpdata::population_tract %&gt;% filter(year == 2016, sex == &quot;total&quot;, race == &quot;total&quot;) %&gt;% select(tract, population) t=housing_map %&gt;% select(tract, year, var_type, value) %&gt;% pivot_vartype_wider(value) %&gt;% left_join(muw_tract, by = &quot;tract&quot;) %&gt;% left_join(pop_data, by = &quot;tract&quot;) %&gt;% filter(neighborhood %not_in% c(&quot;Airport&quot;, &quot;Minor Lane Heights&quot;)) %&gt;% mutate( estimate = if_else(estimate %in% c(9999, -666666666), NA_real_, estimate), MOE = if_else(MOE %in% c(-333333333, -222222222), NA_real_, MOE)) black_neighborhood_summary &lt;- t %&gt;% group_by(percent_black &gt;= 50) %&gt;% summarize( #estimate = weighted.mean(estimate, total, na.rm = T), estimate = Hmisc::wtd.quantile(estimate, total, probs = 0.5, na.rm = T), MOE = sqrt(sum(MOE^2))) neighborhood_summary &lt;- t %&gt;% group_by(neighborhood) %&gt;% summarize( estimate = weighted.mean(estimate, population), MOE = sqrt(sum(MOE^2))) housing_vars_05_5yr &lt;- build_census_var_df(&quot;acs5&quot;, &quot;B25082&quot;) housing_map &lt;- get_census(housing_vars_05_5yr, &quot;tract&quot;) %&gt;% filter(year == 2017) t=housing_map %&gt;% filter(label == &quot;Estimate!!Aggregate value (dollars):&quot;, var_type == &quot;estimate&quot;) %&gt;% mutate(value = if_else(value == -666666666, NA_real_, value)) %&gt;% left_join(pop_data, by = &quot;tract&quot;) %&gt;% group_by(percent_black &gt;= 50) %&gt;% summarize(agg_value = sum(value, na.rm = TRUE)) 5.4.6 Homeownership Rates Black families both start with less wealth (and therefore less opportunities to build on it even in a fair market) and this is compountded at each step of the home ownership process. 5.4.6.1 Ranking Slightly more than 1 in 3 Black Louisville residents own their own homes. While this is roughly toward the middle of our peer cities, it is roughly half the homeownership rate among white residents. housing_df &lt;- housing_county %&gt;% filter(var_type == &quot;percent&quot;) housing_df_gap &lt;- housing_df %&gt;% filter(sex == &quot;total&quot;, race %in% c(&quot;black&quot;, &quot;white&quot;), var_type == &quot;percent&quot;) %&gt;% select(FIPS, year, race, homeownership) %&gt;% pivot_wider(values_from = homeownership, names_from = race) %&gt;% mutate(gap = white - black) ranking(housing_df, homeownership, race = &quot;black&quot;, year = 2019, text_size = 2, FIPS_df = FIPS_df, plot_title = &quot;Black Homeownership&quot;, caption = &quot;Source: Greater Louisville Project GLP analysis of ACS microdata from IPUMS USA&quot;) 5.4.6.2 Trend Homeownership among all Louisville residents, including Black residents, has declined slightly since the early 2000s. Since 2010, Louisvilles racial homeownership gap has been among the largest of our peer cities. housing_df_clean &lt;- housing_df %&gt;% filter(FIPS == &quot;21111&quot;, sex == &quot;total&quot;, race %not_in% c(&quot;other&quot;, &quot;hispanic&quot;)) %&gt;% mutate(race = str_to_title(race)) plt_by(housing_df_clean, race, homeownership, title_text = &quot;Homeownership by Race&quot;, caption_text = &quot;Source: Greater Louisville Project GLP analysis of ACS microdata from IPUMS USA&quot;) 5.4.6.3 Map Across Louisville, homeownership varies from less than 10% in some areas to the high 90s in others. housing_map_clean &lt;- housing_tract %&gt;% filter(sex == &quot;total&quot;, race == &quot;total&quot;, year == 2017, var_type == &quot;percent&quot;) %&gt;% select(-sex, -race, -year, -var_type) jfco_sf %&lt;&gt;% left_join(housing_map_clean, by = c(&quot;GEOID&quot; = &quot;tract&quot;)) make_map(homeownership, &quot;Homeownership&quot;, legend = &quot;Percent&quot;, caption = &quot;Source: Greater Louisville Project ACS table B25106&quot;, map_obj = jfco_sf) 5.5 Household Income (Local) Many activities that lead to wealth-creation, like starting a business or getting a degree, are not directly tied to income. However, the majority of families build wealth by saving the money they earn. Disparities in income lead to larger disparities in wealth. 5.5.1 Trendline While income for Black Households in Louisville has trended up over the last few years, the median Black household only receives about two-thirds the income of the median Louisville household. After adjusting for inflation, median income declined among Black households from 2000 to 2013 and only surpassed their previous levels in 2017. hh_income_filtered &lt;- hh_income_county %&gt;% filter(var_type == &quot;estimate&quot;, race %in% c(&quot;black&quot;, &quot;total&quot;, &quot;white&quot;), FIPS == &quot;21111&quot;) %&gt;% mutate(race = str_to_title(race)) plt_by(hh_income_filtered, race, hh_income, y_axis = &quot;Dollars&quot;, units = &quot;Dollars&quot;, title_text = &quot;Household Income by Race&quot;, subtitle_text = &quot;Adjusted for inflation to 2019 dollars&quot;, caption_text = &quot;Source: Greater Louisville Project ACS Tables P053, P152, B19013&quot;) 5.5.2 Map The median household income varies widely across Louisville, ranging from under $20,000 in some areas to over $150,000 in others. hh_income_tract_clean &lt;- hh_income_tract %&gt;% filter(year == 2016, race %in% c(&quot;total&quot;, &quot;black&quot;)) %&gt;% pivot_wider(names_from = race, values_from = hh_income, names_prefix = &quot;hh_income_&quot;) %&gt;% select(-year, -sex) jfco_sf %&lt;&gt;% left_join(hh_income_tract_clean, by = c(&quot;GEOID&quot; = &quot;tract&quot;)) %&gt;% mutate(hh_income_black = if_else(hh_income_black &lt; -1000000, NA_real_, hh_income_black)) make_map(hh_income_total, &quot;Median Household income&quot;, legend = &quot;Dollars&quot;, caption = &quot;Source: Greater Louisville Project ACS Table B19013&quot;, map_obj = jfco_sf) 5.6 The Tip of the Iceberg We have the most data on housing, income, and businesses, but these are not the only areas of wealth building where systemic inequality is pervasive. Black families start with less wealth (and therefore have less opportunities to build on it even in an equal market) and face discrimination at each step of the process. A better understanding of what metrics are important for describing Black wealth in both quantitative and qualitative terms is important to improve our work in this area, and we welcome input. "]]
